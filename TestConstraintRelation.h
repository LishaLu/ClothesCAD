#pragma once
#include "CLine.h"
#include "ConstraintRelation.h"
#include "CVertex.h"
#include "ParaConstraintRelation.h"
#include "VerConstraintRelation.h"
#include "RotateConstraintRelation.h"
#include "RayConstraintRelation.h"
#include "ExpandConstraintRelation.h"
#include "ParameterConstraintRelation.h"
#include "LineAndLineConstraintRelation.h"
#include "LineAndPointConstraintRelation.h"
#include "LineAndCurveConstraintRelation.h"
#include "constant.h"
#include "LineAndBezierConstraintRelation.h"
#include "AngleBisectionConstraintRelation.h"
#include "RatioConstraintRelation.h"
#include "ArcAndLineConstraintRelation.h"
#include "ClothesParameter.h"
#include "GlobalVar.h"
//#include "math.h"



class TestConstraintRelation
{

public:
	void  static TestDrawPara(CDC *pDC) {
		//COrientGraph a = COrientGraph(5);

		CLine paraLine = CLine(CPoint1(100, 100), CPoint1(200, 100));
		CLine crossLine1 = CLine(CPoint1(100, 100), CPoint1(100, 200));
		CLine crossLine2 = CLine(CPoint1(200, 100), CPoint1(200, 200));

		CVertex *paraVertex = new CVertex(paraLine);
		CVertex *crossVertex1 = new CVertex(crossLine1);
		CVertex *crossVertex2 = new CVertex(crossLine2);

		ConstraintRelation *paraConstraintRelation = new ParaConstraintRelation(paraVertex, crossVertex1, crossVertex2, 200, { __T("a"), __T("b") });

		CVertex *result = new CVertex(paraConstraintRelation);

		paraVertex->draw(pDC);
		crossVertex1->draw(pDC);
		crossVertex2->draw(pDC);
		result->draw(pDC);
		delete paraVertex;
		delete crossVertex1;
		delete crossVertex2;
		delete result;
	}

	void static TestRatioVer(CDC *pDC) {


		CLine verLine = CLine(CPoint1(100, 100), CPoint1(150, 200));

		//测试正常的垂直， distance 和 heigh 都为正
		CVertex *verVertex = new CVertex(verLine);
		ConstraintRelation *ratioConstraintRelation = new RatioConstraintRelation(verVertex, 0.5, CPoint1(300, 300), { __T("c"), __T("d") });
		CVertex *result = new CVertex(ratioConstraintRelation);

		verVertex->draw(pDC);
		result->draw(pDC);

		delete verVertex;
		delete result;


	}

	void  static TestDrawVer(CDC *pDC) {
		//COrientGraph a = COrientGraph(5);

		//被垂直线是水平线
		CLine verLine = CLine(CPoint1(100, 100), CPoint1(150, 200));

		//测试正常的垂直， distance 和 heigh 都为正
		CVertex *verVertex = new CVertex(verLine);
		ConstraintRelation *verConstraintRelation = new VerConstraintRelation(verVertex, 50, 50, { __T("e"), __T("f") });
		CVertex *result = new CVertex(verConstraintRelation);

		//测试 distance 和 heigh 都为负
		ConstraintRelation *verConstraintRelation1 = new VerConstraintRelation(verVertex, -50, -50, { __T("g"), __T("h") });
		CVertex *result1 = new CVertex(verConstraintRelation1);


		//被垂直线是垂直线
		CLine verLine1 = CLine(CPoint1(100, 100), CPoint1(100, 200));
		CVertex *verVertex1 = new CVertex(verLine1);
		ConstraintRelation *verConstraintRelation2 = new VerConstraintRelation(verVertex1, -50, -50, { __T("i"), __T("j") });
		CVertex *result2 = new CVertex(verConstraintRelation2);



		ConstraintRelation *testVerConstraintWithPoint = new VerConstraintRelation(verVertex, CPoint1(50, 50), { __T("k"), __T("l") });

		CVertex *verVertexWithPoint = new CVertex(testVerConstraintWithPoint);
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

		verLine.draw(pDC, &greenPen);
		verVertexWithPoint->draw(pDC, &greenPen);
		verVertex->draw(pDC);
		result->draw(pDC);
		result1->draw(pDC);
		result2->draw(pDC);
		delete verVertex;
		delete result;
		delete result1;
		delete verVertexWithPoint;
	}

	void  static TestDrawRotate(CDC *pDC) {
		//COrientGraph a = COrientGraph(5);

		//旋转的依据线
		CLine verLine = CLine(CPoint1(100, 100), CPoint1(200, 100));

		CVertex *verVertex = new CVertex(verLine);
		ConstraintRelation *rotateConstraintRelation = new RotateConstraintRelation(verVertex, 30, { __T("a"), __T("b") });
		CVertex *result = new CVertex(rotateConstraintRelation);

		ConstraintRelation *rotateConstraintRelation1 = new RotateConstraintRelation(verVertex, -30, { __T("a"), __T("b") });
		CVertex *result1 = new CVertex(rotateConstraintRelation1);


		verVertex->draw(pDC);
		result->draw(pDC);
		result1->draw(pDC);
		delete verVertex;
		delete result;
		delete result1;
	}

	void  static TestDrawRay(CDC *pDC) {

		CPoint1 originPoint = CPoint1(200, 200);
		ConstraintRelation *rayConstraintRelation = new RayConstraintRelation(originPoint, 60, 200, { __T("a"), __T("b") });
		CVertex *result1 = new CVertex(rayConstraintRelation);
		result1->draw(pDC);
		delete result1;
	}

	void  static TestDrawExpand(CDC *pDC) {

		CLine verLine = CLine(CPoint1(100, 100), CPoint1(500, 500));
		CVertex *verVertex = new CVertex(verLine);
		ConstraintRelation * constraintRelation = new ExpandConstraintRelation(verVertex, -50, { __T("a"), __T("b") });
		CVertex *result1 = new CVertex(constraintRelation);
		result1->draw(pDC);
		delete result1;
	}

	void  static TestCurve(CDC *pDC) {

		CCurve curve(std::vector<CPoint1>{CPoint1(100, 100), CPoint1(100, 200), CPoint1(500, 500)});

		curve.draw(pDC);
	}

	void  static TestDraw(CDC *pDC) {
		//开始画矩形的四条线
		double length = 35;
		double height = 50;
		CPoint1 originPoint = CPoint1(100, 100);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 1, RGB(255, 0, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, length, { __T("a"), __T("b") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, height, { __T("a"), __T("d") });

		//水平ab
		CVertex *ab = new CVertex(parameterCRhorizontal);
		//垂直ad
		CVertex *ad = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, length, { __T("c"), __T("d") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, height, { __T("b"), __T("c") });
		//水平cd
		CVertex *cd = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *bc = new CVertex(rayCRvertical);

		ab->drawWithLabel(pDC, &redPen);
		ad->drawWithLabel(pDC, &redPen);

		bc->drawWithLabel(pDC, &redPen);
		cd->drawWithLabel(pDC, &redPen);


		//ef 平行ab， 与ad，bc相交， 假设距离ab的距离为180
		CVertex *ef = new CVertex(new ParaConstraintRelation(ab, ad, bc, 30, { __T("e"), __T("f") }));
		ef->drawWithLabel(pDC, &redPen);

		//gh  平行ad， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *gh = new CVertex(new ParaConstraintRelation(ad, ab, ef, 25, { __T("g"), __T("h") }));
		gh->drawWithLabel(pDC, &redPen);

		//ij 垂直ab， 假设距离ab起点为50， 向上垂直30( 即为-30, 这里向上为负，向下为正， 向左为负，向右为正)
		CVertex *ij = new CVertex(new VerConstraintRelation(ab, 8, -5, { __T("i"), __T("j") }));
		ij->drawWithLabel(pDC, &redPen);

		//ai, 这里为辅助线， 线线关系 ab的起点 和 ij的终点组成的线
		CVertex *ai = new CVertex(new LineAndLineConstraintRelation(ab, PointOnLinePosition(LineStOrEd::START, 0), ij, LineStOrEd::END, { __T("a"), __T("i") }));

		//jl 线线关系, ai的2/3点 和 ij的起点组成的线
		CVertex *jl = new CVertex(new LineAndLineConstraintRelation(ij, LineStOrEd::START, ai, LineStOrEd::TWO_THIRDS, { __T("l"), __T("j") }));
		jl->drawWithLabel(pDC, &redPen);

		//后期需要改成弧线， 这里线取ai的1/3点 和 ij的起点组成的线
		CVertex *jk = new CVertex(new LineAndLineConstraintRelation(ij, LineStOrEd::START, ai, LineStOrEd::ONE_THIRD, { __T("j"), __T("k") }));
		jk->drawWithLabel(pDC, &redPen);

		//jm 射线, ij的起点， 然后与gh相交
		CVertex *jm = new CVertex(new RayConstraintRelation(ij, LineStOrEd::START, 27, gh, { __T("j"), __T("m") }));
		jm->drawWithLabel(pDC, &redPen);

		//jn (这里辅助线) 延长线，jm的延长线
		CVertex *jn = new CVertex(new ExpandConstraintRelation(jm, 4, { __T("j"), __T("n") }));
		//mn 线线关系， 这里是jm的终点m， 与jn终点n 组成的线
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(jm, LineStOrEd::END, jn, LineStOrEd::END, { __T("m"), __T("n") }));
		mn->drawWithLabel(pDC, &redPen);

		//gf (这里只是辅助线，只用来求长度) 线线关系 gh的终点， ef的终点
		//CVertex *mn = new CVertex(new LineAndLineConstraintRelation(gh, LineStOrEd::END, ef, LineStOrEd::END));

		double ghlength = CPoint1::Distance(dynamic_cast<CLine*>(gh->getFigure())->GetEd(), dynamic_cast<CLine*>(ef->getFigure())->GetEd()) / 3 + 10;

		//gp 射线 gh的起点，长度假设为20（这里不好算）
		CVertex *gp = new CVertex(new RayConstraintRelation(gh, PointOnLinePosition(LineStOrEd::END, 0), -45, ghlength / 6, { __T("g"), __T("h") }));
		gp->drawWithLabel(pDC, &redPen);


		//fq 线点关系， ef线的终点， 还有c点左2cm（这里自定义了左10像素，后面需要该）
		CPoint1 Q = dynamic_cast<CLine*>(bc->getFigure())->GetEd() + CPoint1(-10, 0);
		CVertex *fq = new CVertex(new LineAndPointConstraintRelation(ef, LineStOrEd::END, Q, { __T("e"), __T("f") }));
		fq->drawWithLabel(pDC, &redPen);

		// 弧线
		//nopf弧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec;
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(gp, PointOnLinePosition(LineStOrEd::END)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(gh, PointOnLinePosition(LineStOrEd::HALF)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(mn, PointOnLinePosition(LineStOrEd::END)));

		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec));
		nopf->draw(pDC);

		//jka弧线 这条线暂时没有画出效果

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ij, PointOnLinePosition(LineStOrEd::START)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ai, PointOnLinePosition(LineStOrEd::ONE_THIRD)));
		//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
		CVertex *jka = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		jka->draw(pDC);

	}

public:

	//   裙子――纵向编织――2D+3D
	// V领-整件
	void static TestDraw_LongitudinalKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

			// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(200, 120) + offset;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



		////2 绘制前后中线aa1
		//CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		////aj1->drawWithLabel(pDC, &bluePen);


		////3 绘制左下摆线。 
		//CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		////j1u->drawWithLabel(pDC, &bluePen);
		//j1u->draw(pDC, &redPen);
		////4 绘制右下摆线。  
		//CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		////j1t->drawWithLabel(pDC, &bluePen);
		//j1t->draw(pDC, &redPen);

		////5 绘制左腰围线。  backLength = bodyLength - 15 ;
		//CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		////g1x->drawWithLabel(pDC, &bluePen);
		////6 绘制右腰围线。  backLength = bodyLength - 15 ;
		//CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		////g1q->drawWithLabel(pDC, &bluePen);


		////7 绘制左胸围线。 
		//CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		////hy->drawWithLabel(pDC, &bluePen);
		////8 绘制右胸围线。 
		//CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		////hp->drawWithLabel(pDC, &bluePen);


		//////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		// //8 绘制左臀围线。  
		//CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		////h1w->drawWithLabel(pDC, &bluePen);
		////9 绘制右臀围线。  
		//CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		////h1r->drawWithLabel(pDC, &bluePen);


		////10 绘制左罗纹线。  
		//CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->draw(pDC, &redPen);
		////11 绘制右罗纹线。  
		//CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->draw(pDC, &redPen);

		//// 9 绘制左后领深线
		//CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////ca1->drawWithLabel(pDC, &bluePen);
		//// 9 绘制右后领深线
		//CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////md1->drawWithLabel(pDC, &bluePen);

		////15 绘制左后领窝， 线线关系 
		////CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		////ca->draw(pDC, &redPen);
		////15 绘制右后领窝， 线线关系
		////CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		////am->draw(pDC, &redPen);


		////绘制后领窝
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		////verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		//CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		//fgh1->draw(pDC, &redPen);


		////	肩斜长度
		//double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		////18 绘制左肩线1 
		//CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		////ce->drawWithLabel(pDC, &redPen);
		//ce->draw(pDC, &redPen);
		////19 绘制右肩线2 
		//CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		////mf->drawWithLabel(pDC, &redPen);
		//mf->draw(pDC, &redPen);


		////12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		//CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, bustGirth / 4 - (backWidth - 2.0), { __T("B'"), __T("E'") }), CString("B'E'"));
		////b1e1->drawWithLabel(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);

		////13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		//CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 4 + (backWidth - 2.0), { __T("C'"), __T("F'") }), CString("C'F'"));
		//c1f1->drawWithLabel(pDC, &bluePen);
		////c1f1->draw(pDC, &bluePen);

		//
		////袖窿辅助线
		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hy->getFigure())->GetSt()) / 3;
		//CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("M"), __T("K") }));
		//vh->draw(pDC, &greenPen);
		//CVertex *vhr = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("M"), __T("K") }));
		//vhr->draw(pDC, &greenPen);

		////前上胸宽线ff1
		//CVertex *ff1 = new CVertex(new ParaConstraintRelation(hy, b1e1, c1f1, - 4 * armHoleDepth / 5 , { __T("C'"), __T("F'") }), CString("C'F'"));
		//c1f1->drawWithLabel(pDC, &bluePen);
		////ff1->draw(pDC, &bluePen);


		////绘制后左袖窿
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 1.5)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(b1e1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		//CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		//fgh2->draw(pDC, &redPen);


		////绘制右袖窿
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, -1.5)));
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(c1f1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0)));
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		//CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		//fgh3->draw(pDC, &redPen);

		//// 左胸围直栏
		//CVertex *yk = new CVertex(new VerConstraintRelation(hy, 0, 2, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
	 //   //yk->drawWithLabel(pDC, &bluePen);
		//yk->draw(pDC, &redPen);
		//

		////绘制左腰围直栏
  //      CVertex *lz = new CVertex(new VerConstraintRelation(g1x, (bustGirth - waistGirth) / 4, -1, { __T("C"), __T("A1") }));
	 //   lz->draw(pDC, &redPen);

  //      CVertex *zm = new CVertex(new VerConstraintRelation(g1x, (bustGirth - waistGirth) / 4, 1, { __T("C"), __T("A1") }));
	 //   zm->draw(pDC, &redPen);
	
		//// 绘制左侧缝线1  kl
		//CVertex *kl = new CVertex(new LineAndLineConstraintRelation(yk, LineStOrEd::END, lz, LineStOrEd::START, { __T("C"), __T("A1") }));
		//kl->draw(pDC, &redPen);

		//// 绘制左侧缝线2  kl
		//CVertex *mn = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, zm, LineStOrEd::END, { __T("C"), __T("A1") }));
		//mn->draw(pDC, &redPen);

		//// 绘制左侧缝线3  kl
		//CVertex *op = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("C"), __T("A1") }));
		//op->draw(pDC, &redPen);

		//// 右胸围直栏
		//CVertex *pk = new CVertex(new VerConstraintRelation(hp, bustGirth / 4, 2, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
	 //  //pk->drawWithLabel(pDC, &bluePen);
		//pk->draw(pDC, &redPen);

	

		//// 绘制右侧缝线1  kl
		//CVertex *klr = new CVertex(new LineAndLineConstraintRelation(pk, LineStOrEd::END, lzr, LineStOrEd::START, { __T("C"), __T("A1") }));
		//klr->draw(pDC, &redPen);

		//// 绘制右侧缝线2  kl
		//CVertex *mnr = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, zmr, LineStOrEd::END, { __T("C"), __T("A1") }));
		//mnr->draw(pDC, &redPen);

		//// 绘制右侧缝线3  kl
		//CVertex *opr = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("C"), __T("A1") }));
		//opr->draw(pDC, &redPen);



		//oo1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("C"), __T("A1") }));
		aa1->draw(pDC, &bluePen);

		//ww1 绘制腰围线。 平行ab， 与ad，bc相交
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("C"), __T("A1") }));
		ww1->draw(pDC, &bluePen);

		//jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bustGirth / 5 + 4 + 1.5, { __T("C"), __T("A1") }));
		jj1->draw(pDC, &bluePen);



		//// 绘制右侧

		//// 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		//CVertex *u1v1 = new CVertex(new VerConstraintRelation(jj1, bust / 4 + (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
		///*u1v1->draw(pDC);*/

		//// 绘制右后领深线dq
		//CVertex *d1q1 = new CVertex(new VerConstraintRelation(ab, bust / 4 + bust / 24 + 3.6, -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
		//d1q1->draw(pDC, &redPen);


		//// 绘制右前领窝

		//CVertex *aq11 = new CVertex(new VerConstraintRelation(ab, bust / 4, (bust / 24 + 3.6) * 2)); // bust / 12 + 13.7
		////aq11->draw(pDC, &greenPen);

		//CVertex *aa11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, aa1, LineStOrEd::END));// bust / 12 + 13.7
		////aa11->draw(pDC, &greenPen);

		//CVertex *ac11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, d1q1, LineStOrEd::END));
		////ac11->draw(pDC, &greenPen);

		//double acl1ength = CPoint1::Distance(dynamic_cast<CLine*>(ac11->getFigure())->GetEd(), dynamic_cast<CLine*>(ac11->getFigure())->GetSt());
		//CVertex *r1b1 = new CVertex(new VerConstraintRelation(ac11, acl1ength / (2 * PIXELPERCM), 0.7)); // bust / 12 + 13.7
		////r1b1->draw(pDC);


		// //绘制前领窝弧线ab1c1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf11;
		//verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(aq11, LineStOrEd::END));
		//verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(r1b1, LineStOrEd::END));
		//verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::END));

		//CVertex *ab1c11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf11));
		//ab1c11->draw(pDC, &redPen);



		////aq1, 这里为辅助线， 线线关系 oo1的起点 和 d1q1的终点组成的线  
		//CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END));

		////ob1, 后领窝直线部分
		//CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq1, LineStOrEd::ONE_THIRD));
		//ab1->draw(pDC, &redPen);

		//// 后领窝弧线

		////d1c1 线线关系， aq1的2/3点和d1q1的起点组成的线。
		//CVertex *d1c1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, d1q1, LineStOrEd::START));
		////d1c1->draw(pDC);

		//CVertex *ac1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1c1, LineStOrEd::START));
		////ac1->draw(pDC);



		//CVertex *cr1 = new CVertex(new RayConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, (180 + armAngle), 0.5));
		////cr1->draw(pDC,&greenPen);

		////绘制弧线ab1d1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec1;
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::ONE_THIRD));
		////verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::TWO_THIRDS));
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(cr1, LineStOrEd::START));
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::START));

		//CVertex *ab1d1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		//ab1d1->draw(pDC, &redPen);


		//// 前两个点是开始点和结束点， 后两个点是控制点 （这两个控制点是一点一点试出来的， 比较蛋疼）
		////LineAndBezierConstraintRelation *testbezier = new LineAndBezierConstraintRelation(
		////	std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::ONE_THIRD),
		////	std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::START),
		////	CPoint1(1000, 50), CPoint1(1080, 50));
		//////	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
		////CVertex *bezier = new CVertex(testbezier);
		////bezier->draw(pDC, &greenPen);



		////绘制肩斜线 d1t1 射线, dq的起点， 然后与vv1相交
		//CVertex *d1t1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1));
		//d1t1->draw(pDC);

		////绘制肩斜线 d1t1 的延长线
		//CVertex *d1e1 = new CVertex(new ExpandConstraintRelation(d1t1, backShouldExpandLen));
		//d1e1->draw(pDC, &redPen);

		////F1点为ut1的1/4点

		////射线E1F1  t1u线的1/4点 和 d1e1的终点
		//CVertex *t1v1 = new CVertex(new LineAndLineConstraintRelation(d1t1, LineStOrEd::END, u1v1, LineStOrEd::END));
		//CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, LineStOrEd::END, t1v1, LineStOrEd::ONE_FORTH));
		//e1f1->draw(pDC, &redPen);


		////绘制f1g1  fg   G点为ut1的2/3点
		//CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(e1f1, LineStOrEd::START, t1v1, LineStOrEd::TWO_THIRDS));
		//f1g1->draw(pDC, &redPen);


		//double v1h1Length = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		//CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, -armAngle, v1h1Length / PIXELPERCM));
		////v1h1->draw(pDC);

		////绘制i1j1
		//CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(-armBindLen, 0);
		//CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1));
		//i1j1->draw(pDC, &redPen);


		////绘制弧线g1h1i1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec3;
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(f1g1, LineStOrEd::END));
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(v1h1, LineStOrEd::END));
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

		//CVertex *g1h1i1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		//g1h1i1->draw(pDC, &redPen);

		//// 绘制j1k1
		//CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bust / 2, 1)); // bust / 12 + 13.7
		//j1k1->draw(pDC, &redPen);

		//// 绘制k1l1
		//CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, -1));
		//l1z1->draw(pDC, &redPen);

		//CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, 1));
		//z1m1->draw(pDC, &redPen);

		////绘制jk
		//CVertex *l1k1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START));
		//l1k1->draw(pDC, &redPen);

		////绘制罗纹线oo1
		//CVertex *oo1 = new CVertex(new ParaConstraintRelation(cd, ad, bc, -ribLen));
		//oo1->draw(pDC, &redPen);

		////绘制n1o1
		//CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bust / 2, -1));
		//n1o1->draw(pDC, &redPen);

		////绘制m1n1
		//CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, LineStOrEd::START));
		//m1n1->draw(pDC, &redPen);

		////绘制o1p1
		//CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, cd, LineStOrEd::END));
		//o1p1->draw(pDC, &redPen);

		////绘制下摆线pp1
		//CVertex *pp1 = new CVertex(new ParaConstraintRelation(oo1, ad, bc, ribLen));
		//pp1->draw(pDC, &redPen);


		//// 绘制左侧

		//// 绘制左背宽线  
		//CVertex *uv = new CVertex(new VerConstraintRelation(jj1, bust / 4 - (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
		///*uv->draw(pDC);*/


		////绘制左后领深线dq
		//CVertex *dq = new CVertex(new VerConstraintRelation(ab, bust / 4 - (bust / 24 + 3.6), -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
		//dq->draw(pDC, &redPen);


		//// 绘制左前领窝
		//CVertex *a1c11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, dq, LineStOrEd::END));
		////a1c11->draw(pDC, &greenPen);

		////double a1cl1ength = CPoint1::Distance(dynamic_cast<CLine*>(a1c11->getFigure())->GetEd(), dynamic_cast<CLine*>(a1c11->getFigure())->GetSt());
		//CVertex *rb = new CVertex(new VerConstraintRelation(a1c11, acl1ength / (2 * PIXELPERCM), -0.7)); // bust / 12 + 13.7
		////rb->draw(pDC);


		////绘制前领窝弧线ab1c1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf12;
		//verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(aq11, LineStOrEd::END));
		//verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(rb, LineStOrEd::START));
		//verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::END));

		//CVertex *a1b1c11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf12));
		//a1b1c11->draw(pDC, &redPen);



		////aq, 辅助线， 线线关系， oo1的起点 和 d1q1的终点组成的线  
		//CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END));

		////ob1, 后领窝直线部分
		//CVertex *a2b = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS));
		//a2b->draw(pDC, &redPen);

		////dc, 辅助线， 线线关系， oq的2/3点和dq的起点组成的线
		//CVertex *dc = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, aq, LineStOrEd::ONE_THIRD));
		////dc->draw(pDC);



		//// 后领窝弧线

		//CVertex *ac = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dc, LineStOrEd::END));
		////ac->draw(pDC);

		//CVertex *ab2 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS));
		////ab2->draw(pDC, &redPen);

		//CVertex *cr = new CVertex(new RayConstraintRelation(aq, LineStOrEd::ONE_THIRD, -(20 + armAngle), 0.5));
		////cr->draw(pDC,&greenPen);

		////绘制弧线ab1d1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec2;
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS));
		////verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::ONE_THIRD));
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(cr, LineStOrEd::END));
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START));

		//CVertex *abd = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		//abd->draw(pDC, &redPen);


		//// 前两个点是开始点和结束点， 后两个点是控制点 （这两个控制点是一点一点试出来的， 比较蛋疼）
		////LineAndBezierConstraintRelation *testbezierl = new LineAndBezierConstraintRelation(
		////	std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS),
		////	std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START),
		////	CPoint1(858, 50), CPoint1(900, 50));
		//////	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
		////CVertex *bezierl = new CVertex(testbezier);
		////bezierl->draw(pDC, &redPen);



		////绘制肩斜线 dt 射线, d1q1的起点， 然后与uu1相交
		//CVertex *dt = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, -backShouldAngle, uv));
		//dt->draw(pDC);

		////绘制肩斜线 dt的延长线
		//CVertex *de = new CVertex(new ExpandConstraintRelation(dt, -backShouldExpandLen));
		//de->draw(pDC, &redPen);


		////射线E1F1  t1u线的1/4点 和 d1e1的终点
		//CVertex *tv = new CVertex(new LineAndLineConstraintRelation(dt, LineStOrEd::START, uv, LineStOrEd::END));
		//CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, LineStOrEd::START, tv, LineStOrEd::ONE_FORTH));
		//ef->draw(pDC, &redPen);


		////G点为ut1的2/3点
		//CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ef, LineStOrEd::END, tv, LineStOrEd::TWO_THIRDS));
		//fg->draw(pDC, &redPen);


		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(uv->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
		//CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM));
		////vh->draw(pDC);


		//CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
		//CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i));
		//ij->draw(pDC, &redPen);


		////绘制袖窿弧线ghi
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec4;
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(fg, LineStOrEd::END));
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(vh, LineStOrEd::START));
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

		//CVertex *ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		//ghi->draw(pDC, &redPen);


		//// 绘制jk
		//CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1));
		//jk->draw(pDC, &redPen);

		//// 绘制kl
		//CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, -1));
		//lz->draw(pDC, &redPen);

		//CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, 1));
		//zm->draw(pDC, &redPen);


		//CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START));
		//kl->draw(pDC, &redPen);


		////绘制no
		//CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1));
		//no->draw(pDC, &redPen);


		////绘制mn
		//CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, LineStOrEd::START));
		//mn->draw(pDC, &redPen);

		////绘制op
		//CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, cd, LineStOrEd::START));
		//op->draw(pDC, &redPen);



		////左袖  袖中线
		//CVertex *oor = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - (frontShouldAngle + sleeveTiltAngle), rectLengthV_Sleeve));
		//oor->draw(pDC, &redPen);

		////袖山留针 
		//double oorLength = CPoint1::Distance(dynamic_cast<CLine*>(oor->getFigure())->GetEd(), dynamic_cast<CLine*>(oor->getFigure())->GetSt());
		//CVertex *ofr = new CVertex(new VerConstraintRelation(oor, oorLength / PIXELPERCM, flatCrown / 2));
		//ofr->draw(pDC, &redPen);

		////袖肥
		//CVertex *ojr = new CVertex(new VerConstraintRelation(oor, rectLengthV_Sleeve - sleeveCrownHeight - 4.5, rectWidthV_Sleeve / 2));
		//ojr->draw(pDC, &redPen);

		//CVertex * orr = new CVertex(new LineAndLineConstraintRelation(oor, LineStOrEd::END, ojr, LineStOrEd::START));
		////orr->draw(pDC, &greenPen);

		//double orrLength = CPoint1::Distance(dynamic_cast<CLine*>(orr->getFigure())->GetEd(), dynamic_cast<CLine*>(orr->getFigure())->GetSt());
		//CVertex *ogr = new CVertex(new VerConstraintRelation(orr, 2 * (orrLength / PIXELPERCM) / 3, flatCrownUp / 2));
		////ogr->draw(pDC);

		//CVertex *ohr = new CVertex(new VerConstraintRelation(orr, (orrLength / PIXELPERCM) / 3, flatCrownDown / 2));
		////ohr->draw(pDC);

		////袖山ghi
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec5;
		//verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ofr, LineStOrEd::END));
		//verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ogr, LineStOrEd::END));
		//verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ohr, LineStOrEd::END));
		//verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ojr, LineStOrEd::END));

		//CVertex *ghjr = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		//ghjr->draw(pDC, &redPen);

		////袖口线
		//CVertex *om = new CVertex(new VerConstraintRelation(oor, 0, cuffWidth / 2));
		//om->draw(pDC, &redPen);

		//CVertex *ol = new CVertex(new VerConstraintRelation(oor, ribLen, cuffWidth / 2));
		//ol->draw(pDC, &redPen);

		//CVertex *ml = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::END, ol, LineStOrEd::END));
		//ml->draw(pDC, &redPen);

		//CVertex *j1k1r = new CVertex(new VerConstraintRelation(ojr, rectWidthV_Sleeve / 2, -armStraightLine));
		//j1k1r->draw(pDC, &redPen);

		//CVertex *j1l1r = new CVertex(new LineAndLineConstraintRelation(j1k1r, LineStOrEd::START, ol, LineStOrEd::END));
		//j1l1r->draw(pDC, &redPen);





		////右袖   袖中线
		//CVertex *ool = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, frontShouldAngle + sleeveTiltAngle, rectLengthV_Sleeve));
		//ool->draw(pDC, &redPen);

		////袖山留针  
		//CVertex *of1 = new CVertex(new VerConstraintRelation(ool, 0, -flatCrown / 2));
		//of1->draw(pDC, &redPen);

		////袖肥
		//CVertex *oj1 = new CVertex(new VerConstraintRelation(ool, sleeveCrownHeight + 4.5, -rectWidthV_Sleeve / 2));
		//oj1->draw(pDC, &redPen);


		//CVertex * or1 = new CVertex(new LineAndLineConstraintRelation(ool, LineStOrEd::START, oj1, LineStOrEd::END));
		////or1->draw(pDC, &greenPen);

		//double or1Length = CPoint1::Distance(dynamic_cast<CLine*>(or1->getFigure())->GetEd(), dynamic_cast<CLine*>(or1->getFigure())->GetSt());
		//CVertex *og1 = new CVertex(new VerConstraintRelation(or1, (or1Length / PIXELPERCM) / 3, -flatCrownUp / 2));
		////og1->draw(pDC);

		//CVertex *oh1 = new CVertex(new VerConstraintRelation(or1, 2 * (or1Length / PIXELPERCM) / 3, -flatCrownDown / 2));
		////oh1->draw(pDC);


		////绘制袖窿弧线ghi
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec6;
		//verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::START));
		//verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::START));
		//verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::START));
		//verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oj1, LineStOrEd::START));

		//CVertex *ghjl = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		//ghjl->draw(pDC, &redPen);


		////袖口线
		//CVertex *om1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve, -cuffWidth / 2));
		//om1->draw(pDC, &redPen);

		//CVertex *ol1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve - ribLen, -cuffWidth / 2));
		//ol1->draw(pDC, &redPen);

		//CVertex *m1l1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::START, ol1, LineStOrEd::START));
		//m1l1->draw(pDC, &redPen);

		//CVertex *j1k1l = new CVertex(new VerConstraintRelation(oj1, 0, armStraightLine));
		//j1k1l->draw(pDC, &redPen);

		//CVertex *j1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1l, LineStOrEd::END, ol1, LineStOrEd::START));
		//j1l1->draw(pDC, &redPen);


	}


	// 1 纵向编织――V领套衫1
	void static TestDrawV_LongitudinalKnitting_2D_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(350, 420) + offset;
		orig = originPoint;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

			//p1q1->draw(pDC, &greenPen);
			//p1s1->draw(pDC, &greenPen);

			//s1r1->draw(pDC, &greenPen);
			//q1r1->draw(pDC, &greenPen);



			//2 绘制前中线1。 平行ad， 与ab，cd相交，(-4, -30));
		CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body/2,  -(rectLengthV_Body- frontCollarDepth), { __T("A"), __T("") }), CString("AA'"));
		aa1->drawWithLabel(pDC, &bluePen, CSize(4,4));

		/*CVertex *aa11 = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::START, 90, -frontCollarDepth, { __T("M"), __T("K") }));
		aa11->draw(pDC, &greenPen);*/

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth -4 , { __T("J"), __T("J'") }));
		jj1->drawWithLabel(pDC, &bluePen, CSize(5,1));

		// 5 绘制下摆线OO1
	/*	CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("P"), __T("P'") }));
		pp1->drawWithLabel(pDC, &redPen, CSize(0,4));*/

		CVertex *pp1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("P"), __T("P'") }));
		pp1->drawWithLabel(pDC, &redPen, CSize(0, 4));

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->drawWithLabel(pDC, &redPen, CSize(4, -24));

		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);

		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->drawWithLabel(pDC, &bluePen, CSize(4,4));

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("C'") })); // bust / 12 + 13.7
		d1q1->drawWithLabel(pDC, &redPen, CSize(-16,-12));
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("C") })); // bust / 12 + 13.7
		dq->drawWithLabel(pDC, &redPen, CSize(4,-12));

		// 绘制右前领辅助线
		CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
		a2q1->draw(pDC, &bluePen);

		// 绘制右前领弧线
	    double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
		CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T(""), __T("B'") })); // bust / 12 + 13.7
		t1b1->drawWithLabel(pDC, &bluePen, CSize(4,4));

		 //绘制前领窝弧线ab1c1
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START,0)));
	    CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		a2b1q->draw(pDC, &redPen);

		// 绘制左前领辅助线
		CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
		a2q->draw(pDC, &bluePen);

		// 绘制左前领弧线
		CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T(""), __T("B") })); // bust / 12 + 13.7
		//tb->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		tb->drawWithLabel(pDC, &bluePen, CSize(-10,4));


		//绘制前领窝弧线ab1c1
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		a2bq->draw(pDC, &redPen);

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("E"), __T("") }));
		//ce->drawWithLabel(pDC, &bluePen, CSize(4,4));
		de->drawWithLabel(pDC, &redPen, CSize(-10, 0));
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T(""), __T("E'") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(-12, -12));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(4, -12));

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T(""), __T("") }));
		e1f1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("G'") }));
		f1g1->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("") }));
		i1j1->drawWithLabel(pDC, &redPen,CSize(-8, 1));


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("") }));
		ef->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("G") }));
		fg->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T(""), __T("I") }));
		ij->drawWithLabel(pDC, &redPen, CSize(9, 1));

		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T(""), __T("K'") })); // bust / 12 + 13.7
		j1k1->drawWithLabel(pDC, &redPen, CSize(4, 6));
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T(""), __T("K") })); // bust / 12 + 13.7
		jk->drawWithLabel(pDC, &redPen, CSize(-10, 6));


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("") }));
		l1z1->drawWithLabel(pDC, &redPen, CSize(4, -3));
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T(""), __T("M'") }));
		z1m1->drawWithLabel(pDC, &redPen, CSize(4, 3));

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("") }));
		lz->drawWithLabel(pDC, &redPen, CSize(-10, -3));
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T(""), __T("M") }));
		zm->drawWithLabel(pDC, &redPen, CSize(4, 3));


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T(""), __T("O'") })); // bust / 12 + 13.7
		n1o1->drawWithLabel(pDC, &redPen, CSize(4, -8));
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T(""), __T("O") })); // bust / 12 + 13.7
		no->drawWithLabel(pDC, &redPen, CSize(-12, -8));


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_LongitudinalKnitting_2D_Style1_back1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(660, 420) + offset;
		orig = originPoint;
		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长 你接啊  我打过去了
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->draw(pDC, &greenPen);
		//p1s1->draw(pDC, &greenPen);

		//s1r1->draw(pDC, &greenPen);
		//q1r1->draw(pDC, &greenPen);

		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("a"), __T("") }), CString("AA'"));
		aa1->drawWithLabel(pDC, &bluePen, CSize(4,2));


		//2 绘制前中线1。 平行ad， 与ab，cd相交，(-4, -30));
	/*	CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("A"), __T("") }), CString("AA'"));
		aa1->drawWithLabel(pDC, &bluePen, CSize(4, 4));*/

		/*CVertex *aa11 = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::START, 90, -frontCollarDepth, { __T("M"), __T("K") }));
		aa11->draw(pDC, &greenPen);*/

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("j"), __T("j'") }));
		jj1->drawWithLabel(pDC, &bluePen, CSize(5, 1));

		// 5 绘制下摆线OO1
		/*CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("p"), __T("p'") }));
		pp1->drawWithLabel(pDC, &redPen, CSize(0, 4));*/

		CVertex *pp1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("p"), __T("p'") }));
		pp1->drawWithLabel(pDC, &redPen, CSize(0, 2));

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("n"), __T("n'") }));
		oo1->drawWithLabel(pDC, &redPen, CSize(4, -24));

		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);

		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("f"), __T("f'") }));
		ff1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("C'") })); // bust / 12 + 13.7
		//d1q1->drawWithLabel(pDC, &bluePen, CSize(-16, -12));
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("C") })); // bust / 12 + 13.7
		//dq->drawWithLabel(pDC, &bluePen, CSize(4, -12));

		//// 绘制右前领辅助线
		//CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
		//a2q1->draw(pDC, &bluePen);

		//// 绘制右前领弧线
		//double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
		//CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T(""), __T("B'") })); // bust / 12 + 13.7
		//t1b1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		////绘制前领窝弧线ab1c1
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
		//CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		//a2b1q->draw(pDC, &redPen);

		//// 绘制左前领辅助线
		//CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
		//a2q->draw(pDC, &bluePen);

		//// 绘制左前领弧线
		//CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T(""), __T("B") })); // bust / 12 + 13.7
		////tb->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//tb->drawWithLabel(pDC, &bluePen, CSize(-10, 4));


		////绘制前领窝弧线ab1c1
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
		//CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		//a2bq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);


		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("b"), __T("b'") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->drawWithLabel(pDC, &redPen, CSize(4, 2));



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("e"), __T("d") }));
		//ce->drawWithLabel(pDC, &bluePen, CSize(4,4));
		de->drawWithLabel(pDC, &redPen, CSize(-10, -16));
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("d'"), __T("e'") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->drawWithLabel(pDC, &redPen, CSize(4, -16));

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("h"), __T("") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(-12, -12));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("h'") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(4, -12));

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T(""), __T("") }));
		e1f1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("g'") }));
		f1g1->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("i'"), __T("") }));
		i1j1->drawWithLabel(pDC, &redPen, CSize(-8, 1));


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("") }));
		ef->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("g") }));
		fg->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T(""), __T("i") }));
		ij->drawWithLabel(pDC, &redPen, CSize(9, 1));

		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T(""), __T("k'") })); // bust / 12 + 13.7
		j1k1->drawWithLabel(pDC, &redPen, CSize(4, 10));
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T(""), __T("k") })); // bust / 12 + 13.7
		jk->drawWithLabel(pDC, &redPen, CSize(-10, 10));


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("l'"), __T("") }));
		l1z1->drawWithLabel(pDC, &redPen, CSize(4, -3));
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T(""), __T("m'") }));
		z1m1->drawWithLabel(pDC, &redPen, CSize(4, 3));

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("l"), __T("") }));
		lz->drawWithLabel(pDC, &redPen, CSize(-10, -3));
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T(""), __T("m") }));
		zm->drawWithLabel(pDC, &redPen, CSize(4, 3));


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T(""), __T("o'") })); // bust / 12 + 13.7
		n1o1->drawWithLabel(pDC, &redPen, CSize(4, -8));
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T(""), __T("o") })); // bust / 12 + 13.7
		no->drawWithLabel(pDC, &redPen, CSize(-12, -8));


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	// 后片标记是错的，上面的后片对
	void static TestDrawV_LongitudinalKnitting_2D_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 420) + offset;
		orig = originPoint;


		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("j"), __T("j'") }));
		jj1->drawWithLabel(pDC, &bluePen,CSize(4,4));

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("p"), __T("p'") }));
		pp1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("n"), __T("n'") }));
		oo1->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);



		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("f"), __T("f'") }));
		ff1->drawWithLabel(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("d'"), __T("") })); // bust / 12 + 13.7
		d1q1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("d"), __T("") })); // bust / 12 + 13.7
		dq->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("b"), __T("b'") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->drawWithLabel(pDC, &redPen,CSize(4,4));

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("e"), __T("") }));
		de->drawWithLabel(pDC, &redPen,CSize(4,4));
		////de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T(""), __T("e'") }));
		d1e1->drawWithLabel(pDC, &redPen,CSize(4,4));
		//d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("h"), __T("") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("h'") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		// 24  绘制右袖窿弧线 1  
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("f'"), __T("") }));
		e1f1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("f") }));
		f1g1->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("i'"), __T("") }));
		i1j1->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("e"), __T("f") }));
		ef->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("f"), __T("g") }));
		fg->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T(""), __T("i") }));
		ij->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("l'"), __T("") }));
		l1z1->drawWithLabel(pDC, &redPen, CSize(4, 4));
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T(""), __T("m'") }));
		z1m1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("l"), __T("") }));
		lz->drawWithLabel(pDC, &redPen, CSize(4, 4));
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T(""), __T("m") }));
		zm->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("n'"), __T("o'") })); // bust / 12 + 13.7
		n1o1->drawWithLabel(pDC, &redPen, CSize(4, 4));
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("n"), __T("o") })); // bust / 12 + 13.7
		no->drawWithLabel(pDC, &redPen, CSize(4, 4));


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_LongitudinalKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		
		CPoint1 originPoint = CPoint1(500, 40) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽
		
		
		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->drawWithLabel(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth-4, { __T("J"), __T("J'") }));
		//jj1->drawWithLabel(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->drawWithLabel(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->drawWithLabel(pDC, &bluePen);





		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->drawWithLabel(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START,0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);
		
		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0),aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		// 绘制右前领辅助线
		CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), { __T("A"), __T("Q") }));
		//a2q1->drawWithLabel(pDC, &bluePen);
		// 绘制右前领垂
		double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
		CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T("M"), __T("K") })); // bust / 12 + 13.7
		//t1b1->drawWithLabel(pDC, &greenPen);
		//绘制前领窝弧线ab1c1
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth)));
		CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		a2b1q->draw(pDC, &redPen);


		// 绘制左前领辅助线
		CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), { __T("A"), __T("Q") }));
		//a2q->drawWithLabel(pDC, &bluePen);
		// 绘制左前领弧线
		CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T("M"), __T("K") })); // bust / 12 + 13.7
		//tb->drawWithLabel(pDC, &greenPen);
		//绘制前领窝弧线ab1c1
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth)));
		CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		a2bq->draw(pDC, &redPen);



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);
		
	    // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		 CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		 e1f1->draw(pDC, &redPen);

		 // 25  绘制右袖窿弧线 2  
		 CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		 f1g1->draw(pDC, &redPen);

		
		 // 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);

	
		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END,n1o1, PointOnLinePosition( LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);
		

		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

			


		//绘制左袖

	    //袖中线001
		CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		eo1->draw(pDC, &redPen);

	  //袖肥jj1
		CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1,rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth/2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//rj1->draw(pDC, &bluePen);

		//  袖山辅助线
	    CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
	    //er->draw(pDC, &greenPen);
	
		// 左袖山留针线  
		CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve- sleeveCrownHeight/4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//oh->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		f1ghi7->draw(pDC, &redPen);


		// 袖口
		CVertex *om1 = new CVertex(new VerConstraintRelation(eo1,0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		om1->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve/2, -armStraightLine, { __T("J'"), __T("K'") }));
		//jk1->draw(pDC, &redPen);


	

		// 左侧缝
		CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		kl1->draw(pDC, &redPen);
		CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		lm1->draw(pDC, &redPen);



		//绘制右袖
		  //袖中线001
		CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		e1o1->draw(pDC, &redPen);
		//袖肥jj1
		CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//r1j1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
		//e1r->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8-2), { __T("N'"), __T("O'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8-2), { __T("N'"), __T("O'") }));
		//og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8-2), { __T("N'"), __T("O'") }));
		//oh1->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::START));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
		f1ghi8->draw(pDC, &redPen);



	    // 袖口
		CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol11->draw(pDC, &redPen);
		// 袖口罗纹
		CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol12->draw(pDC, &redPen);
		//右腋下直栏
		CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		//j1k11->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		k1l11->draw(pDC, &redPen);
		CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		l1m11->draw(pDC, &redPen);


	

		//// 右袖山留针线  
		//CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
		//of1->draw(pDC, &redPen);
		//CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
		//og1->draw(pDC, &bluePen);
		//CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
		//oh1->draw(pDC, &bluePen);

		

		////绘制i1j1
		//CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
		//i1j1->draw(pDC, &redPen);


		

		////绘制弧线fghi
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		//CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		//f1ghi2->draw(pDC, &redPen);

		////绘制i1j1
		//CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
		//ij->draw(pDC, &redPen);




   		////左袖  袖中线
   		//CVertex *oor = new CVertex(new RayConstraintRelation(de, LineStOrEd::START,180 - (frontShouldAngle + sleeveTiltAngle), rectLengthV_Sleeve));
   		//oor->draw(pDC, &redPen);

 //  	//袖山留针 
 //  	double oorLength = CPoint1::Distance(dynamic_cast<CLine*>(oor->getFigure())->GetEd(), dynamic_cast<CLine*>(oor->getFigure())->GetSt());
 //  	CVertex *ofr = new CVertex(new VerConstraintRelation(oor, oorLength / PIXELPERCM, flatCrown / 2));
 //  	ofr->draw(pDC, &redPen);

 //  	//袖肥
 //  	CVertex *ojr = new CVertex(new VerConstraintRelation(oor, rectLengthV_Sleeve - sleeveCrownHeight - 4.5, rectWidthV_Sleeve / 2));
 //  	ojr->draw(pDC, &redPen);

 //  	CVertex * orr = new CVertex(new LineAndLineConstraintRelation(oor, LineStOrEd::END, ojr, LineStOrEd::START));
 //  	//orr->draw(pDC, &greenPen);

 //  	double orrLength = CPoint1::Distance(dynamic_cast<CLine*>(orr->getFigure())->GetEd(), dynamic_cast<CLine*>(orr->getFigure())->GetSt());
 //  	CVertex *ogr = new CVertex(new VerConstraintRelation(orr,  2 * (orrLength / PIXELPERCM) / 3, flatCrownUp / 2));
 //  	//ogr->draw(pDC);

 //  	CVertex *ohr = new CVertex(new VerConstraintRelation(orr, (orrLength / PIXELPERCM) / 3, flatCrownDown / 2));
 //  	//ohr->draw(pDC);

 //  	//袖山ghi
 //  	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec5;
 //  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ofr, LineStOrEd::END));
 //  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ogr, LineStOrEd::END));
 //  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ohr, LineStOrEd::END));
 //  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ojr, LineStOrEd::END));

 //  	CVertex *ghjr = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
 //  	ghjr->draw(pDC, &redPen);

 //  	//袖口线
 //  	CVertex *om = new CVertex(new VerConstraintRelation(oor, 0, cuffWidth / 2));
 //  	om->draw(pDC, &redPen);

 //  	CVertex *ol = new CVertex(new VerConstraintRelation(oor,  ribLen, cuffWidth / 2));
 //  	ol->draw(pDC, &redPen);

 //  	CVertex *ml = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::END, ol, LineStOrEd::END));
 //  	ml->draw(pDC, &redPen);

 //  	CVertex *j1k1r = new CVertex(new VerConstraintRelation(ojr, rectWidthV_Sleeve/2, -armStraightLine));
 //  	j1k1r->draw(pDC, &redPen);

 //  	CVertex *j1l1r = new CVertex(new LineAndLineConstraintRelation(j1k1r, LineStOrEd::START, ol, LineStOrEd::END));
 //  	j1l1r->draw(pDC, &redPen);





 //  	//右袖   袖中线
 //  	CVertex *ool = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, frontShouldAngle + sleeveTiltAngle, rectLengthV_Sleeve));
 //  	ool->draw(pDC, &redPen);

 //  	//袖山留针  
 //  	CVertex *of1 = new CVertex(new VerConstraintRelation(ool, 0, - flatCrown / 2));
 //  	of1->draw(pDC, &redPen);

 //  	//袖肥
 //  	CVertex *oj1 = new CVertex(new VerConstraintRelation(ool, sleeveCrownHeight + 4.5, - rectWidthV_Sleeve / 2));
 //  	oj1->draw(pDC, &redPen);


 //  	CVertex * or1 = new CVertex(new LineAndLineConstraintRelation(ool, LineStOrEd::START, oj1, LineStOrEd::END));
 //  	//or1->draw(pDC, &greenPen);

 //  	double or1Length = CPoint1::Distance(dynamic_cast<CLine*>(or1->getFigure())->GetEd(), dynamic_cast<CLine*>(or1->getFigure())->GetSt());
 //  	CVertex *og1 = new CVertex(new VerConstraintRelation(or1, (or1Length / PIXELPERCM)/3, -flatCrownUp / 2));
 //  	//og1->draw(pDC);

 //  	CVertex *oh1 = new CVertex(new VerConstraintRelation(or1, 2 * (or1Length / PIXELPERCM) / 3, -flatCrownDown / 2));
 //  	//oh1->draw(pDC);


 //  	//绘制袖窿弧线ghi
 //  	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec6;
 //  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::START));
 //  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::START));
 //  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::START));
 //  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oj1, LineStOrEd::START));

 //  	CVertex *ghjl = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
 //  	ghjl->draw(pDC, &redPen);


 //  	//袖口线
 //  	CVertex *om1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve, -cuffWidth / 2));
 //  	om1->draw(pDC, &redPen);

 //  	CVertex *ol1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve - ribLen, -cuffWidth / 2));
 //  	ol1->draw(pDC, &redPen);

 //  	CVertex *m1l1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::START, ol1, LineStOrEd::START));
 //  	m1l1->draw(pDC, &redPen);

 //  	CVertex *j1k1l = new CVertex(new VerConstraintRelation(oj1, 0, armStraightLine));
 //  	j1k1l->draw(pDC, &redPen);

 //  	CVertex *j1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1l, LineStOrEd::END, ol1, LineStOrEd::START));
 //  	j1l1->draw(pDC, &redPen);


   }
    void static TestDrawV_LongitudinalKnitting_2D_Style1_Sleeve_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(100, 420) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth* para.m_ratio; // 这个要不要？对话框还没有这个参数，电话 语音？嗯
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

	


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth ;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


	   	//绘制左袖

	   	//袖中线001
	   	CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
	   	oo1->drawWithLabel(pDC, &bluePen);

	   	//袖肥jj1
	   	CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("U"), __T("U'") }));
	   	jj1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	   
		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1 , LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("W'") }));
		om1->drawWithLabel(pDC, &redPen,CSize(4,4));
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("W"), __T("") }));
		om->drawWithLabel(pDC, &redPen,CSize(4,4));

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth/2, { __T(""), __T("V'") }));
		cl1->drawWithLabel(pDC, &redPen, CSize(4, 4));
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("V"), __T("") }));
		cl->drawWithLabel(pDC, &redPen, CSize(4, 4));


		//  袖山辅助线
	   	CVertex *or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

	   	// 右袖山留针线  
	   	CVertex *of1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("Q'") }));
	   	of1->drawWithLabel(pDC, &redPen, CSize(4, 4));
	   	CVertex *og1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("R'") }));
	   	og1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	   	CVertex *oh1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("S'") }));
	   	oh1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	   	 
        //绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

	   	//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("T'"), __T("") }));
		i1j1->drawWithLabel(pDC, &redPen, CSize(4, 4));

	  
		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("Q"), __T("") }));
		of->drawWithLabel(pDC, &redPen, CSize(4, 4));
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("R"), __T("") }));
		og->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("S"), __T("") }));
		oh->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("T") }));
		ij->drawWithLabel(pDC, &redPen, CSize(4, 4));



	   	//右腋下直栏
	   	CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine,{ __T(""), __T("") }));
	   	j1k1->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("") }));
		jk->drawWithLabel(pDC, &redPen, CSize(4, 4));

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_2D_Style1_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(900, 420) + offset;
		orig = originPoint;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		//袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("z"), __T("z'") }));
	   oo1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("u"), __T("u'") }));
	   jj1->drawWithLabel(pDC, &bluePen, CSize(4, 0));

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("x'") }));
	   om1->drawWithLabel(pDC, &redPen, CSize(4, 4));
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("x"), __T("") }));
	   om->drawWithLabel(pDC, &redPen, CSize(4, 4));

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("w'") }));
	   cl1->drawWithLabel(pDC, &redPen, CSize(4, 4));
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("w"), __T("") }));
	   cl->drawWithLabel(pDC, &redPen, CSize(4, 4));


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("q'") }));
	   of1->drawWithLabel(pDC, &redPen, CSize(8, -14));
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("r'") }));
	   og1->drawWithLabel(pDC, &bluePen, CSize(8, -14));
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("s'") }));
	   oh1->drawWithLabel(pDC, &bluePen, CSize(8, -14));

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("t'"), __T("") }));
	   i1j1->drawWithLabel(pDC, &redPen, CSize(0, -18));


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("q"), __T("") }));
	   of->drawWithLabel(pDC, &redPen, CSize(-8, -14));
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("r"), __T("") }));
	   og->drawWithLabel(pDC, &bluePen, CSize(-8, -14));
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("s"), __T("") }));
	   oh->drawWithLabel(pDC, &bluePen, CSize(-8, -14));

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("t") }));
	   ij->drawWithLabel(pDC, &redPen, CSize(-4, -18));



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("v'") }));
	   j1k1->drawWithLabel(pDC, &redPen, CSize(6, 7));

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("v") }));
	   jk->drawWithLabel(pDC, &redPen, CSize(6, 7));

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);
   }
    void static TestDrawV_LongitudinalKnitting_2D_Style1_Sleeve_left1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

	   CPoint1 originPoint = CPoint1(100, 420) + offset;
	   orig = originPoint;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		//袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("Z"), __T("Z'") }));
	   oo1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("U"), __T("U'") }));
	   jj1->drawWithLabel(pDC, &bluePen, CSize(4, 0));

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("X'") }));
	   om1->drawWithLabel(pDC, &redPen, CSize(4, 4));
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("X"), __T("") }));
	   om->drawWithLabel(pDC, &redPen, CSize(4, 4));

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("W'") }));
	   cl1->drawWithLabel(pDC, &redPen, CSize(4, 4));
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("W"), __T("") }));
	   cl->drawWithLabel(pDC, &redPen, CSize(4, 4));


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("Q'") }));
	   of1->drawWithLabel(pDC, &redPen, CSize(8, -14));
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("R'") }));
	   og1->drawWithLabel(pDC, &bluePen, CSize(8, -14));
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("S'") }));
	   oh1->drawWithLabel(pDC, &bluePen, CSize(8, -14));

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("T'"), __T("") }));
	   i1j1->drawWithLabel(pDC, &redPen, CSize(0, -18));


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("Q"), __T("") }));
	   of->drawWithLabel(pDC, &redPen, CSize(-8, -14));
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("R"), __T("") }));
	   og->drawWithLabel(pDC, &bluePen, CSize(-8, -14));
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("S"), __T("") }));
	   oh->drawWithLabel(pDC, &bluePen, CSize(-8, -14));

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("T") }));
	   ij->drawWithLabel(pDC, &redPen, CSize(-8, -18));



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("V'") }));
	   j1k1->drawWithLabel(pDC, &redPen, CSize(6, 7));

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("V") }));
	   jk->drawWithLabel(pDC, &redPen, CSize(6, 7));

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);
   }

   // 1 纵向编织――V领套衫1――没有标记的
   void static TestDrawV_LongitudinalKnitting_2D_Style1_front1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
	   CPoint1 originPoint = CPoint1(350, 420) + offset;
	   orig = originPoint;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   //p1q1->draw(pDC, &greenPen);
	   //p1s1->draw(pDC, &greenPen);

	   //s1r1->draw(pDC, &greenPen);
	   //q1r1->draw(pDC, &greenPen);



	   //2 绘制前中线1。 平行ad， 与ab，cd相交，(-4, -30));
	   CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("A"), __T("") }), CString("AA'"));
	   aa1->draw(pDC, &bluePen);

	   /*CVertex *aa11 = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::START, 90, -frontCollarDepth, { __T("M"), __T("K") }));
	   aa11->draw(pDC, &greenPen);*/

	   ////cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   ww1->draw(pDC, &bluePen);

	   // 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
	   jj1->draw(pDC, &bluePen);

	   // 5 绘制下摆线OO1
   /*	CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("P"), __T("P'") }));
	   pp1->drawWithLabel(pDC, &redPen, CSize(0,4));*/

	   CVertex *pp1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("P"), __T("P'") }));
	   pp1->draw(pDC, &redPen);

	   // 6 绘制罗纹线
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
	   oo1->draw(pDC, &redPen);

	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   u1v1->draw(pDC, &bluePen);

	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   uv->draw(pDC, &bluePen);

	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	   ff1->draw(pDC, &bluePen);

	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("C'") })); // bust / 12 + 13.7
	   d1q1->draw(pDC, &redPen);
	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("C") })); // bust / 12 + 13.7
	   dq->draw(pDC, &redPen);

	   // 绘制右前领辅助线
	   CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   a2q1->draw(pDC, &bluePen);

	   // 绘制右前领弧线
	   double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
	   CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T(""), __T("B'") })); // bust / 12 + 13.7
	   t1b1->draw(pDC, &bluePen);

	   //绘制前领窝弧线ab1c1
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   a2b1q->draw(pDC, &redPen);

	   // 绘制左前领辅助线
	   CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   a2q->draw(pDC, &bluePen);

	   // 绘制左前领弧线
	   CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T(""), __T("B") })); // bust / 12 + 13.7
	   //tb->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	   tb->draw(pDC, &bluePen);


	   //绘制前领窝弧线ab1c1
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   a2bq->draw(pDC, &redPen);

	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("E"), __T("") }));
	   //ce->drawWithLabel(pDC, &bluePen, CSize(4,4));
	   de->draw(pDC, &redPen);
	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T(""), __T("E'") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
	   vh->draw(pDC, &bluePen);
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
	   v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T(""), __T("") }));
	   e1f1->draw(pDC, &redPen);

	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("G'") }));
	   f1g1->draw(pDC, &redPen);


	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("") }));
	   i1j1->draw(pDC, &redPen);


	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("") }));
	   ef->draw(pDC, &redPen);

	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("G") }));
	   fg->draw(pDC, &redPen);


	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T(""), __T("I") }));
	   ij->draw(pDC, &redPen);

	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T(""), __T("K'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T(""), __T("K") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);


	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T(""), __T("M'") }));
	   z1m1->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T(""), __T("M") }));
	   zm->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T(""), __T("O'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &redPen);
	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T(""), __T("O") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);


	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);


	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);

   }
   void static TestDrawV_LongitudinalKnitting_2D_Style1_back2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

	   CPoint1 originPoint = CPoint1(600, 420) + offset;
	   orig = originPoint;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   //p1q1->draw(pDC, &greenPen);
	   //p1s1->draw(pDC, &greenPen);

	   //s1r1->draw(pDC, &greenPen);
	   //q1r1->draw(pDC, &greenPen);

	   CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("a"), __T("") }), CString("AA'"));
	   aa1->draw(pDC, &bluePen);


	   //2 绘制前中线1。 平行ad， 与ab，cd相交，(-4, -30));
   /*	CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("A"), __T("") }), CString("AA'"));
	   aa1->drawWithLabel(pDC, &bluePen, CSize(4, 4));*/

	   /*CVertex *aa11 = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::START, 90, -frontCollarDepth, { __T("M"), __T("K") }));
	   aa11->draw(pDC, &greenPen);*/

	   ////cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   ww1->draw(pDC, &bluePen);

	   // 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("j"), __T("j'") }));
	   jj1->draw(pDC, &bluePen);

	   // 5 绘制下摆线OO1
	   /*CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("p"), __T("p'") }));
	   pp1->drawWithLabel(pDC, &redPen, CSize(0, 4));*/

	   CVertex *pp1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("p"), __T("p'") }));
	   pp1->draw(pDC, &redPen);

	   // 6 绘制罗纹线
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("n"), __T("n'") }));
	   oo1->draw(pDC, &redPen);

	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   u1v1->draw(pDC, &bluePen);

	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   uv->draw(pDC, &bluePen);

	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("f"), __T("f'") }));
	   ff1->draw(pDC, &bluePen);

	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("C'") })); // bust / 12 + 13.7
	   //d1q1->drawWithLabel(pDC, &bluePen, CSize(-16, -12));
	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("C") })); // bust / 12 + 13.7
	   //dq->drawWithLabel(pDC, &bluePen, CSize(4, -12));

	   //// 绘制右前领辅助线
	   //CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   //a2q1->draw(pDC, &bluePen);

	   //// 绘制右前领弧线
	   //double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
	   //CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T(""), __T("B'") })); // bust / 12 + 13.7
	   //t1b1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

	   ////绘制前领窝弧线ab1c1
	   //std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   //verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
	   //verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
	   //verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   //CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   //a2b1q->draw(pDC, &redPen);

	   //// 绘制左前领辅助线
	   //CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   //a2q->draw(pDC, &bluePen);

	   //// 绘制左前领弧线
	   //CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T(""), __T("B") })); // bust / 12 + 13.7
	   ////tb->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	   //tb->drawWithLabel(pDC, &bluePen, CSize(-10, 4));


	   ////绘制前领窝弧线ab1c1
	   //std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   //CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   //a2bq->draw(pDC, &redPen);

	   //12 绘制右后领宽线，  
	   CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
	   //aq1->drawWithLabel(pDC, &bluePen);
	   //13 绘制右后领宽线，  
	   CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);




	   // 14 绘制右领窝
	   CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
	   b1d1->draw(pDC, &redPen);

	   // 14 绘制左领窝
	   CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
	   bd->draw(pDC, &redPen);

	   // 16 后水平线
	   CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("b"), __T("b'") }));
	   //aq->drawWithLabel(pDC, &bluePen);
	   bb1->draw(pDC, &redPen);



	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("e"), __T("d") }));
	   //ce->drawWithLabel(pDC, &bluePen, CSize(4,4));
	   de->draw(pDC, &redPen);
	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("d'"), __T("e'") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("h"), __T("") }));
	   vh->draw(pDC, &bluePen);
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("h'") }));
	   v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T(""), __T("") }));
	   e1f1->draw(pDC, &redPen);

	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("g'") }));
	   f1g1->draw(pDC, &redPen);


	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("i'"), __T("") }));
	   i1j1->draw(pDC, &redPen);


	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("") }));
	   ef->draw(pDC, &redPen);

	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T(""), __T("g") }));
	   fg->draw(pDC, &redPen);


	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T(""), __T("i") }));
	   ij->draw(pDC, &redPen);

	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T(""), __T("k'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T(""), __T("k") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);


	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("l'"), __T("") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T(""), __T("m'") }));
	   z1m1->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("l"), __T("") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T(""), __T("m") }));
	   zm->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T(""), __T("o'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &redPen);
	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T(""), __T("o") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);


	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);


	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);

   }
   void static TestDrawV_LongitudinalKnitting_3D1_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

	   CPoint1 originPoint = CPoint1(500, 40) + offset;
	   orig = originPoint;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
	   double cuffGirth = para.m_cuffGirth* para.m_ratio;

	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;


	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 35;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/



		   //2 绘制后中线。 平行ad， 与ab，cd相交，
	   CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
	   //aa1->drawWithLabel(pDC, &bluePen);

	   //cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   //ww1->drawWithLabel(pDC, &bluePen);

	   // 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
	   //jj1->drawWithLabel(pDC, &bluePen);

	   // 5 绘制下摆线OO1
	   CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
	   pp1->draw(pDC, &redPen);

	   // 6 绘制罗纹线
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
	   oo1->draw(pDC, &redPen);


	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   //u1v1->drawWithLabel(pDC, &bluePen);

	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   //uv->drawWithLabel(pDC, &bluePen);





	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	   //ff1->drawWithLabel(pDC, &bluePen);

	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
	   d1q1->draw(pDC, &redPen);
	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
	   dq->draw(pDC, &redPen);

	   //12 绘制右后领宽线，  
	   CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
	   //aq1->drawWithLabel(pDC, &bluePen);
	   //13 绘制右后领宽线，  
	   CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);

	   // 14 绘制右后领窝
	   CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
	   b1d1->draw(pDC, &redPen);

	   // 14 绘制左后领窝
	   CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
	   bd->draw(pDC, &redPen);
	   // 16 后水平线
	   CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);
	   bb1->draw(pDC, &redPen);

	   // 绘制右前领辅助线
	   CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), { __T("A"), __T("Q") }));
	   //a2q1->drawWithLabel(pDC, &bluePen);
	   // 绘制右前领垂
	   double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
	   CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //t1b1->drawWithLabel(pDC, &greenPen);
	   //绘制前领窝弧线ab1c1
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1q1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth)));
	   CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   a2b1q->draw(pDC, &redPen);


	   // 绘制左前领辅助线
	   CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), { __T("A"), __T("Q") }));
	   //a2q->drawWithLabel(pDC, &bluePen);
	   // 绘制左前领弧线
	   CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb->drawWithLabel(pDC, &greenPen);
	   //绘制前领窝弧线ab1c1
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(dq, LineStOrEd::END));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth)));
	   CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   a2bq->draw(pDC, &redPen);



	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
	   //ce->drawWithLabel(pDC, &redPen);
	   de->draw(pDC, &redPen);
	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
	   //vh->draw(pDC, &bluePen);
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
	   //v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
	   e1f1->draw(pDC, &redPen);

	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
	   f1g1->draw(pDC, &redPen);


	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);


	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
	   ef->draw(pDC, &redPen);

	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
	   fg->draw(pDC, &redPen);


	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
	   ij->draw(pDC, &redPen);


	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);


	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
	   z1m1->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
	   zm->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &redPen);
	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);


	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);


	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);




	   //绘制左袖

	   //袖中线001
	   CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
	   eo1->draw(pDC, &redPen);

	   //袖肥jj1
	   CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   //rj1->draw(pDC, &bluePen);

	   //  袖山辅助线
	   CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
	   //er->draw(pDC, &greenPen);

	   // 左袖山留针线  
	   CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   //og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   //oh->draw(pDC, &greenPen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
	   //verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
	   f1ghi7->draw(pDC, &redPen);


	   // 袖口
	   CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   om1->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
	   //jk1->draw(pDC, &redPen);




	   // 左侧缝
	   CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
	   kl1->draw(pDC, &redPen);
	   CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
	   lm1->draw(pDC, &redPen);



	   //绘制右袖
		 //袖中线001
	   CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
	   e1o1->draw(pDC, &redPen);
	   //袖肥jj1
	   CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   //r1j1->draw(pDC, &bluePen);

	   //  袖山辅助线
	   CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
	   //e1r->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   //og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   //oh1->draw(pDC, &greenPen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::START));
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::START, 0)));
	   //verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
	   f1ghi8->draw(pDC, &redPen);



	   // 袖口
	   CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol11->draw(pDC, &redPen);
	   // 袖口罗纹
	   CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol12->draw(pDC, &redPen);
	   //右腋下直栏
	   CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
	   //j1k11->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
	   k1l11->draw(pDC, &redPen);
	   CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
	   l1m11->draw(pDC, &redPen);




	   //// 右袖山留针线  
	   //CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
	   //of1->draw(pDC, &redPen);
	   //CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
	   //og1->draw(pDC, &bluePen);
	   //CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
	   //oh1->draw(pDC, &bluePen);



	   ////绘制i1j1
	   //CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
	   //i1j1->draw(pDC, &redPen);




	   ////绘制弧线fghi
	   //std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   //verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   //CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   //f1ghi2->draw(pDC, &redPen);

	   ////绘制i1j1
	   //CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
	   //ij->draw(pDC, &redPen);














	   ////左袖  袖中线
	   //CVertex *oor = new CVertex(new RayConstraintRelation(de, LineStOrEd::START,180 - (frontShouldAngle + sleeveTiltAngle), rectLengthV_Sleeve));
	   //oor->draw(pDC, &redPen);

//  	//袖山留针 
//  	double oorLength = CPoint1::Distance(dynamic_cast<CLine*>(oor->getFigure())->GetEd(), dynamic_cast<CLine*>(oor->getFigure())->GetSt());
//  	CVertex *ofr = new CVertex(new VerConstraintRelation(oor, oorLength / PIXELPERCM, flatCrown / 2));
//  	ofr->draw(pDC, &redPen);

//  	//袖肥
//  	CVertex *ojr = new CVertex(new VerConstraintRelation(oor, rectLengthV_Sleeve - sleeveCrownHeight - 4.5, rectWidthV_Sleeve / 2));
//  	ojr->draw(pDC, &redPen);

//  	CVertex * orr = new CVertex(new LineAndLineConstraintRelation(oor, LineStOrEd::END, ojr, LineStOrEd::START));
//  	//orr->draw(pDC, &greenPen);

//  	double orrLength = CPoint1::Distance(dynamic_cast<CLine*>(orr->getFigure())->GetEd(), dynamic_cast<CLine*>(orr->getFigure())->GetSt());
//  	CVertex *ogr = new CVertex(new VerConstraintRelation(orr,  2 * (orrLength / PIXELPERCM) / 3, flatCrownUp / 2));
//  	//ogr->draw(pDC);

//  	CVertex *ohr = new CVertex(new VerConstraintRelation(orr, (orrLength / PIXELPERCM) / 3, flatCrownDown / 2));
//  	//ohr->draw(pDC);

//  	//袖山ghi
//  	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec5;
//  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ofr, LineStOrEd::END));
//  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ogr, LineStOrEd::END));
//  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ohr, LineStOrEd::END));
//  	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ojr, LineStOrEd::END));

//  	CVertex *ghjr = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
//  	ghjr->draw(pDC, &redPen);

//  	//袖口线
//  	CVertex *om = new CVertex(new VerConstraintRelation(oor, 0, cuffWidth / 2));
//  	om->draw(pDC, &redPen);

//  	CVertex *ol = new CVertex(new VerConstraintRelation(oor,  ribLen, cuffWidth / 2));
//  	ol->draw(pDC, &redPen);

//  	CVertex *ml = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::END, ol, LineStOrEd::END));
//  	ml->draw(pDC, &redPen);

//  	CVertex *j1k1r = new CVertex(new VerConstraintRelation(ojr, rectWidthV_Sleeve/2, -armStraightLine));
//  	j1k1r->draw(pDC, &redPen);

//  	CVertex *j1l1r = new CVertex(new LineAndLineConstraintRelation(j1k1r, LineStOrEd::START, ol, LineStOrEd::END));
//  	j1l1r->draw(pDC, &redPen);





//  	//右袖   袖中线
//  	CVertex *ool = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, frontShouldAngle + sleeveTiltAngle, rectLengthV_Sleeve));
//  	ool->draw(pDC, &redPen);

//  	//袖山留针  
//  	CVertex *of1 = new CVertex(new VerConstraintRelation(ool, 0, - flatCrown / 2));
//  	of1->draw(pDC, &redPen);

//  	//袖肥
//  	CVertex *oj1 = new CVertex(new VerConstraintRelation(ool, sleeveCrownHeight + 4.5, - rectWidthV_Sleeve / 2));
//  	oj1->draw(pDC, &redPen);


//  	CVertex * or1 = new CVertex(new LineAndLineConstraintRelation(ool, LineStOrEd::START, oj1, LineStOrEd::END));
//  	//or1->draw(pDC, &greenPen);

//  	double or1Length = CPoint1::Distance(dynamic_cast<CLine*>(or1->getFigure())->GetEd(), dynamic_cast<CLine*>(or1->getFigure())->GetSt());
//  	CVertex *og1 = new CVertex(new VerConstraintRelation(or1, (or1Length / PIXELPERCM)/3, -flatCrownUp / 2));
//  	//og1->draw(pDC);

//  	CVertex *oh1 = new CVertex(new VerConstraintRelation(or1, 2 * (or1Length / PIXELPERCM) / 3, -flatCrownDown / 2));
//  	//oh1->draw(pDC);


//  	//绘制袖窿弧线ghi
//  	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec6;
//  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::START));
//  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::START));
//  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::START));
//  	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oj1, LineStOrEd::START));

//  	CVertex *ghjl = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
//  	ghjl->draw(pDC, &redPen);


//  	//袖口线
//  	CVertex *om1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve, -cuffWidth / 2));
//  	om1->draw(pDC, &redPen);

//  	CVertex *ol1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve - ribLen, -cuffWidth / 2));
//  	ol1->draw(pDC, &redPen);

//  	CVertex *m1l1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::START, ol1, LineStOrEd::START));
//  	m1l1->draw(pDC, &redPen);

//  	CVertex *j1k1l = new CVertex(new VerConstraintRelation(oj1, 0, armStraightLine));
//  	j1k1l->draw(pDC, &redPen);

//  	CVertex *j1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1l, LineStOrEd::END, ol1, LineStOrEd::START));
//  	j1l1->draw(pDC, &redPen);


   }
   void static TestDrawV_LongitudinalKnitting_2D_Style1_Sleeve_right1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

	   CPoint1 originPoint = CPoint1(900, 420) + offset;
	   orig = originPoint;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		//袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("z"), __T("z'") }));
	   oo1->draw(pDC, &bluePen);

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("u"), __T("u'") }));
	   jj1->draw(pDC, &bluePen);

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("x'") }));
	   om1->draw(pDC, &redPen);
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("x"), __T("") }));
	   om->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("w'") }));
	   cl1->draw(pDC, &redPen);
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("w"), __T("") }));
	   cl->draw(pDC, &redPen);


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("q'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("r'") }));
	   og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("s'") }));
	   oh1->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("t'"), __T("") }));
	   i1j1->draw(pDC, &redPen);


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("q"), __T("") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("r"), __T("") }));
	   og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("s"), __T("") }));
	   oh->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("t") }));
	   ij->draw(pDC, &redPen);



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("v'") }));
	   j1k1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("v") }));
	   jk->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);
   }
   void static TestDrawV_LongitudinalKnitting_2D_Style1_Sleeve_left2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

	   CPoint1 originPoint = CPoint1(100, 420) + offset;
	   orig = originPoint;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		//袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("Z"), __T("Z'") }));
	   oo1->draw(pDC, &bluePen);

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("U"), __T("U'") }));
	   jj1->draw(pDC, &bluePen);

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("X'") }));
	   om1->draw(pDC, &redPen);
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("X"), __T("") }));
	   om->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("W'") }));
	   cl1->draw(pDC, &redPen);
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("W"), __T("") }));
	   cl->draw(pDC, &redPen);


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("Q'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("R'") }));
	   og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("S'") }));
	   oh1->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("T'"), __T("") }));
	   i1j1->draw(pDC, &redPen);


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("Q"), __T("") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("R"), __T("") }));
	   og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("S"), __T("") }));
	   oh->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("T") }));
	   ij->draw(pDC, &redPen);



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("V'") }));
	   j1k1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("V") }));
	   jk->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);
   }


   // 1 纵向编织――V领开衫2
    void static TestDrawV_LongitudinalKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		CPoint1 originPoint = CPoint1(500, 420) + offset;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //



	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	

	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/



		   //2 绘制后中线。 平行ad， 与ab，cd相交，
	   CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
	   aa1->draw(pDC, &bluePen);
	   //aa1->drawWithLabel(pDC, &bluePen);
	   //cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   ww1->draw(pDC, &bluePen);
	   //ww1->drawWithLabel(pDC, &bluePen);
	   // 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth-4, { __T("J"), __T("J'") }));
	   jj1->draw(pDC, &bluePen);
	   //jj1->drawWithLabel(pDC, &bluePen);
	   // 5 绘制下摆线OO1
	   CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
	   //pp1->drawWithLabel(pDC, &redPen);
	   pp1->draw(pDC, &redPen);
	   // 6 绘制罗纹线
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
	   oo1->draw(pDC, &redPen);
	   //oo1->drawWithLabel(pDC, &redPen);

	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   u1v1->draw(pDC, &bluePen);
	   //u1v1->drawWithLabel(pDC, &bluePen);
	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   uv->draw(pDC, &bluePen);
	   //uv->drawWithLabel(pDC, &bluePen);
	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	   ff1->draw(pDC, &bluePen);
	   //ff1->drawWithLabel(pDC, &bluePen);
	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
	   d1q1->draw(pDC, &bluePen);
	   //d1q1->drawWithLabel(pDC, &bluePen);
	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
	   dq->draw(pDC, &bluePen);
	   //dq->drawWithLabel(pDC, &bluePen);
	   //12 绘制右后领宽线，  
	   CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
	   aq1->draw(pDC, &bluePen);
	   //13 绘制右后领宽线，  
	   CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
	   aq->draw(pDC, &bluePen);

	   // 14 绘制右领窝
	   CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
	   b1d1->draw(pDC, &redPen);

	   // 14 绘制左领窝
	   CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
	   bd->draw(pDC, &redPen);

	   // 16 后水平线
	   CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);
	   bb1->draw(pDC, &redPen);

	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
	   //ce->drawWithLabel(pDC, &redPen);
	   de->draw(pDC, &redPen);
	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
	   vh->draw(pDC, &bluePen);
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
	   v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
	   e1f1->draw(pDC, &redPen);
	   //e1f1->drawWithLabel(pDC, &redPen);
	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
	   f1g1->draw(pDC, &redPen);
	   //f1g1->drawWithLabel(pDC, &redPen);

	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);
	   //i1j1->drawWithLabel(pDC, &redPen);

	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
	   ef->draw(pDC, &redPen);
	   //ef->drawWithLabel(pDC, &redPen);
	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
	   fg->draw(pDC, &redPen);
	   //fg->drawWithLabel(pDC, &redPen);

	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
	   ij->draw(pDC, &redPen);
	   //ij->drawWithLabel(pDC, &redPen);

	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	   //j1k1->drawWithLabel(pDC, &redPen);
	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);
	   //jk->drawWithLabel(pDC, &redPen);

	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
	   z1m1->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
	   zm->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &bluePen);
	   //n1o1->drawWithLabel(pDC, &bluePen);
	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);
	   //no->drawWithLabel(pDC, &redPen);

	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   //k1l1->drawWithLabel(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   //m1n1->drawWithLabel(pDC, &redPen);
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);
	   //o1p1->drawWithLabel(pDC, &redPen);

	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   //kl->drawWithLabel(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   //mn->drawWithLabel(pDC, &redPen);
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);
	   //op->drawWithLabel(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_2D_Style2_Sleeve_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		CPoint1 originPoint = CPoint1(300, 420) + offset;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		   //袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
	   oo1->draw(pDC, &bluePen);

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
	   jj1->draw(pDC, &bluePen);

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
	   om1->draw(pDC, &redPen);
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
	   om->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
	   cl1->draw(pDC, &redPen);
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
	   cl->draw(pDC, &redPen);


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
	   og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
	   oh1->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
	   og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
	   oh->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
	   ij->draw(pDC, &redPen);



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
	   j1k1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
	   jk->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_2D_Style2_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		
		CPoint1 originPoint = CPoint1(750, 420) + offset;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;
	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;




	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 20;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	 


	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/


		   //绘制左袖

		   //袖中线001
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
	   oo1->draw(pDC, &bluePen);

	   //袖肥jj1
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
	   jj1->draw(pDC, &bluePen);

	   // 袖口
	   CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
	   om1->draw(pDC, &redPen);
	   CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
	   om->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
	   cl1->draw(pDC, &redPen);
	   CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
	   cl->draw(pDC, &redPen);


	   //  袖山辅助线
	   CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
	   //or->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
	   og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
	   oh1->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   f1ghi->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);


	   // 左袖山留针线  
	   CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
	   og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
	   oh->draw(pDC, &bluePen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   f1ghi2->draw(pDC, &redPen);

	   //绘制i1j1
	   CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
	   ij->draw(pDC, &redPen);



	   //右腋下直栏
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
	   j1k1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
	   jk->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
	   l1m1->draw(pDC, &redPen);

	   // 左侧缝
	   CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
	   lm->draw(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_2D_Style2_front_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		CPoint1 originPoint = CPoint1(0, 420) + offset;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/



		   //2 绘制前中线。 平行ad， 与ab，cd相交，
	   CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("O"), __T("O'") }));
	   aa1->draw(pDC, &redPen);

	   //cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	  //ww1->draw(pDC, &bluePen);

	   // 4 jj1 绘制右胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj2 = new CVertex(new  RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4 - frontCollarDepth), 0, bustGirth / 4, { __T("M"), __T("K") }));
	   jj2->draw(pDC, &bluePen);

	   // 5 绘制右下摆线OO1
	   CVertex *ap1 = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::END, 0, hemGirth/4, { __T("M"), __T("K") }));
	   ap1->draw(pDC, &redPen);

	   // 6 绘制右罗纹线
	   CVertex *a2o1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("M"), __T("K") }));
	   a2o1->draw(pDC, &redPen);

	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj2, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   //uv->draw(pDC, &bluePen);
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj2, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   u1v1->draw(pDC, &bluePen);

	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	  // ff1->draw(pDC, &bluePen);

	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
	   //d1q1->drawWithLabel(pDC, &redPen);
	
	  

	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 绘制右前领辅助线
	   CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   //a2q1->draw(pDC, &bluePen);

	   // 绘制右前领弧线
	   double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
	   CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength / (2 * PIXELPERCM), 1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //t1b1->draw(pDC, &greenPen);

	   //绘制右前领窝弧线ab1c1――内
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1e1, LineStOrEd::START));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   a2b1q->draw(pDC, &redPen);


	   // 绘制右前领辅助线――外
	   CVertex *a2q2 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::START, 2), aa1, PointOnLinePosition(LineStOrEd::START, 2), { __T("A"), __T("Q") }));
	   //a2q2->draw(pDC, &bluePen);
	
	   // 绘制右前领辅助垂线――外
	   double a22qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q2->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q2->getFigure())->GetSt());
	   CVertex *tb2 = new CVertex(new VerConstraintRelation(a2q2, a22qlength / (2 * PIXELPERCM), 2, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb2->draw(pDC, &redPen);

	   //绘制右前领窝弧线ab1c1――外
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec9;
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(d1e1, PointOnLinePosition(LineStOrEd::START, 2)));
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(tb2, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 3)));
	   CVertex *a2b1q9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec9));
	   a2b1q9->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj2->getFigure())->GetEd()) / 3;
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
	   v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
	   e1f1->draw(pDC, &redPen);

	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
	   f1g1->draw(pDC, &redPen);

	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj2, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj2, PointOnLinePosition(LineStOrEd::END, 0), jj2, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);

	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj2, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	  
	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
	   z1m1->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(a2o1, bustGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &redPen);
	
	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(a2o1, LineStOrEd::END, ap1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_2D_Style2_front_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		CPoint1 originPoint = CPoint1(1000, 420) + offset;
	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //
	   double frontCollarDepth = 14;


	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	  

	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/



		   //2 绘制前中线。 平行ad， 与ab，cd相交，
	   CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("O"), __T("O'") }));
	   aa1->draw(pDC, &redPen);

	   //cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   //ww1->draw(pDC, &bluePen);

	   // 4 jj1 绘制左胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new  RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth-4-frontCollarDepth), 0, -bustGirth/4, { __T("M"), __T("K") }));
	
	   jj1->draw(pDC, &bluePen);

	   

	   // 5 绘制左下摆线OO1
	   CVertex *ap = new CVertex(new RayConstraintRelation(aa1, LineStOrEd::END, 0, -hemGirth / 4, { __T("M"), __T("K") }));
	   ap->draw(pDC, &redPen);

	   // 6 绘制左罗纹线
	   CVertex *a2o = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("M"), __T("K") }));
	   a2o->draw(pDC, &redPen);

	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   //u1v1->drawWithLabel(pDC, &bluePen);

	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   uv->draw(pDC, &bluePen);

	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	  // ff1->draw(pDC, &bluePen);

	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
	  // dq->drawWithLabel(pDC, &redPen);

	  
	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
	   //ce->drawWithLabel(pDC, &redPen);
	   de->draw(pDC, &redPen);

	    // 绘制左前领辅助线――内
	   CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   //a2q->draw(pDC, &bluePen);

	   // 绘制左前领弧线垂线――内
	   double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q->getFigure())->GetSt());
	   CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb->draw(pDC, &greenPen);

	   //绘制左前领窝弧线ab1c1――内
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(de, LineStOrEd::END));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   a2bq->draw(pDC, &redPen);

	   // 绘制左前领辅助线――外
	   CVertex *a2q0 = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::END, -2), aa1, PointOnLinePosition(LineStOrEd::START, 2), { __T("A"), __T("Q") }));
	   //a2q0->draw(pDC, &bluePen);

	   // 绘制左前领辅助垂线――外
	   double a20qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q0->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q0->getFigure())->GetSt());
	   CVertex *tb0 = new CVertex(new VerConstraintRelation(a2q0, a20qlength / (2 * PIXELPERCM), -2, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb0->draw(pDC, &greenPen);

	   //绘制左前领窝弧线ab1c1――外
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(de, PointOnLinePosition(LineStOrEd::END, -2)));
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tb0, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 3)));
	   CVertex *a2b1q10 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
	   a2b1q10->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(uv->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
	   vh->draw(pDC, &bluePen);
	  

	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
	   ef->draw(pDC, &redPen);

	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
	   fg->draw(pDC, &redPen);

	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
	   ij->draw(pDC, &redPen);

	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
	   zm->draw(pDC, &redPen);

	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(a2o, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);

	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(a2o, LineStOrEd::START, ap, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);

   }
    void static TestDrawV_LongitudinalKnitting_3D_Style2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(500, 50) + offset;

	   // 参数
	   double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
	   double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

	   double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
	   double backLength = para.m_backLength* para.m_ratio;   // 背长

	   double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
	   double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
	   double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

	   double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
	   double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

	   double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	   double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	   double cuffGirth = para.m_cuffGirth;  // 袖口围

	   // 含参数变量
	   double rectWidthV_Body = bustGirth / 2;
	   double rectLengthV_Body = bodyLength;

	   double armHoleDepth = bustGirth / 5 + 4 + 5.5;
	   double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
	   double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	   double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
	   double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽
	   double frontCollarDepth = 14;

	   double frontShouldAngle = 20;
	   double backShouldAngle = 20;
	   double hipLength = 18;// 腰长  腰节线到臀围线的距离
	   double armAngle = 45; //

	   // 袖子
	   double sleeveWidth = (bustGirth / 5) * 2;
	   double sleeveCrownHeight = (bustGirth / 10) + 2.5;
	   double rectWidthV_Sleeve = sleeveWidth;//原来是29
	   double rectLengthV_Sleeve = bodyLength;
	   double sleeveTiltAngle = 35;
	   double armBindLen = 1.5;
	   double armStraightLine = 1.5;



	   CPen redPen;
	   redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	   CPen redPen1;
	   redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

	   CPen bluePen;
	   bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	   CPen greenPen;
	   greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	

	   ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
	   ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

	   //水平ab
	   CVertex *p1q1 = new CVertex(parameterCRhorizontal);

	   /*cVer_map[CString("rect_top")] = pq;
	   CVertex *zuixia = cVer_map[CString("rect_top")];*/

	   //垂直ad
	   CVertex *p1s1 = new CVertex(parameterCRvertical);

	   ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
	   ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

	   //水平cd
	   CVertex *s1r1 = new CVertex(rayCRhorizontal);
	   //垂直bc
	   CVertex *q1r1 = new CVertex(rayCRvertical);

	   /*	p1q1->drawWithLabel(pDC, &greenPen);
		   p1s1->drawWithLabel(pDC, &greenPen);

		   s1r1->drawWithLabel(pDC, &greenPen);
		   q1r1->drawWithLabel(pDC, &greenPen);*/



		   //2 绘制后中线。 平行ad， 与ab，cd相交，
	   CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
	   //aa1->draw(pDC, &bluePen);

	   //cVer_map[aa1->m_id] = aa1;

	   //3 绘制腰围线。  backLength = bodyLength - hipLength;
	   CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   //ww1->draw(pDC, &bluePen);

	   // 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	   CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
	   //jj1->draw(pDC, &bluePen);

	   // 5 绘制下摆线OO1
	   CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
	   pp1->draw(pDC, &redPen);

	   // 6 绘制罗纹线
	   CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
	   oo1->draw(pDC, &redPen);


	   // 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	   CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	   //u1v1->draw(pDC, &bluePen);

	   // 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	   CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
	   //uv->draw(pDC, &bluePen);

	   // 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	   CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
	   //ff1->draw(pDC, &bluePen);

	   // 10 绘制右后领深线 
	   CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
	   d1q1->draw(pDC, &bluePen);
	   // 11 绘制左后领深线
	   CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
	   dq->draw(pDC, &bluePen);

	   //12 绘制右后领宽线，  
	   CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
	   //aq1->drawWithLabel(pDC, &bluePen);
	   //13 绘制右后领宽线，  
	   CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);

	   // 14 绘制右领窝
	   CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
	   b1d1->draw(pDC, &redPen);

	   // 14 绘制左领窝
	   CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
	   bd->draw(pDC, &redPen);

	   // 16 后水平线
	   CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
	   //aq->drawWithLabel(pDC, &bluePen);
	   bb1->draw(pDC, &redPen);

	   //	肩斜长度
	   double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

	   //18 绘制左肩线1 
	   CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
	   //ce->drawWithLabel(pDC, &redPen);
	   de->draw(pDC, &redPen);
	   //19 绘制右肩线2 
	   CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
	   //mf->drawWithLabel(pDC, &redPen);
	   d1e1->draw(pDC, &redPen);

	   // 袖窿辅助线
	   double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	   CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
	   vh->draw(pDC, &bluePen);
	   CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
	   v1h1->draw(pDC, &bluePen);

	   // 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
	   CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
	   e1f1->draw(pDC, &redPen);

	   // 25  绘制右袖窿弧线 2  
	   CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
	   f1g1->draw(pDC, &redPen);


	   // 26  绘制右袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
	   verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
	   CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	   nopf->draw(pDC, &redPen);

	   // 绘制腋下水平部分
	   CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
	   i1j1->draw(pDC, &redPen);


	   // 24  绘制左袖窿弧线 1  
	   CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
	   ef->draw(pDC, &redPen);

	   // 25  绘制左袖窿弧线 2  
	   CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
	   fg->draw(pDC, &redPen);


	   // 26  绘制左袖窿弧线 3  
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
	   verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
	   CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	   nopf1->draw(pDC, &redPen);

	   // 绘制左腋下水平部分
	   CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
	   ij->draw(pDC, &redPen);


	   // 32 绘制右胸围直栏 I’J’
	   CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
	   j1k1->draw(pDC, &redPen);
	   // 33 绘制左胸围直栏 IJ
	   CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
	   jk->draw(pDC, &redPen);


	   //绘制右腰围直栏
	   CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
	   l1z1->draw(pDC, &redPen);
	   CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
	   z1m1->draw(pDC, &redPen);

	   //绘制左腰围直栏
	   CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
	   lz->draw(pDC, &redPen);
	   CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
	   zm->draw(pDC, &redPen);


	   // 32 绘制右下摆直栏 I’J’
	   CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   n1o1->draw(pDC, &greenPen);
	   // 33 绘制左下摆直栏 IJ
	   CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
	   no->draw(pDC, &redPen);


	   // 38 绘制右侧缝线1 J’K’
	   CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
	   k1l1->draw(pDC, &redPen);
	   // 39 绘制右侧缝线2 L’M
	   CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
	   m1n1->draw(pDC, &redPen);
	   // 40 绘制右侧缝线2 L’M
	   CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
	   o1p1->draw(pDC, &redPen);


	   // 38 绘制左侧缝线1 J’K’
	   CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
	   kl->draw(pDC, &redPen);
	   // 39 绘制左侧缝线2 L’M
	   CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
	   mn->draw(pDC, &redPen);
	   // 40 绘制左侧缝线2 L’M
	   CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
	   op->draw(pDC, &redPen);

	  // 前中
	   CVertex *aa2 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body - frontCollarDepth), { __T("O"), __T("O'") }));
	   aa2->draw(pDC, &redPen);


	   // 绘制左前领辅助斜线――内
	   CVertex *a2q = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::END, aa2, PointOnLinePosition(LineStOrEd::START,0), { __T("A"), __T("Q") }));
	   //a2q->draw(pDC, &greenPen);

	   // 绘制左前领弧线垂线――内
	   double a2qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q->getFigure())->GetSt());
	   CVertex *tb = new CVertex(new VerConstraintRelation(a2q, a2qlength / (2 * PIXELPERCM), -1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb->draw(pDC, &greenPen);

	   //绘制左前领窝弧线ab1c1――内
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(de, LineStOrEd::END));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(tb, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aa2, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2bq = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	   a2bq->draw(pDC, &redPen);

	   // 绘制左前领辅助线――外
	   CVertex *a2q0 = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::END, -2), aa2, PointOnLinePosition(LineStOrEd::START, 2), { __T("A"), __T("Q") }));
	   //a2q0->draw(pDC, &bluePen);

	   // 绘制左前领辅助垂线――外
	   double a20qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q0->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q0->getFigure())->GetSt());
	   CVertex *tb0 = new CVertex(new VerConstraintRelation(a2q0, a20qlength / (2 * PIXELPERCM), -2, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb0->draw(pDC, &greenPen);

	   //绘制左前领窝弧线ab1c1――外
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(de, PointOnLinePosition(LineStOrEd::END, -2)));
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tb0, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(aa2, PointOnLinePosition(LineStOrEd::START, 3)));
	   CVertex *a2b1q10 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
	   a2b1q10->draw(pDC, &redPen);



	   // 绘制右前领辅助线
	   CVertex *a2q1 = new CVertex(new LineAndLineConstraintRelation(d1q1, LineStOrEd::END, aa2, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q") }));
	   //a2q1->draw(pDC, &bluePen);



	   // 绘制右前领弧垂线
	   double a2qlength1 = CPoint1::Distance(dynamic_cast<CLine*>(a2q1->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q1->getFigure())->GetSt());
	   CVertex *t1b1 = new CVertex(new VerConstraintRelation(a2q1, a2qlength1 / (2 * PIXELPERCM), 1, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //t1b1->draw(pDC, &greenPen);

	   //绘制右前领窝弧线ab1c1――内
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(d1e1, LineStOrEd::START));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(t1b1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa2, PointOnLinePosition(LineStOrEd::START, 0)));
	   CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	   a2b1q->draw(pDC, &redPen);


	   // 绘制右前领辅助线――外
	   CVertex *a2q2 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::START, 2), aa2, PointOnLinePosition(LineStOrEd::START, 2), { __T("A"), __T("Q") }));
	   //a2q2->draw(pDC, &bluePen);

	   // 绘制右前领辅助垂线――外
	   double a22qlength = CPoint1::Distance(dynamic_cast<CLine*>(a2q2->getFigure())->GetEd(), dynamic_cast<CLine*>(a2q2->getFigure())->GetSt());
	   CVertex *tb2 = new CVertex(new VerConstraintRelation(a2q2, a22qlength / (2 * PIXELPERCM), 2, { __T("M"), __T("K") })); // bust / 12 + 13.7
	   //tb2->draw(pDC, &redPen);

	   //绘制右前领窝弧线ab1c1――外
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec9;
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(d1e1, PointOnLinePosition(LineStOrEd::START, 2)));
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(tb2, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(aa2, PointOnLinePosition(LineStOrEd::START, 3)));
	   CVertex *a2b1q9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec9));
	   a2b1q9->draw(pDC, &redPen);


	   //绘制左袖

	 //袖中线001
	   CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
	   eo1->draw(pDC, &redPen);

	   //袖肥jj1
	   CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   //rj1->draw(pDC, &bluePen);

	   //  袖山辅助线
	   CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
	   //er->draw(pDC, &greenPen);

	   // 左袖山留针线  
	   CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   of->draw(pDC, &redPen);
	   CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   //og->draw(pDC, &bluePen);
	   CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
	   //oh->draw(pDC, &greenPen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
	   //verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
	   verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
	   CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
	   f1ghi7->draw(pDC, &redPen);


	   // 袖口
	   CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   om1->draw(pDC, &redPen);

	   // 袖口罗纹
	   CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol1->draw(pDC, &redPen);

	   //左腋下直栏
	   CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
	   //jk1->draw(pDC, &redPen);




	   // 左侧缝
	   CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
	   kl1->draw(pDC, &redPen);
	   CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
	   lm1->draw(pDC, &redPen);



	   //绘制右袖
		 //袖中线001
	   CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
	   e1o1->draw(pDC, &redPen);
	   //袖肥jj1
	   CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
	   //r1j1->draw(pDC, &bluePen);

	   //  袖山辅助线
	   CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
	   //e1r->draw(pDC, &greenPen);

	   // 右袖山留针线  
	   CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   of1->draw(pDC, &redPen);
	   CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   //og1->draw(pDC, &bluePen);
	   CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
	   //oh1->draw(pDC, &greenPen);

	   //绘制弧线fghi
	   std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::START));
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::START, 0)));
	   //verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
	   verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
	   CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
	   f1ghi8->draw(pDC, &redPen);



	   // 袖口
	   CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol11->draw(pDC, &redPen);
	   // 袖口罗纹
	   CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
	   ol12->draw(pDC, &redPen);
	   //右腋下直栏
	   CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
	   //j1k11->draw(pDC, &redPen);

	   // 右侧缝
	   CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
	   k1l11->draw(pDC, &redPen);
	   CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
	   l1m11->draw(pDC, &redPen);






   }

	// 2 侧向编织――5裙子――2D+3D
	void static TestDraw_SideKnitting_3D(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽 先注释掉其他的吧，我的有好几个函数，都该吗？ 

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(200, 120) + offset;
		orig = originPoint;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);




		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);



		//绘制前领窝线――辅助线
		CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3, 15, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ig->drawWithLabel(pDC, &bluePen);
		CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2, 18, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//jk->drawWithLabel(pDC, &bluePen);
		CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1, 14.5, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//l->drawWithLabel(pDC, &bluePen);
		//lz->draw(pDC, &bluePen);

	   // 绘制左om 
		CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//mm1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//om1->drawWithLabel(pDC, &bluePen);

		//绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);

		//绘制前领窝――内侧线
		CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		mz->draw(pDC, &redPen1);

		//绘制前领窝――外侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 绘制中间大褶皱――辅助线

		// 绘制左om 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//pp1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//op1->drawWithLabel(pDC, &bluePen);

		// 绘制中间大褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10)));
		CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		fgh7->draw(pDC, &redPen1);

		// 绘制中间小褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4)));
		CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		fgh8->draw(pDC, &redPen1);


		// 旁边褶皱 ――辅助线

		// 绘制左om 
		CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//tt1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//ot1->drawWithLabel(pDC, &bluePen);

		CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//qq1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//oq1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//rr1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//or1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//ss1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//os1->drawWithLabel(pDC, &bluePen);


		// 旁边褶皱――右边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		fgh9->draw(pDC, &redPen1);
		// 旁边褶皱――左边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		fghR6->draw(pDC, &redPen1);



		//  旁边褶皱――右边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9)));
		CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		fgh11->draw(pDC, &redPen1);
		//  旁边褶皱――左边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		fgh12->draw(pDC, &redPen1);

		// 绘制中间第3条褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8)));
		CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		fgh13->draw(pDC, &redPen1);

	}
	void static TestDraw_SideKnitting_2D_front(CDC * pDC , ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {
		
	
		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		CPoint1 originPoint = CPoint1(650, 120) + offset;
		orig = originPoint;
		// 参数
		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth *  para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth *  para.m_ratio; //肩宽
		double backLength = para.m_backLength  *  para.m_ratio;   // 背长
		
		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth *  para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth *  para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

        double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

	/*	p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		s1r1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);
*/


	    //2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("G"), __T("G'") }), CString("HJ'"));
		hj1->drawWithLabel(pDC, &bluePen, CSize(4,4));
		//hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("S"), __T("") }));
		j1u->drawWithLabel(pDC, &redPen, CSize(4,4));
		//j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T(""), __T("R") }));
		//j1t->drawWithLabel(pDC, &redPen);
		j1t->drawWithLabel(pDC, &redPen, CSize(4,4));

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("V"), __T("") }));
		g1x->drawWithLabel(pDC, &bluePen, CSize(4,4));
		//g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T(""), __T("O") }));
		g1q->drawWithLabel(pDC, &bluePen, CSize(4,4));
		//g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("W"), __T("") }));
		hy->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T(""), __T("N") }));
		hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hp->draw(pDC, &bluePen);

		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("U"), __T("") }));
		h1w->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T(""), __T("P") }));
		h1r->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("T"), __T("") }));
		i1v->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T(""), __T("Q") }));
		i1s->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//i1s->draw(pDC, &bluePen);
		
		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5, { __T("B'"), __T("E'") }), CString("B'E'"));
		b1e1->draw(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5), { __T("C'"), __T("F'") }), CString("C'F'"));
		c1f1->draw(pDC, &bluePen);
		//c1f1->draw(pDC, &bluePen);


		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e10 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::START, b1e1, LineStOrEd::ONE_THIRD, { __T(""), __T("X") }), CString("AA'"));
		b1e10->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f10 = new CVertex(new  LineAndLineConstraintRelation(c1f1, LineStOrEd::START, c1f1, LineStOrEd::ONE_THIRD, { __T(""), __T("Y") }), CString("AA'"));
		c1f10->drawWithLabel(pDC, &bluePen, CSize(4, 4));


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 360 - 45, vhLength / PIXELPERCM, { __T(""), __T("Z") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 180 + 45, vhLength / PIXELPERCM, { __T("X"), __T("") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(4, 4));




		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("C"), __T("") }), CString("CA'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		ca1->draw(pDC, &bluePen);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("K"), __T("") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//md1->draw(pDC, &bluePen);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("A"), __T("A'") }), CString("AA'"));
	    aa1->draw(pDC, &bluePen);
		//aa1->draw(pDC, &bluePen);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("A"), __T("B") }));
	    ab->drawWithLabel(pDC, &redPen,CSize(4,4));
		//ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("B"), __T("C") }));
		//bc->draw(pDC, &redPen);
		bc->draw(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 3), Quadrant::THREE, { __T("M"), __T("N") }));
		//mn->draw(pDC, &redPen);
		mn->draw(pDC, &redPen);
		//11 绘制右后领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 3), 3, 6, { __T("L"), __T("M") }));
		no->drawWithLabel(pDC, &redPen, CSize(4, 4));
		//no->draw(pDC, &redPen);

		//18 绘制后中线1

		if(isShortClothes==true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::START, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}
		else
		{
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
		ay->draw(pDC, &redPen);
		//ay->draw(pDC, &redPen);
		//18 绘制后中线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
		yx->draw(pDC, &redPen);
		//yx->draw(pDC, &redPen);
		//18 绘制后中线3
		CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
		xw->draw(pDC, &redPen);
		//xw->draw(pDC, &redPen);
		//18 绘制后中线4
		CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
		wv->draw(pDC, &redPen);
		//wv->draw(pDC, &redPen);
		//19 绘制后中线5
		CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
		vu->draw(pDC, &redPen);
		//vu->draw(pDC, &redPen);

		//19 绘制前中线1
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
		op->draw(pDC, &redPen);
		//op->draw(pDC, &redPen);
		//19 绘制前中线1
		CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
		pq->draw(pDC, &redPen);
		//pq->draw(pDC, &redPen);
		//19 绘制前中线1
		CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
		qr->draw(pDC, &redPen);
		//qr->draw(pDC, &redPen);
		//19 绘制前中线1
		CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
		rs->draw(pDC, &redPen);
		//rs->draw(pDC, &redPen);
		//19 绘制前中线1
		CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
		st->draw(pDC, &redPen);
		//st->draw(pDC, &redPen);
		}
		
		

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("C"), __T("D") }));
		ce->drawWithLabel(pDC, &redPen,CSize(4,4));
		//ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("J"), __T("K") }));
		mf->drawWithLabel(pDC, &redPen,CSize(4,4));
		//mf->draw(pDC, &redPen);

		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("A"), __T("B") }));
		//gh->drawWithLabel(pDC, &redPen);
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("A"), __T("B") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->draw(pDC, &redPen);

	}
	// 下面是正确标记和比例的
	void static TestDraw_SideKnitting_2D_back(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 50) + offset;
		orig = originPoint;
		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		// 参数
		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		//你像我， 这个所有的这个地方乘以para.m_ratio， 上面两个角度的参数不要成  你不是乘以了吗？还去哪乘以/

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("i"), __T("") }), CString("hj'"));
		hj1->drawWithLabel(pDC, &bluePen, CSize(0, -20));
		//hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("w"), __T("") }));
		j1u->drawWithLabel(pDC, &redPen, CSize(-12, 4));
		//j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T(""), __T("v") }));
		//j1t->drawWithLabel(pDC, &redPen);
		j1t->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("z"), __T("") }));
		g1x->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		//g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T(""), __T("s") }));
		g1q->drawWithLabel(pDC, &bluePen, CSize(20, 0));
		//g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("z'"), __T("") }));
		hy->drawWithLabel(pDC, &bluePen, CSize(-16, 4));
		//hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + 1.5* para.m_ratio, { __T(""), __T("r") }));
		//hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		hp->drawWithLabel(pDC, &bluePen, CSize(8,8));

		////8 绘制右胸围延长线。 
		//CVertex *hp1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T(""), __T("") }));
		////hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hp1->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("y"), __T("") }));
		h1w->drawWithLabel(pDC, &bluePen, CSize(-20, 4));
		//h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T(""), __T("t") }));
		h1r->drawWithLabel(pDC, &bluePen, CSize(12, 4));
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("x"), __T("") }));
		i1v->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		//i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T(""), __T("u") }));
		i1s->drawWithLabel(pDC, &bluePen, CSize(14, 0));
		//i1s->draw(pDC, &bluePen);

		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5* para.m_ratio, { __T("b'"), __T("e'") }), CString("b'e'"));
		b1e1->draw(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5* para.m_ratio), { __T("c'"), __T("f'") }), CString("c'f'"));
		c1f1->draw(pDC, &bluePen);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("c"), __T("") }), CString("ca'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//ca1->draw(pDC, &bluePen);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("k"), __T("") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//md1->draw(pDC, &bluePen);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("a"), __T("a'") }), CString("aa'"));
		//aa1->draw(pDC, &bluePen);
		//aa1->draw(pDC, &bluePen);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("a"), __T("b") }));
		ab->drawWithLabel(pDC, &redPen, CSize(0, -18));
		//ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("b"), __T("c") }));
		//bc->draw(pDC, &redPen);
		bc->draw(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 3), Quadrant::THREE, { __T(""), __T("") }));
		//mn->draw(pDC, &redPen);
		mn->draw(pDC, &redPen);
		//11 绘制右前领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 3), 3, 6, { __T("p"), __T("q") }));
		no->drawWithLabel(pDC, &redPen, CSize(4, 4));
		//no->draw(pDC, &redPen);

		//18 绘制后中线1

		if (isShortClothes == true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("a"), __T("w") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("y"), __T("x") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("x"), __T("w") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("v"), __T("u") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("p"), __T("o") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("q"), __T("p") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}
		else
		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			ay->draw(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			yx->draw(pDC, &redPen);
			//yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			xw->draw(pDC, &redPen);
			//xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			wv->draw(pDC, &redPen);
			//wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->draw(pDC, &redPen);
			//vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			op->draw(pDC, &redPen);
			//op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			pq->draw(pDC, &redPen);
			//pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			qr->draw(pDC, &redPen);
			//qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			rs->draw(pDC, &redPen);
			//rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			st->draw(pDC, &redPen);
			//st->draw(pDC, &redPen);
		}



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("c"), __T("d") }));
		ce->drawWithLabel(pDC, &redPen, CSize(2, -16));
		//ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("n"), __T("o") }));
		mf->drawWithLabel(pDC, &redPen, CSize(-4, -16));
		//mf->draw(pDC, &redPen);


			// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 360 - 45, vhLength / PIXELPERCM, { __T(""), __T("g") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(6, -16));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 180 + 45, vhLength / PIXELPERCM, { __T("k"), __T("") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(-12, -16));




		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), { __T("j"), __T("") }));
		gh->drawWithLabel(pDC, &redPen, CSize(18, 4));
		//gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), { __T(""), __T("h") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->drawWithLabel(pDC, &redPen, CSize(-18, 4));


		CVertex *fg1 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("f") }));
		fg1->drawWithLabel(pDC, &bluePen, CSize(-8, 4));
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *ji1 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("l") }));
		ji1->drawWithLabel(pDC, &bluePen, CSize(4, 4));


		CVertex *fg11 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::ONE_THIRD, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("e") }));
		fg11->drawWithLabel(pDC, &bluePen, CSize(-8, 4));
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *ji11 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::ONE_THIRD, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("m") }));
		ji11->drawWithLabel(pDC, &bluePen, CSize(4, 4));

	}
	void static TestDraw_SideKnitting_2D_front1(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 50) + offset;
		orig = originPoint;
		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		// 参数
		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		//你像我， 这个所有的这个地方乘以para.m_ratio， 上面两个角度的参数不要成  你不是乘以了吗？还去哪乘以/

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("I"), __T("") }), CString("hj'"));
		hj1->drawWithLabel(pDC, &bluePen, CSize(0, -20));
		//hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("W"), __T("") }));
		j1u->drawWithLabel(pDC, &redPen, CSize(-12, 4));
		//j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T(""), __T("V") }));
		//j1t->drawWithLabel(pDC, &redPen);
		j1t->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("Z"), __T("") }));
		g1x->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		//g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T(""), __T("S") }));
		g1q->drawWithLabel(pDC, &bluePen, CSize(20, 0));
		//g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Z'"), __T("") }));
		hy->drawWithLabel(pDC, &bluePen, CSize(-16, 4));
		//hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + 1.5* para.m_ratio, { __T(""), __T("R") }));
		//hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		hp->drawWithLabel(pDC, &bluePen, CSize(8, 8));

		////8 绘制右胸围延长线。 
		//CVertex *hp1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T(""), __T("") }));
		////hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hp1->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("Y"), __T("") }));
		h1w->drawWithLabel(pDC, &bluePen, CSize(-20, 4));
		//h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T(""), __T("T") }));
		h1r->drawWithLabel(pDC, &bluePen, CSize(12, 4));
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("X"), __T("") }));
		i1v->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		//i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T(""), __T("U") }));
		i1s->drawWithLabel(pDC, &bluePen, CSize(14, 0));
		//i1s->draw(pDC, &bluePen);

		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5* para.m_ratio, { __T("b'"), __T("e'") }), CString("b'e'"));
		b1e1->draw(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5* para.m_ratio), { __T("c'"), __T("f'") }), CString("c'f'"));
		c1f1->draw(pDC, &bluePen);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("c"), __T("") }), CString("ca'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//ca1->draw(pDC, &bluePen);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("k"), __T("") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//md1->draw(pDC, &bluePen);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("a"), __T("a'") }), CString("aa'"));
		//aa1->draw(pDC, &bluePen);
		//aa1->draw(pDC, &bluePen);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("A"), __T("B") }));
		ab->drawWithLabel(pDC, &redPen, CSize(0, -18));
		//ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("B"), __T("C") }));
		//bc->draw(pDC, &redPen);
		bc->draw(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 3), Quadrant::THREE, { __T(""), __T("") }));
		//mn->draw(pDC, &redPen);
		mn->draw(pDC, &redPen);
		//11 绘制右前领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 3), 3, 6, { __T("P"), __T("Q") }));
		no->drawWithLabel(pDC, &redPen, CSize(4, 4));
		//no->draw(pDC, &redPen);

		//18 绘制后中线1

		if (isShortClothes == true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("a"), __T("w") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("y"), __T("x") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("x"), __T("w") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("v"), __T("u") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("p"), __T("o") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("q"), __T("p") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}
		else
		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			ay->draw(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			yx->draw(pDC, &redPen);
			//yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			xw->draw(pDC, &redPen);
			//xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			wv->draw(pDC, &redPen);
			//wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->draw(pDC, &redPen);
			//vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			op->draw(pDC, &redPen);
			//op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			pq->draw(pDC, &redPen);
			//pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			qr->draw(pDC, &redPen);
			//qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			rs->draw(pDC, &redPen);
			//rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			st->draw(pDC, &redPen);
			//st->draw(pDC, &redPen);
		}



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("C"), __T("D") }));
		ce->drawWithLabel(pDC, &redPen, CSize(2, -16));
		//ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("N"), __T("O") }));
		mf->drawWithLabel(pDC, &redPen, CSize(-4, -16));
		//mf->draw(pDC, &redPen);


			// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 360 - 45, vhLength / PIXELPERCM, { __T(""), __T("G") }));
		vh->drawWithLabel(pDC, &bluePen, CSize(6, -16));
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 180 + 45, vhLength / PIXELPERCM, { __T("K"), __T("") }));
		v1h1->drawWithLabel(pDC, &bluePen, CSize(-12, -16));




		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), { __T("J"), __T("") }));
		gh->drawWithLabel(pDC, &redPen, CSize(18, 4));
		//gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), { __T(""), __T("H") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->drawWithLabel(pDC, &redPen, CSize(-18, 4));


		CVertex *fg1 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("F") }));
		fg1->drawWithLabel(pDC, &bluePen, CSize(-10, 4));
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *ji1 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("L") }));
		ji1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		CVertex *fg11 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::ONE_THIRD, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("E") }));
		fg11->drawWithLabel(pDC, &bluePen, CSize(-10, 4));
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *ji11 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::ONE_THIRD, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("M") }));
		ji11->drawWithLabel(pDC, &bluePen, CSize(4, 4));

	}
	void static TestDraw_SideKnitting_3D1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(200, 50) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽 先注释掉其他的吧，我的有好几个函数，都该吗？ 

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + (4 + 5.5)* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + (4 + 0.3)* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + (4 + 0.3)* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离


		COLORREF color = para.m_color;

		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//CPen redPen1;
		//redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));
		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(r, g, b));


		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);




		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5* para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5* para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5* para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5 * para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5* para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5* para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5 * para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5* para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0* para.m_ratio)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0* para.m_ratio)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);



		//绘制前领窝线――辅助线
		CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3 * para.m_ratio, 15 * para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ig->drawWithLabel(pDC, &bluePen);
		CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2 * para.m_ratio, 18 * para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//jk->drawWithLabel(pDC, &bluePen);
		CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1 * para.m_ratio, 14.5* para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//l->drawWithLabel(pDC, &bluePen);
		//lz->draw(pDC, &bluePen);

	   // 绘制左om 
		CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//mm1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//om1->drawWithLabel(pDC, &bluePen);

		//绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9 * para.m_ratio)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);

		//绘制前领窝――内侧线
		CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		mz->draw(pDC, &redPen1);

		//绘制前领窝――外侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2 * para.m_ratio)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 绘制中间大褶皱――辅助线

		// 绘制左om 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//pp1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//op1->drawWithLabel(pDC, &bluePen);

		// 绘制中间大褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5* para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5* para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10 * para.m_ratio)));
		CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		fgh7->draw(pDC, &redPen1);

		// 绘制中间小褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4 * para.m_ratio)));
		CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		fgh8->draw(pDC, &redPen1);


		// 旁边褶皱 ――辅助线

		// 绘制左om 
		CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//tt1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//ot1->drawWithLabel(pDC, &bluePen);

		CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//qq1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//oq1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//rr1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//or1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//ss1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//os1->drawWithLabel(pDC, &bluePen);


		// 旁边褶皱――右边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18 * para.m_ratio)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16 * para.m_ratio)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12 * para.m_ratio)));
		CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		fgh9->draw(pDC, &redPen1);
		// 旁边褶皱――左边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18 * para.m_ratio)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16 * para.m_ratio)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12 * para.m_ratio)));
		CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		fghR6->draw(pDC, &redPen1);



		//  旁边褶皱――右边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15 * para.m_ratio)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14 * para.m_ratio)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9 * para.m_ratio)));
		CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		fgh11->draw(pDC, &redPen1);
		//  旁边褶皱――左边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15 * para.m_ratio)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14 * para.m_ratio)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9 * para.m_ratio)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		fgh12->draw(pDC, &redPen1);

		// 绘制中间第3条褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8 * para.m_ratio)));
		CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		fgh13->draw(pDC, &redPen1);

	}
  // 下面是正确的但没有标记的
	void static TestDraw_SideKnitting_2D_back1(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 50) + offset;
		orig = originPoint;
		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		// 参数
		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		//你像我， 这个所有的这个地方乘以para.m_ratio， 上面两个角度的参数不要成  你不是乘以了吗？还去哪乘以/

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("i"), __T("") }), CString("hj'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(0, -20));
		hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("w"), __T("") }));
		//j1u->drawWithLabel(pDC, &redPen, CSize(-12, 4));
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T(""), __T("v") }));
		j1t->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("z"), __T("") }));
		//g1x->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T(""), __T("s") }));
		//g1q->drawWithLabel(pDC, &bluePen, CSize(20, 0));
		g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("z'"), __T("") }));
		//hy->drawWithLabel(pDC, &bluePen, CSize(-16, 4));
		hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + 1.5* para.m_ratio, { __T(""), __T("r") }));
		hp->draw(pDC, &bluePen);
		//hp->drawWithLabel(pDC, &bluePen, CSize(8, 8));

		////8 绘制右胸围延长线。 
		//CVertex *hp1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T(""), __T("") }));
		////hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hp1->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("y"), __T("") }));
		//h1w->drawWithLabel(pDC, &bluePen, CSize(-20, 4));
		h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T(""), __T("t") }));
		//h1r->drawWithLabel(pDC, &bluePen, CSize(12, 4));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("x"), __T("") }));
		//i1v->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T(""), __T("u") }));
		//i1s->drawWithLabel(pDC, &bluePen, CSize(14, 0));
		i1s->draw(pDC, &bluePen);

		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5* para.m_ratio, { __T("b'"), __T("e'") }), CString("b'e'"));
		b1e1->draw(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5* para.m_ratio), { __T("c'"), __T("f'") }), CString("c'f'"));
		c1f1->draw(pDC, &bluePen);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("c"), __T("") }), CString("ca'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//ca1->draw(pDC, &bluePen);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("k"), __T("") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//md1->draw(pDC, &bluePen);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("a"), __T("a'") }), CString("aa'"));
		//aa1->draw(pDC, &bluePen);
		//aa1->draw(pDC, &bluePen);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("a"), __T("b") }));
		//ab->drawWithLabel(pDC, &redPen, CSize(0, -18));
		ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("b"), __T("c") }));
		//bc->draw(pDC, &redPen);
		bc->draw(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 3), Quadrant::THREE, { __T(""), __T("") }));
		//mn->draw(pDC, &redPen);
		mn->draw(pDC, &redPen);
		//11 绘制右前领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 3), 3, 6, { __T("p"), __T("q") }));
		//no->drawWithLabel(pDC, &redPen, CSize(4, 4));
		no->draw(pDC, &redPen);

		//18 绘制后中线1

		if (isShortClothes == true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("a"), __T("w") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("y"), __T("x") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("x"), __T("w") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("v"), __T("u") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("p"), __T("o") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("q"), __T("p") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}
		else
		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			ay->draw(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			yx->draw(pDC, &redPen);
			//yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			xw->draw(pDC, &redPen);
			//xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			wv->draw(pDC, &redPen);
			//wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->draw(pDC, &redPen);
			//vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			op->draw(pDC, &redPen);
			//op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			pq->draw(pDC, &redPen);
			//pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			qr->draw(pDC, &redPen);
			//qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			rs->draw(pDC, &redPen);
			//rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			st->draw(pDC, &redPen);
			//st->draw(pDC, &redPen);
		}



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("c"), __T("d") }));
		//ce->drawWithLabel(pDC, &redPen, CSize(2, -16));
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("n"), __T("o") }));
		//mf->drawWithLabel(pDC, &redPen, CSize(-4, -16));
		mf->draw(pDC, &redPen);


			// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 360 - 45, vhLength / PIXELPERCM, { __T(""), __T("g") }));
		//vh->drawWithLabel(pDC, &bluePen, CSize(6, -16));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 180 + 45, vhLength / PIXELPERCM, { __T("k"), __T("") }));
		//v1h1->drawWithLabel(pDC, &bluePen, CSize(-12, -16));
		v1h1->draw(pDC, &bluePen);



		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), { __T("j"), __T("") }));
		//gh->drawWithLabel(pDC, &redPen, CSize(18, 4));
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), { __T(""), __T("h") }));
		ih->draw(pDC, &redPen);
		//ih->drawWithLabel(pDC, &redPen, CSize(-18, 4));


		CVertex *fg1 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("f") }));
		//fg1->drawWithLabel(pDC, &bluePen, CSize(-8, 4));
		fg->draw(pDC, &redPen);
		CVertex *ji1 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("l") }));
		//ji1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		ji1->draw(pDC, &bluePen);

		CVertex *fg11 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::ONE_THIRD, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("e") }));
		//fg11->drawWithLabel(pDC, &bluePen, CSize(-8, 4));
		fg->draw(pDC, &redPen);
		CVertex *ji11 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::ONE_THIRD, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("m") }));
		//ji11->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		ji11->draw(pDC, &bluePen);
	}
	void static TestDraw_SideKnitting_2D_front2(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 50) + offset;
		orig = originPoint;
		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		// 参数
		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		//你像我， 这个所有的这个地方乘以para.m_ratio， 上面两个角度的参数不要成  你不是乘以了吗？还去哪乘以/

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("I"), __T("") }), CString("hj'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(0, -20));
		hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("W"), __T("") }));
		//j1u->drawWithLabel(pDC, &redPen, CSize(-12, 4));
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T(""), __T("V") }));
		j1t->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen, CSize(4, 4));

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("Z"), __T("") }));
		//g1x->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T(""), __T("S") }));
		//g1q->drawWithLabel(pDC, &bluePen, CSize(20, 0));
		g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Z'"), __T("") }));
		//hy->drawWithLabel(pDC, &bluePen, CSize(-16, 4));
		hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + 1.5* para.m_ratio, { __T(""), __T("R") }));
		hp->draw(pDC, &bluePen);
		//hp->drawWithLabel(pDC, &bluePen, CSize(8, 8));

		////8 绘制右胸围延长线。 
		//CVertex *hp1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T(""), __T("") }));
		////hp->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//hp1->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("Y"), __T("") }));
		//h1w->drawWithLabel(pDC, &bluePen, CSize(-20, 4));
		h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T(""), __T("T") }));
		//h1r->drawWithLabel(pDC, &bluePen, CSize(12, 4));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("X"), __T("") }));
		//i1v->drawWithLabel(pDC, &bluePen, CSize(-20, 0));
		i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T(""), __T("U") }));
		//i1s->drawWithLabel(pDC, &bluePen, CSize(14, 0));
		i1s->draw(pDC, &bluePen);

		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5* para.m_ratio, { __T("b'"), __T("e'") }), CString("b'e'"));
		b1e1->draw(pDC, &bluePen);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5* para.m_ratio), { __T("c'"), __T("f'") }), CString("c'f'"));
		c1f1->draw(pDC, &bluePen);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("c"), __T("") }), CString("ca'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//ca1->draw(pDC, &bluePen);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("k"), __T("") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen, CSize(4, 4));
		//md1->draw(pDC, &bluePen);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("a"), __T("a'") }), CString("aa'"));
		//aa1->draw(pDC, &bluePen);
		//aa1->draw(pDC, &bluePen);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("A"), __T("B") }));
		//ab->drawWithLabel(pDC, &redPen, CSize(0, -18));
		ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("B"), __T("C") }));
		//bc->draw(pDC, &redPen);
		bc->draw(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 3), Quadrant::THREE, { __T(""), __T("") }));
		//mn->draw(pDC, &redPen);
		mn->draw(pDC, &redPen);
		//11 绘制右前领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 3), 3, 6, { __T("P"), __T("Q") }));
		//no->drawWithLabel(pDC, &redPen, CSize(4, 4));
		no->draw(pDC, &redPen);

		//18 绘制后中线1

		if (isShortClothes == true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("a"), __T("w") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("y"), __T("x") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("x"), __T("w") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("v"), __T("u") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("p"), __T("o") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("q"), __T("p") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}
		else
		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			ay->draw(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			yx->draw(pDC, &redPen);
			//yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			xw->draw(pDC, &redPen);
			//xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			wv->draw(pDC, &redPen);
			//wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->draw(pDC, &redPen);
			//vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			op->draw(pDC, &redPen);
			//op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			pq->draw(pDC, &redPen);
			//pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			qr->draw(pDC, &redPen);
			//qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			rs->draw(pDC, &redPen);
			//rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			st->draw(pDC, &redPen);
			//st->draw(pDC, &redPen);
		}



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("C"), __T("D") }));
		//ce->drawWithLabel(pDC, &redPen, CSize(2, -16));
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("N"), __T("O") }));
		//mf->drawWithLabel(pDC, &redPen, CSize(-4, -16));
		mf->draw(pDC, &redPen);


			// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(b1e1->getFigure())->GetEd(), dynamic_cast<CLine*>(hj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(b1e1, LineStOrEd::END, 360 - 45, vhLength / PIXELPERCM, { __T(""), __T("G") }));
		//vh->drawWithLabel(pDC, &bluePen, CSize(6, -16));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(c1f1, LineStOrEd::END, 180 + 45, vhLength / PIXELPERCM, { __T("K"), __T("") }));
		//v1h1->drawWithLabel(pDC, &bluePen, CSize(-12, -16));
		v1h1->draw(pDC, &bluePen);



		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5* para.m_ratio), { __T("J"), __T("") }));
		//gh->drawWithLabel(pDC, &redPen, CSize(18, 4));
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5* para.m_ratio), { __T(""), __T("H") }));
		ih->draw(pDC, &redPen);
		//ih->drawWithLabel(pDC, &redPen, CSize(-18, 4));


		CVertex *fg1 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("F") }));
		//fg1->drawWithLabel(pDC, &bluePen, CSize(-10, 4));
		fg->draw(pDC, &redPen);
		CVertex *ji1 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("L") }));
		ji1->draw(pDC, &bluePen);
		//ji1->drawWithLabel(pDC, &bluePen, CSize(4, 4));

		CVertex *fg11 = new CVertex(new LineAndLineConstraintRelation(b1e1, LineStOrEd::ONE_THIRD, b1e1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("E") }));
		//fg11->drawWithLabel(pDC, &bluePen, CSize(-10, 4));
		fg->draw(pDC, &redPen);
		CVertex *ji11 = new CVertex(new LineAndLineConstraintRelation(c1f1, LineStOrEd::ONE_THIRD, c1f1, PointOnLinePosition(LineStOrEd::START, 0), { __T(""), __T("M") }));
		ji11->draw(pDC, &bluePen);
		//ji11->drawWithLabel(pDC, &bluePen, CSize(4, 4));
	}
	void static TestDraw_SideKnitting_3D2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(200, 50) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽 先注释掉其他的吧，我的有好几个函数，都该吗？ 

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + (4 + 5.5)* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + (4 + 0.3)* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + (4 + 0.3)* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离



		COLORREF color = para.m_color;

		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//CPen redPen1;
		//redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));
		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(r, g, b));


		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);




		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5* para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5* para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5* para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5 * para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5* para.m_ratio)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5* para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5 * para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5* para.m_ratio)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0* para.m_ratio)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0* para.m_ratio)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);



		//绘制前领窝线――辅助线
		CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3 * para.m_ratio, 15 * para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ig->drawWithLabel(pDC, &bluePen);
		CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2 * para.m_ratio, 18 * para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//jk->drawWithLabel(pDC, &bluePen);
		CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1 * para.m_ratio, 14.5* para.m_ratio, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//l->drawWithLabel(pDC, &bluePen);
		//lz->draw(pDC, &bluePen);

	   // 绘制左om 
		CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//mm1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//om1->drawWithLabel(pDC, &bluePen);

		//绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9 * para.m_ratio)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);

		//绘制前领窝――内侧线
		CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		mz->draw(pDC, &redPen1);

		//绘制前领窝――外侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2 * para.m_ratio)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 绘制中间大褶皱――辅助线

		// 绘制左om 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//pp1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//op1->drawWithLabel(pDC, &bluePen);

		// 绘制中间大褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5* para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5 * para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5* para.m_ratio)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10 * para.m_ratio)));
		CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		fgh7->draw(pDC, &redPen1);

		// 绘制中间小褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3 * para.m_ratio)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4 * para.m_ratio)));
		CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		fgh8->draw(pDC, &redPen1);


		// 旁边褶皱 ――辅助线

		// 绘制左om 
		CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//tt1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//ot1->drawWithLabel(pDC, &bluePen);

		CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//qq1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//oq1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//rr1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//or1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8 * para.m_ratio), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//ss1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8 * para.m_ratio), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//os1->drawWithLabel(pDC, &bluePen);


		// 旁边褶皱――右边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18 * para.m_ratio)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16 * para.m_ratio)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12 * para.m_ratio)));
		CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		fgh9->draw(pDC, &redPen1);
		// 旁边褶皱――左边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18 * para.m_ratio)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16 * para.m_ratio)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12 * para.m_ratio)));
		CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		fghR6->draw(pDC, &redPen1);



		//  旁边褶皱――右边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15 * para.m_ratio)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14 * para.m_ratio)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9 * para.m_ratio)));
		CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		fgh11->draw(pDC, &redPen1);
		//  旁边褶皱――左边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15 * para.m_ratio)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14 * para.m_ratio)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9 * para.m_ratio)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		fgh12->draw(pDC, &redPen1);

		// 绘制中间第3条褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6 * para.m_ratio)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8 * para.m_ratio)));
		CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		fgh13->draw(pDC, &redPen1);

	}
	
	// 2 侧向编织――上衣1――2D+3D 胸前有垂饰
	void static TestDraw_SideKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {
		
		CPoint1 originPoint = CPoint1(200, 50) + offset;
		orig = originPoint;

		// 参数
		//double bodyLength = para.m_bodyLength;    // 衣长
		//double bustGirth = para.m_bustGirth;    // 胸围 

		//double shoulderWidth = para.m_shouldWidth; //肩宽
		//double backLength = para.m_backLength;   // 背长

		//double waistGirth = para.m_waistGirth; // 腰围
		//double hipGirth = para.m_hipGirth;    // 臀围
		//double hemGirth = para.m_hemGirth;  //下摆围

		//double ribLength = para.m_ribLength;// 罗纹长
		//double ribGirth = para.m_ribWidth;// 罗纹宽

		//double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		//double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		//参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽 

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜



		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离



	    
		COLORREF color = para.m_color;

		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		/*CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));*/
	/*	CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));*/

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(r, g, b));

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
	   // i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);


		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);



		//绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);


		// 绘制胸前褶皱
		

		//5 绘制左辅助线
		CVertex *g1x1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength+6))), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x1->drawWithLabel(pDC, &bluePen);
		//6 绘制右辅助线。  backLength = bodyLength - 15 ;
		CVertex *g1q1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + 6))), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q1->drawWithLabel(pDC, &bluePen);
		CVertex *j1u1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END), 45, 4, { __T("G'"), __T(" Q ") }));
		//j1u1->draw(pDC, &bluePen);
		CVertex *u1t1 = new CVertex(new RayConstraintRelation(j1u1, PointOnLinePosition(LineStOrEd::END), -50, 6, { __T("G'"), __T(" Q ") }));
		//u1t1->draw(pDC, &bluePen);

		CVertex *t1s1 = new CVertex(new RayConstraintRelation(u1t1, PointOnLinePosition(LineStOrEd::END),90, -(bodyLength - backLength), { __T("G'"), __T(" Q ") }));
		//t1s1->draw(pDC, &bluePen);

		CVertex *i1s1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(ribLength - 4)), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, LineStOrEd::START));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, -6)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, -10)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x1, PointOnLinePosition(LineStOrEd::END, -2)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::START, -16)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s1, PointOnLinePosition(LineStOrEd::START, -16)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(u1t1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(t1s1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);
	/*	fgh6->draw(pDC, &bluePen);*/

		//10 绘制左罗纹线。  
		CVertex *i1v1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(ribLength-4)), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, LineStOrEd::START));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, -4)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, -8)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x1, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s1, PointOnLinePosition(LineStOrEd::START, -16)));
		
		CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		fgh7->draw(pDC, &redPen);
		//fgh7->draw(pDC, &bluePen);

		CVertex *i1 = new CVertex(new RayConstraintRelation(i1s, PointOnLinePosition(LineStOrEd::START,-16), 100, -48, { __T("G'"), __T(" Q ") }));
		i1->draw(pDC, &redPen1);
		//i1->draw(pDC, &bluePen);



		CVertex *n1 = new CVertex(new LineAndLineConstraintRelation(on1, PointOnLinePosition(LineStOrEd::START, 0), g1x1, PointOnLinePosition(LineStOrEd::END, 2),  { __T("B"), __T("C") }));
		n1->draw(pDC, &redPen1);

		////绘制前领窝线――辅助线
		//CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3, 15, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////ig->drawWithLabel(pDC, &bluePen);
		//CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2, 18, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////jk->drawWithLabel(pDC, &bluePen);
		//CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1, 14.5, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////l->drawWithLabel(pDC, &bluePen);
		////lz->draw(pDC, &bluePen);

	 //  // 绘制左om 
		//CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////mm1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////om1->drawWithLabel(pDC, &bluePen);

		////绘制前领窝
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		//CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		//fgh5->draw(pDC, &redPen);

		////绘制前领窝――内侧线
		//CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//mz->draw(pDC, &redPen1);

		////绘制前领窝――外侧线
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2)));
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		//CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		//fgh6->draw(pDC, &redPen);



		//// 绘制中间大褶皱――辅助线

		//// 绘制左om 
		//CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////pp1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////op1->drawWithLabel(pDC, &bluePen);

		//// 绘制中间大褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		////verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10)));
		//CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		//fgh7->draw(pDC, &redPen1);

		//// 绘制中间小褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		////verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4)));
		//CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		//fgh8->draw(pDC, &redPen1);


		//// 旁边褶皱 ――辅助线

		//// 绘制左om 
		//CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////tt1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////ot1->drawWithLabel(pDC, &bluePen);

		//CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////qq1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////oq1->drawWithLabel(pDC, &bluePen);

		//// 绘制左om 
		//CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////rr1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////or1->drawWithLabel(pDC, &bluePen);

		//// 绘制左om 
		//CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////ss1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////os1->drawWithLabel(pDC, &bluePen);


		//// 旁边褶皱――右边第一条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18)));
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16)));
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12)));
		//CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		//fgh9->draw(pDC, &redPen1);
		//// 旁边褶皱――左边第一条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18)));
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16)));
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12)));
		//CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		//fghR6->draw(pDC, &redPen1);



		////  旁边褶皱――右边第二条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15)));
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14)));
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9)));
		//CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		//fgh11->draw(pDC, &redPen1);
		////  旁边褶皱――左边第二条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15)));
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14)));
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9)));
		////verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		////verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		//CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		//fgh12->draw(pDC, &redPen1);

		//// 绘制中间第3条褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8)));
		//CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		//fgh13->draw(pDC, &redPen1);

	}
	void static TestDraw_SideKnitting_2D_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 50) + offset;
		orig = originPoint;

		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		// 参数
		//double bodyLength = para.m_bodyLength;    // 衣长
		//double bustGirth = para.m_bustGirth;    // 胸围 

		//double shoulderWidth = para.m_shouldWidth; //肩宽
		//double backLength = para.m_backLength;   // 背长

		//double waistGirth = para.m_waistGirth; // 腰围
		//double hipGirth = para.m_hipGirth;    // 臀围
		//double hemGirth = para.m_hemGirth;  //下摆围

		//double ribLength = para.m_ribLength;// 罗纹长
		//double ribGirth = para.m_ribWidth;// 罗纹宽

		//double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		//double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;



		//// 含参数变量
		//double rectWidthV_Body = bustGirth / 2;
		//double rectLengthV_Body = bodyLength;

		//double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		//double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		//double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		//double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		//double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		//double frontShouldAngle = 20;
		//double backShouldAngle = 20;
		//double hipLength = 18;// 腰长  腰节线到臀围线的距离

		//bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		//COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen bluePen1;
		bluePen1.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);
		
			/*p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/
	


	    //2 绘制侧缝线
	  	CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("H"), __T("J'") }), CString("HJ'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(10, 10));
		hj1->draw(pDC, &bluePen1);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("U"), __T("J'") }));
		//j1u->drawWithLabel(pDC, &redPen);
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T("T") }));
		//j1t->drawWithLabel(pDC, &redPen);
		j1t->draw(pDC, &redPen);

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("X"), __T("G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		g1x->draw(pDC, &bluePen1);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T("Q") }));
		//g1q->drawWithLabel(pDC, &bluePen);
		g1q->draw(pDC, &bluePen1);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		hy->draw(pDC, &bluePen1);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);
		hp->draw(pDC, &bluePen1);

		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));
		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		h1w->draw(pDC, &bluePen1);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);
		h1r->draw(pDC, &bluePen1);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		i1v->draw(pDC, &bluePen1);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);
		i1s->draw(pDC, &bluePen1);


		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5, { __T("B'"), __T("E'") }), CString("B'E'"));
		b1e1->draw(pDC, &bluePen1);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5), { __T("C'"), __T("F'") }), CString("C'F'"));
		c1f1->draw(pDC, &bluePen1);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("C"), __T("A'") }), CString("CA'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		ca1->draw(pDC, &bluePen1);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("C'"), __T("A2") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);
		md1->draw(pDC, &bluePen1);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);
		aa1->draw(pDC, &bluePen1);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("A"), __T("B") }));
		//ab->drawWithLabel(pDC, &redPen, CSize(10, 10));
		ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("B"), __T("C") }));
		bc->draw(pDC, &redPen);
		//bc->drawWithLabel(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 10), Quadrant::THREE, { __T("M"), __T("N") }));
		mn->draw(pDC, &redPen);
		//mn->drawWithLabel(pDC, &redPen);

		//11 绘制右后领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 10), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		no->draw(pDC, &redPen);
		//no->draw(pDC, &greenPen);
		

		//18 绘制后中线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制后中线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制后中线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);
		//18 绘制后中线4
		CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
		//wv->drawWithLabel(pDC, &redPen);
		wv->draw(pDC, &redPen);
		//19 绘制后中线5
		CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
		//vu->drawWithLabel(pDC, &redPen);
		vu->draw(pDC, &redPen);


		//19 绘制前中线1
		CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::START, hp, LineStOrEd::END, { __T("P"), __T("O") }));
		//np->drawWithLabel(pDC, &redPen);
		np->draw(pDC, &redPen);
	
		//19 绘制前中线1 胸腰
		CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
		//pq->drawWithLabel(pDC, &redPen);
		pq->draw(pDC, &redPen);
		//19 绘制前中线1 腰臀
		CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
		//qr->drawWithLabel(pDC, &redPen);
		qs->draw(pDC, &redPen);
		
		//19 绘制前中线1
		CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
		//rs->drawWithLabel(pDC, &redPen);
		rs->draw(pDC, &redPen);
		
		//19 绘制前中线1
		CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		st->draw(pDC, &redPen);


		// 绘制胸前装饰
		//CVertex *to1 = new CVertex(new RayConstraintRelation(no, PointOnLinePosition(LineStOrEd::END, 0), -90, j1t, { __T("N"), __T("O") }));
		////no->drawWithLabel(pDC, &redPen);
		//to1->draw(pDC, &redPen);

		CVertex *no1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen); 胸围
		//no->draw(pDC, &redPen);
	

		CVertex *no2 = new CVertex(new RayConstraintRelation(g1q, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no->draw(pDC, &redPen);
	
	   CVertex *no3 = new CVertex(new RayConstraintRelation(h1r, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no->draw(pDC, &redPen);

		CVertex *no4 = new CVertex(new RayConstraintRelation(i1s, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no4->draw(pDC, &redPen);
		
		CVertex *no5 = new CVertex(new RayConstraintRelation(j1t, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		no5->draw(pDC, &redPen);


		// 绘制装饰线1，2,3,4
		CVertex *oo1 = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, no1, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo1->draw(pDC, &redPen);

		CVertex *oo2 = new CVertex(new LineAndLineConstraintRelation(no1, LineStOrEd::END, no2, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo2->draw(pDC, &redPen);

		CVertex *oo3 = new CVertex(new LineAndLineConstraintRelation(no2, LineStOrEd::END, no3, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo3->draw(pDC, &redPen);

		CVertex *oo4 = new CVertex(new LineAndLineConstraintRelation(no3, LineStOrEd::END, no4, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo4->draw(pDC, &redPen);

		CVertex *oo5 = new CVertex(new LineAndLineConstraintRelation(no4, LineStOrEd::END, no5, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo5->draw(pDC, &redPen);



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("A"), __T("B") }));
		//gh->drawWithLabel(pDC, &redPen);
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("A"), __T("B") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->draw(pDC, &redPen);

	}
	void static TestDraw_SideKnitting_2D_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {


		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;

		//// 参数
		//double bodyLength = para.m_bodyLength;    // 衣长
		//double bustGirth = para.m_bustGirth;    // 胸围 

		//double shoulderWidth = para.m_shouldWidth; //肩宽
		//double backLength = para.m_backLength;   // 背长

		//double waistGirth = para.m_waistGirth; // 腰围
		//double hipGirth = para.m_hipGirth;    // 臀围
		//double hemGirth = para.m_hemGirth;  //下摆围

		//double ribLength = para.m_ribLength;// 罗纹长
		//double ribGirth = para.m_ribWidth;// 罗纹宽

		//double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		//double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		//// 含参数变量
		//double rectWidthV_Body = bustGirth / 2;
		//double rectLengthV_Body = bodyLength;

		//double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		//double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		//double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		//double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		//double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		//double frontShouldAngle = 20;
		//double backShouldAngle = 20;
		//double hipLength = 18;// 腰长  腰节线到臀围线的距离

		//bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		double bodyLength = para.m_bodyLength * para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth * para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth * para.m_ratio; //肩宽
		double backLength = para.m_backLength * para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth * para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth * para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth * para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength * para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth * para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5* para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		
		COLORREF color = para.m_color;
		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen bluePen1;
		bluePen1.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(1200, 50) + offset;
		orig = originPoint;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

	/*	p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		s1r1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);*/



		//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("H"), __T("J'") }), CString("HJ'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(10, 10));
		hj1->draw(pDC, &bluePen1);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("U"), __T("J'") }));
		//j1u->drawWithLabel(pDC, &redPen);
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T("T") }));
		//j1t->drawWithLabel(pDC, &redPen);
		j1t->draw(pDC, &redPen);

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("X"), __T("G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		g1x->draw(pDC, &bluePen1);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T("Q") }));
		//g1q->drawWithLabel(pDC, &bluePen);
		g1q->draw(pDC, &bluePen1);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		hy->draw(pDC, &bluePen1);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);
		hp->draw(pDC, &bluePen1);

		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));
		////if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		h1w->draw(pDC, &bluePen1);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);
		h1r->draw(pDC, &bluePen1);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		i1v->draw(pDC, &bluePen1);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);
		i1s->draw(pDC, &bluePen1);


		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5, { __T("B'"), __T("E'") }), CString("B'E'"));
		b1e1->draw(pDC, &bluePen1);
		//b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5), { __T("C'"), __T("F'") }), CString("C'F'"));
		c1f1->draw(pDC, &bluePen1);
		//c1f1->draw(pDC, &bluePen);

		//9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, backCollarWidth / 2, -backCollarWidth / 6, { __T("C"), __T("A'") }), CString("CA'")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		ca1->draw(pDC, &bluePen1);
		//8 绘制右后领深线 
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body - frontCollarWidth / 2, -backCollarWidth / 6, { __T("C'"), __T("A2") }), CString("C'A2")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);
		md1->draw(pDC, &bluePen1);

		//10 绘制左后领宽线，  
		CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, ca1, LineStOrEd::END, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);
		aa1->draw(pDC, &bluePen1);

		//14 绘制左后领窝直线，  
		CVertex *ab = new CVertex(new LineAndLineConstraintRelation(p1s1, LineStOrEd::START, aa1, LineStOrEd::ONE_THIRD, { __T("A"), __T("B") }));
		//ab->drawWithLabel(pDC, &redPen, CSize(10, 10));
		ab->draw(pDC, &redPen);

		//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(aa1, LineStOrEd::ONE_THIRD, ca1, LineStOrEd::START, Quadrant::FOUR, { __T("B"), __T("C") }));
		bc->draw(pDC, &redPen);
		//bc->drawWithLabel(pDC, &redPen);
		//13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
		CVertex *mn = new CVertex(new ArcAndLineConstraintRelation(md1, LineStOrEd::START, q1r1, PointOnLinePosition(LineStOrEd::START, 10), Quadrant::THREE, { __T("M"), __T("N") }));
		mn->draw(pDC, &redPen);
		//mn->drawWithLabel(pDC, &redPen);

		//11 绘制右后领窝弧线延长线 
		CVertex *no = new CVertex(new RayConstraintRelation(q1r1, PointOnLinePosition(LineStOrEd::START, 10), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		no->draw(pDC, &redPen);

		//18 绘制后中线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制后中线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制后中线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制后中线4
		CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
		//wv->drawWithLabel(pDC, &redPen);
		wv->draw(pDC, &redPen);
		//19 绘制后中线5
		CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
		//vu->drawWithLabel(pDC, &redPen);
		vu->draw(pDC, &redPen);



		//19 绘制前中线1
		CVertex *np = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::START, hp, LineStOrEd::END, { __T("P"), __T("O") }));
		//np->drawWithLabel(pDC, &redPen);
		np->draw(pDC, &redPen);

		//19 绘制前中线1
		CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
		//pq->drawWithLabel(pDC, &redPen);
		pq->draw(pDC, &redPen);
		//19 绘制前中线1
		CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
		//qr->drawWithLabel(pDC, &redPen);
		qs->draw(pDC, &redPen);

		//19 绘制前中线1
		CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
		//rs->drawWithLabel(pDC, &redPen);
		rs->draw(pDC, &redPen);

		//19 绘制前中线1
		CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		st->draw(pDC, &redPen);


		// 绘制胸前装饰
		//CVertex *to1 = new CVertex(new RayConstraintRelation(no, PointOnLinePosition(LineStOrEd::END, 0), -90, j1t, { __T("N"), __T("O") }));
		////no->drawWithLabel(pDC, &redPen);
		//to1->draw(pDC, &redPen);

//		CVertex *oo1 = new CVertex(new RayConstraintRelation(no, PointOnLinePosition(LineStOrEd::END, 0), -90, j1t, { __T("N"), __T("O") }));
//		//no->drawWithLabel(pDC, &redPen);
//		oo1->draw(pDC, &redPen);
//
//		CVertex *to1 = new CVertex(new RayConstraintRelation(j1t, PointOnLinePosition(LineStOrEd::END, 0), 0, oo1, { __T("N"), __T("O") }));
//		//no->drawWithLabel(pDC, &redPen);
//		to1->draw(pDC, &redPen);



		CVertex *no1 = new CVertex(new RayConstraintRelation(hp, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen); 胸围
		//no1->draw(pDC, &bluePen);


		CVertex *no2 = new CVertex(new RayConstraintRelation(g1q, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no->draw(pDC, &redPen);

		CVertex *no3 = new CVertex(new RayConstraintRelation(h1r, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no3->draw(pDC, &redPen);


		CVertex *no4 = new CVertex(new RayConstraintRelation(i1s, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		//no->draw(pDC, &redPen);


		CVertex *no5 = new CVertex(new RayConstraintRelation(j1t, PointOnLinePosition(LineStOrEd::END, 0), 0, 20, { __T("N"), __T("O") }));
		//no->drawWithLabel(pDC, &redPen);
		no5->draw(pDC, &redPen);



		// 绘制装饰线1，2,3,4
		CVertex *oo1 = new CVertex(new LineAndLineConstraintRelation(no, LineStOrEd::END, no1, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo1->draw(pDC, &redPen);

		CVertex *oo2 = new CVertex(new LineAndLineConstraintRelation(no1, LineStOrEd::END, no2, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo2->draw(pDC, &redPen);

		CVertex *oo3 = new CVertex(new LineAndLineConstraintRelation(no2, LineStOrEd::END, no3, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo3->draw(pDC, &redPen);

		CVertex *oo4 = new CVertex(new LineAndLineConstraintRelation(no3, LineStOrEd::END, no4, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo4->draw(pDC, &redPen);

		CVertex *oo5 = new CVertex(new LineAndLineConstraintRelation(no4, LineStOrEd::END, no5, LineStOrEd::END, { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		oo5->draw(pDC, &redPen);



		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(ce, PointOnLinePosition(LineStOrEd::END, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("A"), __T("B") }));
		//gh->drawWithLabel(pDC, &redPen);
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("A"), __T("B") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->draw(pDC, &redPen);

	}


	// 2 侧向编织――上衣2――2D+3D
	void static TestDraw_SideKnitting_3D_Style2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(200, 100) + offset;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);




		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);



		//绘制前领窝线――辅助线
		CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3, 15, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ig->drawWithLabel(pDC, &bluePen);
		CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2, 18, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//jk->drawWithLabel(pDC, &bluePen);
		CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1, 14.5, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//l->drawWithLabel(pDC, &bluePen);
		//lz->draw(pDC, &bluePen);

	   // 绘制左om 
		CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//mm1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//om1->drawWithLabel(pDC, &bluePen);

		//绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);

		//绘制前领窝――内侧线
		CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		mz->draw(pDC, &redPen1);

		//绘制前领窝――外侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 绘制中间大褶皱――辅助线

		// 绘制左om 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//pp1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//op1->drawWithLabel(pDC, &bluePen);

		// 绘制中间大褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5)));
		verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10)));
		CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		fgh7->draw(pDC, &redPen1);

		// 绘制中间小褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3)));
		verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4)));
		CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		fgh8->draw(pDC, &redPen1);


		// 旁边褶皱 ――辅助线

		// 绘制左om 
		CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//tt1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//ot1->drawWithLabel(pDC, &bluePen);

		CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//qq1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//oq1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//rr1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//or1->drawWithLabel(pDC, &bluePen);

		// 绘制左om 
		CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//ss1->drawWithLabel(pDC, &bluePen);
		// 绘制右om 
		CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//os1->drawWithLabel(pDC, &bluePen);


		// 旁边褶皱――右边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16)));
		verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		fgh9->draw(pDC, &redPen1);
		// 旁边褶皱――左边第一条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		fghR6->draw(pDC, &redPen1);



		//  旁边褶皱――右边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9)));
		CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		fgh11->draw(pDC, &redPen1);
		//  旁边褶皱――左边第二条侧褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		//verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		fgh12->draw(pDC, &redPen1);

		// 绘制中间第3条褶皱
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8)));
		CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		fgh13->draw(pDC, &redPen1);

	}
	void static TestDraw_SideKnitting_2D_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {


		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;
		CPoint1 originPoint = CPoint1(580, 120) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	/*	double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);*/

		double extraValue = 8;
		double backCollarWidth = bustGirth / 2  - 8;
		double frontCollarWidth = bustGirth / 2 + extraValue - 8;


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double collarDepth = 8;//
	
		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	    //2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("H"), __T("J'") }), CString("HJ'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(10, 10));
		hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4 + extraValue, { __T("U"), __T("J'") }));
		//j1u->drawWithLabel(pDC, &redPen);
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4 + extraValue, { __T("J'"), __T("T") }));
		j1t->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("X"), __T("G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4 + extraValue, { __T("G'"), __T("Q") }));
		//g1q->drawWithLabel(pDC, &bluePen);
		g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + extraValue, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);
		hp->draw(pDC, &bluePen);

		//new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		//if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1w->draw(pDC, &bluePen);
		//h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4 + extraValue, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4 + extraValue, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);
		i1s->draw(pDC, &bluePen);


		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5, { __T("B'"), __T("E'") }), CString("B'E'"));
		//b1e1->drawWithLabel(pDC, &bluePen);
		b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5), { __T("C'"), __T("F'") }), CString("C'F'"));
		//c1f1->drawWithLabel(pDC, &bluePen);
	    c1f1->draw(pDC, &bluePen);

		// 辅助线HE
		CVertex *he = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 90, -armHoleDepth, { __T("N"), __T("O") }));
		//he->draw(pDC, &greenPen);


		//18 绘制后中线1

		if (isShortClothes == true)
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &bluePen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			vu->draw(pDC, &redPen);
			//vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}

		else

		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			ay->draw(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			//xw->drawWithLabel(pDC, &redPen);
			xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			//op->drawWithLabel(pDC, &redPen);
			op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);
		}

	
		
		// 绘制袖窿

		// 30  绘制左袖窿弧线 3---曲线法  
	/*	std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(he, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(b1e1, LineStOrEd::TWO_THIRDS));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 1.5)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(c1f1, LineStOrEd::TWO_THIRDS));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(he, LineStOrEd::START));
		CVertex *fgh = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		fgh->draw(pDC, &redPen);*/



		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(he, PointOnLinePosition(LineStOrEd::START, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("A"), __T("B") }));
		//gh->drawWithLabel(pDC, &redPen);
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, he, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("A"), __T("B") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->draw(pDC, &redPen);

	
	    // 绘制领子
		CVertex *p1a = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, p1q1, PointOnLinePosition(LineStOrEd::START, 4), { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		p1a->draw(pDC, &redPen);

		CVertex *ab = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, 4), 90, -collarDepth, { __T("J'"), __T("T") }));
		ab->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);
		CVertex *bc = new CVertex(new RayConstraintRelation(ab, PointOnLinePosition(LineStOrEd::START, 0), 0, (backCollarWidth + frontCollarWidth)/2, { __T("J'"), __T("T") }));
		//bc->drawWithLabel(pDC, &redPen);
		j1t->draw(pDC, &redPen);
		CVertex *cd = new CVertex(new RayConstraintRelation(bc, PointOnLinePosition(LineStOrEd::END, 0), 90, collarDepth, { __T("J'"), __T("T") }));
		//cd->drawWithLabel(pDC, &redPen);
		j1t->draw(pDC, &redPen);

		   // 绘制衣领分割线
		CVertex *ad = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::END, cd, PointOnLinePosition(LineStOrEd::END, 0), { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		ad->draw(pDC, &bluePen);

	}
	void static TestDraw_SideKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset/*,std::map<CString, CVertex*> & cVer_map */) {


		//const double bodyLength = 80; // 衣长
		//const double bust = 84;  //  胸围
		//const double waist = 66; // 腰围
		//const double hip = 60;   // 臀围
		//const double backLength = 41;  //背长  是有点问题的。
		//const double hem = 70;   // 下摆围

		//const double shoulderWidth = 36; // 肩宽

		//const double backBust = bust / 2 + 8;
		//const double frontBust = bust / 2 + 15;
		CPoint1 originPoint = CPoint1(1000, 120) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

	/*	double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);*/

		double extraValue = 8;
		double backCollarWidth = bustGirth / 2 - 8;
		double frontCollarWidth = bustGirth / 2 + extraValue - 8;


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double collarDepth = 8;//

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		COLORREF color = para.m_color;

		//将获取到的COLORREF类型分解为uchar类型 OnC   
		BYTE r = GetRValue(color);
		BYTE g = GetGValue(color);
		BYTE b = GetBValue(color);

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(r, g, b));

		//	CPen redPen;
		//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(r, g, b));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);
	*/


	//2 绘制侧缝线
		CVertex *hj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(bodyLength - armHoleDepth), { __T("H"), __T("J'") }), CString("HJ'"));
		//hj1->drawWithLabel(pDC, &bluePen, CSize(10, 10));
		hj1->draw(pDC, &bluePen);
		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4 + extraValue, { __T("U"), __T("J'") }));
		//j1u->drawWithLabel(pDC, &redPen);
		j1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4 + extraValue, { __T("J'"), __T("T") }));
		j1t->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T("X"), __T("G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		g1x->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4 + extraValue, { __T("G'"), __T("Q") }));
		//g1q->drawWithLabel(pDC, &bluePen);
		g1q->draw(pDC, &bluePen);

		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		hy->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 0, bustGirth / 4 + extraValue, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);
		hp->draw(pDC, &bluePen);

		//new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		//if (hipLength )

		//8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		h1w->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4 + extraValue, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。    
		CVertex *i1v = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		i1v->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4 + extraValue, { __T("I'"), __T("S") }));
		//i1s->drawWithLabel(pDC, &bluePen);
		i1s->draw(pDC, &bluePen);


		//12 绘制背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *b1e1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hy, backWidth - 1.5, { __T("B'"), __T("E'") }), CString("B'E'"));
		//b1e1->drawWithLabel(pDC, &bluePen);
		b1e1->draw(pDC, &bluePen);
		//13 绘制胸宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *c1f1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, hp, bustGirth / 2 - (chestWidth - 1.5), { __T("C'"), __T("F'") }), CString("C'F'"));
		//c1f1->drawWithLabel(pDC, &bluePen);
		c1f1->draw(pDC, &bluePen);

		// 辅助线HE
		CVertex *he = new CVertex(new RayConstraintRelation(hj1, PointOnLinePosition(LineStOrEd::START, 0), 90, -armHoleDepth, { __T("N"), __T("O") }));
		//he->draw(pDC, &greenPen);


		//18 绘制后中线1

		if (isShortClothes == true)
		{
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xw = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, h1w, LineStOrEd::START, { __T("X"), __T("W") }));
			//xw->drawWithLabel(pDC, &redPen);
			xw->draw(pDC, &redPen);
			//18 绘制后中线4
			CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *op = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			//op->drawWithLabel(pDC, &redPen);
			op->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qr = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qr->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			rs->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);
		}
		else
		{
			//18 绘制后中线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, hy, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(hy, LineStOrEd::START, g1x, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(g1x, LineStOrEd::START, i1v, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			////18 绘制后中线4
			//CVertex *wv = new CVertex(new LineAndLineConstraintRelation(h1w, LineStOrEd::START, i1v, LineStOrEd::START, { __T("W"), __T("V") }));
			//wv->drawWithLabel(pDC, &redPen);
			////wv->draw(pDC, &redPen);
			//19 绘制后中线5
			CVertex *vu = new CVertex(new LineAndLineConstraintRelation(i1v, LineStOrEd::START, j1u, LineStOrEd::START, { __T("V"), __T("U") }));
			//vu->drawWithLabel(pDC, &redPen);
			vu->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *np = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::END, hp, LineStOrEd::END, { __T("P"), __T("O") }));
			//np->drawWithLabel(pDC, &redPen);
			np->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *pq = new CVertex(new LineAndLineConstraintRelation(hp, LineStOrEd::END, g1q, LineStOrEd::END, { __T("Q"), __T("P") }));
			//pq->drawWithLabel(pDC, &redPen);
			pq->draw(pDC, &redPen);
			//19 绘制前中线1
			CVertex *qs = new CVertex(new LineAndLineConstraintRelation(g1q, LineStOrEd::END, i1s, LineStOrEd::END, { __T("Q"), __T("R") }));
			//qr->drawWithLabel(pDC, &redPen);
			qs->draw(pDC, &redPen);

			//19 绘制前中线1
			//CVertex *rs = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1s, LineStOrEd::END, { __T("R"), __T("S") }));
			//rs->drawWithLabel(pDC, &redPen);
			////rs->draw(pDC, &redPen);

			//19 绘制前中线1
			CVertex *st = new CVertex(new LineAndLineConstraintRelation(i1s, LineStOrEd::END, j1t, LineStOrEd::END, { __T("S"), __T("T") }));
			//st->drawWithLabel(pDC, &redPen);
			st->draw(pDC, &redPen);

		}



		// 绘制袖窿

		// 30  绘制左袖窿弧线 3---曲线法  
	/*	std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(he, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(b1e1, LineStOrEd::TWO_THIRDS));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 1.5)));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(c1f1, LineStOrEd::TWO_THIRDS));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(he, LineStOrEd::START));
		CVertex *fgh = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		fgh->draw(pDC, &redPen);*/



		//15 绘制左袖窿，
		CVertex *ef = new CVertex(new ArcAndLineConstraintRelation(he, PointOnLinePosition(LineStOrEd::START, 0), b1e1, LineStOrEd::TWO_THIRDS, Quadrant::TWO, { __T("B"), __T("C") }));
		ef->draw(pDC, &redPen);
		//ef->drawWithLabel(pDC, &redPen);
		CVertex *fg = new CVertex(new ArcAndLineConstraintRelation(b1e1, LineStOrEd::TWO_THIRDS, hy, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THREE, { __T("B"), __T("C") }));
		fg->draw(pDC, &redPen);
		//fg->drawWithLabel(pDC, &redPen);
		CVertex *gh = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hy, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("A"), __T("B") }));
		//gh->drawWithLabel(pDC, &redPen);
		gh->draw(pDC, &redPen);

		//15 绘制右袖窿， 线线关系 
		CVertex *ej = new CVertex(new ArcAndLineConstraintRelation(hp, PointOnLinePosition(LineStOrEd::START, 1.5), c1f1, LineStOrEd::TWO_THIRDS, Quadrant::FOUR, { __T("B"), __T("C") }));
		ej->draw(pDC, &redPen);
		//ej->drawWithLabel(pDC, &redPen);
		CVertex *ji = new CVertex(new ArcAndLineConstraintRelation(c1f1, LineStOrEd::TWO_THIRDS, he, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		ji->draw(pDC, &redPen);
		//ji->drawWithLabel(pDC, &redPen);
		CVertex *ih = new CVertex(new LineAndLineConstraintRelation(hj1, LineStOrEd::START, hp, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("A"), __T("B") }));
		//ih->drawWithLabel(pDC, &redPen);
		ih->draw(pDC, &redPen);


		// 绘制领子
		CVertex *p1a = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, p1q1, PointOnLinePosition(LineStOrEd::START, 4), { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		p1a->draw(pDC, &redPen);

		CVertex *ab = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, 4), 90, -collarDepth, { __T("J'"), __T("T") }));
		ab->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);
		CVertex *bc = new CVertex(new RayConstraintRelation(ab, PointOnLinePosition(LineStOrEd::START, 0), 0, (backCollarWidth + frontCollarWidth) / 2, { __T("J'"), __T("T") }));
		bc->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);
		CVertex *cd = new CVertex(new RayConstraintRelation(bc, PointOnLinePosition(LineStOrEd::END, 0), 90, collarDepth, { __T("J'"), __T("T") }));
		cd->draw(pDC, &redPen);
		//j1t->drawWithLabel(pDC, &redPen);

		   // 绘制衣领分割线
		CVertex *ad = new CVertex(new LineAndLineConstraintRelation(ab, LineStOrEd::END, cd, PointOnLinePosition(LineStOrEd::END, 0), { __T("S"), __T("T") }));
		//st->drawWithLabel(pDC, &redPen);
		ad->draw(pDC, &bluePen);

	}


	// 2 侧向编织――裙子――2D+3D
	void static TestDraw_SideKnitting_3D_Style3(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);

		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		CPoint1 originPoint = CPoint1(200, 120) + offset;

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//2 绘制前后中线aa1
		CVertex *aj1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -bodyLength, { __T("H"), __T("J'") }), CString("HJ'"));
		//aj1->drawWithLabel(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *j1u = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		j1u->drawWithLabel(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *j1t = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//j1t->drawWithLabel(pDC, &bluePen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1x = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//g1x->drawWithLabel(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *g1q = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//g1q->drawWithLabel(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *hy = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//hy->drawWithLabel(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *hp = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//hp->drawWithLabel(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1w = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1w->drawWithLabel(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->drawWithLabel(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1v = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		//i1v->drawWithLabel(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1s = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1s->drawWithLabel(pDC, &bluePen);




		// 9 绘制左后领深线
		CVertex *ca1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//ca1->drawWithLabel(pDC, &bluePen);
		// 9 绘制右后领深线
		CVertex *md1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		//md1->drawWithLabel(pDC, &bluePen);


		//15 绘制左后领窝， 线线关系 
		//CVertex *ca = new CVertex(new ArcAndLineConstraintRelation(ca1, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::HALF,0), Quadrant::THREE, { __T("B"), __T("C") }));
		//ca->draw(pDC, &redPen);
		//15 绘制右后领窝， 线线关系
		//CVertex *am = new CVertex(new ArcAndLineConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, 0), md1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//am->draw(pDC, &redPen);


		//绘制后领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *ce = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		ce->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *mf = new CVertex(new RayConstraintRelation(md1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		mf->draw(pDC, &redPen);

		// 绘制左 ON  辅助线
		CVertex *nn1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		//nn1->drawWithLabel(pDC, &bluePen);
		// 绘制右 ON  辅助线
		CVertex *on1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 2 - 1.5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		//on1->drawWithLabel(pDC, &bluePen);



		//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		//CVertex *c1d = new CVertex(new ExpandConstraintRelation(mf, -_backShouldExpandLen, { __T("C1"), __T("D") }));
		//c1d->draw(pDC, &redPen);

		//	//绘制左右侧缝线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, 1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, LineStOrEd::END));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1t, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(j1u, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(h1w, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, LineStOrEd::START));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, -1.5)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::START, 0)));

		CVertex *fgh14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		fgh14->draw(pDC, &redPen);


		//绘制左袖窿――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 3.0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//绘制左袖窿内侧――内侧线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::END, -3.0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		//绘制前下摆
		CVertex *i1j1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 90, -2.5 *ribLength, { __T("V"), __T("I'") }));
		//i1j1->draw(pDC, &greenPen);

		// 辅助线
		CVertex *i1j2 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5 *ribLength, { __T("V"), __T("I'") }));
		i1j2->draw(pDC, &greenPen);

		CVertex *i1j2l = new CVertex(new RayConstraintRelation(i1j2, PointOnLinePosition(LineStOrEd::START, 0), 0, -15, { __T("V"), __T("I'") }));
		i1j2l->draw(pDC, &greenPen);
		CVertex *i1j2r = new CVertex(new RayConstraintRelation(i1j2, PointOnLinePosition(LineStOrEd::START, 0),0,15, { __T("V"), __T("I'") }));
		i1j2r->draw(pDC, &greenPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		
        verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(i1v, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(i1j2l, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(i1j1, LineStOrEd::START));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(i1j2r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(i1s, PointOnLinePosition(LineStOrEd::END, 0)));

		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);

		// 绘制领子
		//绘制上领线
		CVertex *aj11 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, 0), 90, -5, { __T("V"), __T("I'") }));
		aj11->draw(pDC, &greenPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ca1, LineStOrEd::START));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(aj11, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(md1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(hj1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);




		////绘制前领窝线――辅助线
		//CVertex *ig = new CVertex(new VerConstraintRelation(p1q1, 2 * rectWidthV_Body / 3 - 3, 15, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////ig->drawWithLabel(pDC, &bluePen);
		//CVertex *jk = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 - 2, 18, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////jk->drawWithLabel(pDC, &bluePen);
		//CVertex *lz = new CVertex(new VerConstraintRelation(p1q1, rectWidthV_Body / 2 + 1, 14.5, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
		////l->drawWithLabel(pDC, &bluePen);
		////lz->draw(pDC, &bluePen);

	 //  // 绘制左om 
		//CVertex *mm1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////mm1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *om1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth / 4 - 1), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////om1->drawWithLabel(pDC, &bluePen);

		////绘制前领窝
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, LineStOrEd::END));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(lz, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 9)));
		//verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(mf, PointOnLinePosition(LineStOrEd::START, 0)));
		//CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		//fgh5->draw(pDC, &redPen);

		////绘制前领窝――内侧线
		//CVertex *mz = new CVertex(new ArcAndLineConstraintRelation(lz, PointOnLinePosition(LineStOrEd::END, 0), mf, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//mz->draw(pDC, &redPen1);

		////绘制前领窝――外侧线
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ce, PointOnLinePosition(LineStOrEd::END, -2)));
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(jk, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(ig, PointOnLinePosition(LineStOrEd::END, 0)));
		//CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		//fgh6->draw(pDC, &redPen);



		//// 绘制中间大褶皱――辅助线

		//// 绘制左om 
		//CVertex *pp1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////pp1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *op1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////op1->drawWithLabel(pDC, &bluePen);

		//// 绘制中间大褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm7;
		////verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(mm1, PointOnLinePosition(LineStOrEd::END, - 10)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -9.5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(on1, PointOnLinePosition(LineStOrEd::START, 9.5)));
		//verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(om1, PointOnLinePosition(LineStOrEd::START, 10)));
		//CVertex *fgh7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm7));
		//fgh7->draw(pDC, &redPen1);

		//// 绘制中间小褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArm8;
		////verPointPairVecArm7.push_back(std::pair<CVertex*, PointOnLinePosition>(pp1, PointOnLinePosition(LineStOrEd::END, -4)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -3)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 6)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 3)));
		//verPointPairVecArm8.push_back(std::pair<CVertex*, PointOnLinePosition>(op1, PointOnLinePosition(LineStOrEd::START, 4)));
		//CVertex *fgh8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArm8));
		//fgh8->draw(pDC, &redPen1);


		//// 旁边褶皱 ――辅助线

		//// 绘制左om 
		//CVertex *tt1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////tt1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *ot1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 5), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////ot1->drawWithLabel(pDC, &bluePen);

		//CVertex *qq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////qq1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *oq1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength - 4), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////oq1->drawWithLabel(pDC, &bluePen);

		//// 绘制左om 
		//CVertex *rr1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////rr1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *or1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 6), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////or1->drawWithLabel(pDC, &bluePen);

		//// 绘制左om 
		//CVertex *ss1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, -bustGirth / 4, { __T("V"), __T("I'") }));
		////ss1->drawWithLabel(pDC, &bluePen);
		//// 绘制右om 
		//CVertex *os1 = new CVertex(new RayConstraintRelation(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 8), 0, bustGirth / 4, { __T("V"), __T("I'") }));
		////os1->drawWithLabel(pDC, &bluePen);


		//// 旁边褶皱――右边第一条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL9;
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(hp, PointOnLinePosition(LineStOrEd::START, 18)));
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 16)));
		//verPointPairVecArmL9.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 12)));
		//CVertex *fgh9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL9));
		//fgh9->draw(pDC, &redPen1);
		//// 旁边褶皱――左边第一条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(hy, PointOnLinePosition(LineStOrEd::END, -18)));
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(tt1, PointOnLinePosition(LineStOrEd::END, -16)));
		//verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -12)));
		//CVertex *fghR6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		//fghR6->draw(pDC, &redPen1);



		////  旁边褶皱――右边第二条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 15)));
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(g1q, PointOnLinePosition(LineStOrEd::START, 14)));
		//verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 9)));
		//CVertex *fgh11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		//fgh11->draw(pDC, &redPen1);
		////  旁边褶皱――左边第二条侧褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -15)));
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -14)));
		//verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(ss1, PointOnLinePosition(LineStOrEd::END, -9)));
		////verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 12)));
		////verPointPairVecArmR5.push_back(std::pair<CVertex*, PointOnLinePosition>(os1, PointOnLinePosition(LineStOrEd::START, 6)));
		//CVertex *fgh12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		//fgh12->draw(pDC, &redPen1);

		//// 绘制中间第3条褶皱
		//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(qq1, PointOnLinePosition(LineStOrEd::END, -6)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(g1x, PointOnLinePosition(LineStOrEd::END, -3)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(aj1, PointOnLinePosition(LineStOrEd::START, backLength + 5)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(oq1, PointOnLinePosition(LineStOrEd::START, 6)));
		//verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(ot1, PointOnLinePosition(LineStOrEd::START, 8)));
		//CVertex *fgh13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		//fgh13->draw(pDC, &redPen1);

	}

	// 3 横向编织-款式1
	void static TestDrawV_TransverseKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(300, 320) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 0;
		double backShouldAngle = 0;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 0;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->drawWithLabel(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		//jj1->drawWithLabel(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->drawWithLabel(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->drawWithLabel(pDC, &bluePen);

		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->drawWithLabel(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//绘制前领窝辅助弧线ab1c1
	/*	CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &bluePen);*/

		//绘制左前领窝弧线ab1c1
		/*CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::THREE, { __T("B"), __T("C") }));
		bdf->draw(pDC, &redPen);*/

		//绘制右前领窝弧线ab1c1
		/*CVertex *bdf1 = new CVertex(new ArcAndLineConstraintRelation( aa1, PointOnLinePosition(LineStOrEd::START, 4), d1q1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		bdf1->draw(pDC, &redPen);*/


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);




		//绘制左袖

		//袖中线001
		CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		eo1->draw(pDC, &redPen);

		//袖肥jj1
		CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//rj1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
		//er->draw(pDC, &greenPen);

		// 左袖山留针线  
		CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//oh->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		f1ghi7->draw(pDC, &redPen);


		// 袖口
		CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		om1->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
		//jk1->draw(pDC, &redPen);




		// 左侧缝
		CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		kl1->draw(pDC, &redPen);
		CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		lm1->draw(pDC, &redPen);



		//绘制右袖
		  //袖中线001
		CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		e1o1->draw(pDC, &redPen);
		//袖肥jj1
		CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//r1j1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
		//e1r->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0,(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4,(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, (3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//oh1->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
		f1ghi8->draw(pDC, &redPen);

		// 袖口
		CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol11->draw(pDC, &redPen);
		// 袖口罗纹
		CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol12->draw(pDC, &redPen);
		//右腋下直栏
		CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		//j1k11->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l11->draw(pDC, &redPen);
		CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m11->draw(pDC, &redPen);

		// 后领窝
		CVertex * qq1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		qq1->draw(pDC, &redPen);





	}
	void static TestDrawV_TransverseKnitting_2D_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1300, 20) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double sleeveLength = para.m_sleeveLength; // 袖长
		double cuff = para.m_cuffGirth;

		// 含参数变量
		

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		//double rectWidthV_Sleeve = sleeveWidth;//原来是29
		//double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		double rectWidthV_Body = bodyLength;
		double rectLengthV_Body = bustGirth / 2 + 2 * sleeveLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);


        //3 绘制衣身下线。  backLength = bodyLength - hipLength;
		CVertex *a1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -sleeveLength, { __T("W"), __T("W'") }));
		a1->draw(pDC, &bluePen);

		//4 绘制衣身上线。  backLength = bodyLength - hipLength;
		CVertex *a2 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + bustGirth/2), { __T("W"), __T("W'") }));
		a2->draw(pDC, &bluePen);

		//4 领口下线。  backLength = bodyLength - hipLength;
		CVertex *a3 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + (bustGirth / 2-backCollarWidth)/2), { __T("W"), __T("W'") }));
		a3->draw(pDC, &bluePen);
		//4 领口上线。  backLength = bodyLength - hipLength;
		CVertex *a4 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + (bustGirth / 2 - backCollarWidth) / 2 + backCollarWidth), { __T("W"), __T("W'") }));
		a4->draw(pDC, &bluePen);

		// 袖口宽线
		CVertex *a5 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1,  cuff / 2, { __T("W"), __T("W'") }));
		a5->draw(pDC, &bluePen);

		// 下袖口罗纹
		CVertex *a6 = new CVertex(new ParaConstraintRelation(s1r1,p1s1, a5,  -ribLength, { __T("W"), __T("W'") }));
		a6->draw(pDC, &redPen);

		// 上袖口罗纹
		CVertex *a7 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, a5, -(rectLengthV_Body - ribLength), { __T("W"), __T("W'") }));
		a7->draw(pDC, &redPen);

		// 绘制下袖

		CVertex *b1 = new CVertex(new LineAndLineConstraintRelation(a3, LineStOrEd::START, a1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b1->draw(pDC, &redPen);

		CVertex *b2 = new CVertex(new LineAndLineConstraintRelation(a1, LineStOrEd::START, a6, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b2->draw(pDC, &redPen);
		CVertex *b3 = new CVertex(new LineAndLineConstraintRelation(a6, LineStOrEd::START, s1r1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b3->draw(pDC, &redPen);

		CVertex *b4 = new CVertex(new LineAndLineConstraintRelation(s1r1, LineStOrEd::START, a5, LineStOrEd::END, { __T("A"), __T("Q'") }));
		b4->draw(pDC, &redPen);

		CVertex *b5 = new CVertex(new LineAndLineConstraintRelation(a5, LineStOrEd::END, a6, LineStOrEd::END, { __T("A"), __T("Q'") }));
		b5->draw(pDC, &redPen);

		CVertex *b6 = new CVertex(new LineAndLineConstraintRelation(a6, LineStOrEd::END, a1, PointOnLinePosition(LineStOrEd::START, sleeveWidth/2), { __T("A"), __T("Q'") }));
		b6->draw(pDC, &redPen);

		//绘制衣身罗纹
		CVertex *a13 = new CVertex(new ParaConstraintRelation(q1r1,a1, a2, -ribLength, { __T("W"), __T("W'") }));
		a13->draw(pDC, &redPen);


		// 绘制衣身

		CVertex *c1 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2),a1, PointOnLinePosition(LineStOrEd::END, -ribLength),  { __T("A"), __T("Q'") }));
		c1->draw(pDC, &redPen);

		CVertex *c2 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::END, -ribLength), a1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		c2->draw(pDC, &redPen);

		CVertex *c3 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::END, 0), a2, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		c3->draw(pDC, &redPen);

		CVertex *c4 = new CVertex(new LineAndLineConstraintRelation(a2, PointOnLinePosition(LineStOrEd::END, 0), a13, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		c4->draw(pDC, &redPen);

		CVertex *c5 = new CVertex(new LineAndLineConstraintRelation(a13, PointOnLinePosition(LineStOrEd::START, 0), a2, PointOnLinePosition(LineStOrEd::START,sleeveWidth/2), { __T("A"), __T("Q'") }));
		c5->draw(pDC, &redPen);


		// 绘制上袖

		CVertex *d1 = new CVertex(new LineAndLineConstraintRelation(a4, LineStOrEd::START, a2, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d1->draw(pDC, &redPen);

		CVertex *d2 = new CVertex(new LineAndLineConstraintRelation(a2, LineStOrEd::START, a7, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d2->draw(pDC, &redPen);
		CVertex *d3 = new CVertex(new LineAndLineConstraintRelation(a7, LineStOrEd::START, p1q1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d3->draw(pDC, &redPen);

		CVertex *d4 = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, a5, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d4->draw(pDC, &redPen);

		CVertex *d5 = new CVertex(new LineAndLineConstraintRelation(a5, LineStOrEd::START, a7, LineStOrEd::END, { __T("A"), __T("Q'") }));
		d5->draw(pDC, &redPen);

		CVertex *d6 = new CVertex(new LineAndLineConstraintRelation(a7, LineStOrEd::END, a2, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), { __T("A"), __T("Q'") }));
		d6->draw(pDC, &redPen);

		// 绘制领窝2/3线 1/3
		CVertex *a14 = new CVertex(new ParaConstraintRelation(a3,p1s1, q1r1,  -backCollarWidth/3, { __T("W"), __T("W'") }));
		a14->draw(pDC, &bluePen);

		CVertex *a15 = new CVertex(new ParaConstraintRelation(a3, p1s1, q1r1, -2*backCollarWidth / 3, { __T("W"), __T("W'") }));
		a15->draw(pDC, &bluePen);

		// 绘制下弧线   直线 上弧线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(a3, PointOnLinePosition(LineStOrEd::START, 0), a14, PointOnLinePosition(LineStOrEd::START, backCollarWidth/6), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);
		CVertex *e2 = new CVertex(new LineAndLineConstraintRelation(a14, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), a15, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), { __T("A"), __T("Q'") }));
		e2->draw(pDC, &redPen);

		CVertex *e3 = new CVertex(new ArcAndLineConstraintRelation(a15, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), a4, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		e3->draw(pDC, &redPen);

		//CVertex *e4 = new CVertex(new LineAndLineConstraintRelation(a4, PointOnLinePosition(LineStOrEd::START, 0), a15, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), { __T("A"), __T("Q'") }));
		//e4->drawWithLabel(pDC, &greenPen);

	}
	void static TestDrawV_TransverseKnitting_2D_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(900, 20) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double sleeveLength = para.m_sleeveLength; // 袖长
		double cuff = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		//double rectWidthV_Sleeve = sleeveWidth;//原来是29
		//double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		double rectWidthV_Body = bodyLength;
		double rectLengthV_Body = bustGirth / 2 + 2 * sleeveLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);


		//3 绘制衣身下线。  backLength = bodyLength - hipLength;
		CVertex *a1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -sleeveLength, { __T("W"), __T("W'") }));
		a1->draw(pDC, &bluePen);

		//4 绘制衣身上线。  backLength = bodyLength - hipLength;
		CVertex *a2 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + bustGirth / 2), { __T("W"), __T("W'") }));
		a2->draw(pDC, &bluePen);

		//4 领口下线。  backLength = bodyLength - hipLength;
		CVertex *a3 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + (bustGirth / 2 - backCollarWidth) / 2), { __T("W"), __T("W'") }));
		a3->draw(pDC, &bluePen);
		//4 领口上线。  backLength = bodyLength - hipLength;
		CVertex *a4 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(sleeveLength + (bustGirth / 2 - backCollarWidth) / 2 + backCollarWidth), { __T("W"), __T("W'") }));
		a4->draw(pDC, &bluePen);

		// 袖口宽线
		CVertex *a5 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, cuff / 2, { __T("W"), __T("W'") }));
		a5->draw(pDC, &bluePen);

		// 下袖口罗纹
		CVertex *a6 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, a5, -ribLength, { __T("W"), __T("W'") }));
		a6->draw(pDC, &redPen);

		// 上袖口罗纹
		CVertex *a7 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, a5, -(rectLengthV_Body - ribLength), { __T("W"), __T("W'") }));
		a7->draw(pDC, &redPen);

		// 绘制下袖

		CVertex *b1 = new CVertex(new LineAndLineConstraintRelation(a3, LineStOrEd::START, a1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b1->draw(pDC, &redPen);

		CVertex *b2 = new CVertex(new LineAndLineConstraintRelation(a1, LineStOrEd::START, a6, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b2->draw(pDC, &redPen);
		CVertex *b3 = new CVertex(new LineAndLineConstraintRelation(a6, LineStOrEd::START, s1r1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		b3->draw(pDC, &redPen);

		CVertex *b4 = new CVertex(new LineAndLineConstraintRelation(s1r1, LineStOrEd::START, a5, LineStOrEd::END, { __T("A"), __T("Q'") }));
		b4->draw(pDC, &redPen);

		CVertex *b5 = new CVertex(new LineAndLineConstraintRelation(a5, LineStOrEd::END, a6, LineStOrEd::END, { __T("A"), __T("Q'") }));
		b5->draw(pDC, &redPen);

		CVertex *b6 = new CVertex(new LineAndLineConstraintRelation(a6, LineStOrEd::END, a1, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), { __T("A"), __T("Q'") }));
		b6->draw(pDC, &redPen);

		//绘制衣身罗纹
		CVertex *a13 = new CVertex(new ParaConstraintRelation(q1r1, a1, a2, -ribLength, { __T("W"), __T("W'") }));
		a13->draw(pDC, &redPen);


		// 绘制衣身

		CVertex *c1 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), a1, PointOnLinePosition(LineStOrEd::END, -ribLength), { __T("A"), __T("Q'") }));
		c1->draw(pDC, &redPen);

		CVertex *c2 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::END, -ribLength), a1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		c2->draw(pDC, &redPen);

		CVertex *c3 = new CVertex(new LineAndLineConstraintRelation(a1, PointOnLinePosition(LineStOrEd::END, 0), a2, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		c3->draw(pDC, &redPen);

		CVertex *c4 = new CVertex(new LineAndLineConstraintRelation(a2, PointOnLinePosition(LineStOrEd::END, 0), a13, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		c4->draw(pDC, &redPen);

		CVertex *c5 = new CVertex(new LineAndLineConstraintRelation(a13, PointOnLinePosition(LineStOrEd::START, 0), a2, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), { __T("A"), __T("Q'") }));
		c5->draw(pDC, &redPen);


		// 绘制上袖

		CVertex *d1 = new CVertex(new LineAndLineConstraintRelation(a4, LineStOrEd::START, a2, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d1->draw(pDC, &redPen);

		CVertex *d2 = new CVertex(new LineAndLineConstraintRelation(a2, LineStOrEd::START, a7, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d2->draw(pDC, &redPen);
		CVertex *d3 = new CVertex(new LineAndLineConstraintRelation(a7, LineStOrEd::START, p1q1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d3->draw(pDC, &redPen);

		CVertex *d4 = new CVertex(new LineAndLineConstraintRelation(p1q1, LineStOrEd::START, a5, LineStOrEd::START, { __T("A"), __T("Q'") }));
		d4->draw(pDC, &redPen);

		CVertex *d5 = new CVertex(new LineAndLineConstraintRelation(a5, LineStOrEd::START, a7, LineStOrEd::END, { __T("A"), __T("Q'") }));
		d5->draw(pDC, &redPen);

		CVertex *d6 = new CVertex(new LineAndLineConstraintRelation(a7, LineStOrEd::END, a2, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), { __T("A"), __T("Q'") }));
		d6->draw(pDC, &redPen);

		// 绘制领窝2/3线 1/3
		CVertex *a14 = new CVertex(new ParaConstraintRelation(a3, p1s1, q1r1, -backCollarWidth / 3, { __T("W"), __T("W'") }));
		a14->draw(pDC, &bluePen);

		CVertex *a15 = new CVertex(new ParaConstraintRelation(a3, p1s1, q1r1, -2 * backCollarWidth / 3, { __T("W"), __T("W'") }));
		a15->draw(pDC, &bluePen);

	
		// 绘制前领
		CVertex *f1 = new CVertex(new ArcAndLineConstraintRelation(a3, PointOnLinePosition(LineStOrEd::START, 0), a14, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), Quadrant::FOUR, { __T("B"), __T("C") }));
		f1->draw(pDC, &redPen);
		CVertex *f2 = new CVertex(new LineAndLineConstraintRelation(a14, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), a15, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), { __T("A"), __T("Q'") }));
		f2->draw(pDC, &redPen);

		CVertex *f3 = new CVertex(new ArcAndLineConstraintRelation(a15, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), a4, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		f3->draw(pDC, &redPen);


	}

	// 4 展开编织 
	void static TestDraw_UnfoldKnitting_3D_Style(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(240, 60) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = bustGirth/2;
		double rectLengthV_Body = bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		s1r1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);*/

	    // 绘制胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		//gg1->draw(pDC, &bluePen);

		// 绘制腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->draw(pDC, &bluePen);

		// 绘制后中线
		CVertex *zz1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, bustGirth / 4 , { __T("W"), __T("W'") }));
		//zz1->draw(pDC, &bluePen);

	
		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 4 - chestWidth, { __T("W"), __T("W'") }));
		//j0k->draw(pDC, &bluePen);
		// 右胸宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 4 + chestWidth, { __T("W"), __T("W'") }));
		//u0t->draw(pDC, &bluePen);


		// 后领宽-左
		CVertex *c1 = new CVertex(new RayConstraintRelation(zz1, LineStOrEd::START, 0, -(backCollarWidth/2-2), { __T("S'"), __T("R'") }));
		//c1->draw(pDC, &redPen);
		// 后领宽-右
		CVertex *cr = new CVertex(new RayConstraintRelation(zz1, LineStOrEd::START, 0, backCollarWidth / 2-2, { __T("S'"), __T("R'") }));
		//cr->draw(pDC, &redPen);


		//左后领-上 
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(c1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1,PointOnLinePosition(LineStOrEd::START, -2.5)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(cr, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//左后领-下 

		CVertex *b5 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, 2.5, { __T("W"), __T("W'") }));
		//b5->draw(pDC, &greenPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(b5, PointOnLinePosition(LineStOrEd::HALF, -6.5)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(b5, PointOnLinePosition(LineStOrEd::HALF, 6.5)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 翻领辅助线-胸围线上
		CVertex *b1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body / 6, { __T("W"), __T("W'") }));
		//b1->draw(pDC, &bluePen);
		CVertex *b2 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, 1 * rectLengthV_Body / 3, { __T("W"), __T("W'") }));
		//b2->draw(pDC, &bluePen);
		//腰下
		CVertex *b3 = new CVertex(new ParaConstraintRelation(ww1, p1s1, q1r1, 5, { __T("W"), __T("W'") }));
		//b3->draw(pDC, &bluePen);
		//腰上
		CVertex *b4 = new CVertex(new ParaConstraintRelation(ww1, p1s1, q1r1, -6, { __T("W"), __T("W'") }));
		//b4->draw(pDC, &bluePen);


		//肩线-左
		CVertex *s1 = new CVertex(new RayConstraintRelation(c1, LineStOrEd::START, -20, j0k, { __T("S'"), __T("R'") }));
		s1->draw(pDC, &redPen);
		//肩线-右
		CVertex *sr = new CVertex(new RayConstraintRelation(cr, LineStOrEd::END, 20, u0t, { __T("S'"), __T("R'") }));
		sr->draw(pDC, &redPen);

		//翻领-内-左
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(c1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, -6)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, -4.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, armHoleDepth+10)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

		//翻领-外-左
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(s1, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, -10)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, -9.5)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, -9.5)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b4, PointOnLinePosition(LineStOrEd::HALF, -8.5)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1, PointOnLinePosition(LineStOrEd::HALF,  -2.0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		//翻领-内-右
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(cr, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, 6)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, 4.5)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, 2.5)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 10)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b3, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//翻领-外-右
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(sr, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, 10)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, 9.5)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, 9.5)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b4, PointOnLinePosition(LineStOrEd::HALF, 8.5)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b3, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);


		// 左袖窿-直
		CVertex *f1 = new CVertex(new LineAndLineConstraintRelation(s1, LineStOrEd::START, j0k, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("A"), __T("Q'") }));
		f1->draw(pDC, &redPen);
		// 右袖窿-直
		CVertex *fr = new CVertex(new LineAndLineConstraintRelation(sr, LineStOrEd::END, u0t, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("A"), __T("Q'") }));
		fr->draw(pDC, &redPen);

		//左袖窿-弧 
		CVertex *fc1 = new CVertex(new ArcAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::START, 0), f1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		fc1->draw(pDC, &redPen);
		//右袖窿-弧 
		CVertex *fcr = new CVertex(new ArcAndLineConstraintRelation(fr, PointOnLinePosition(LineStOrEd::END, 0), gg1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		fcr->draw(pDC, &redPen);


		//左袖窿-内 
		CVertex *fi1 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, f1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		fi1->draw(pDC, &redPen);
		//右袖窿-内 
		CVertex *fir = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, fr, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		fir->draw(pDC, &redPen);


		// 侧缝线-左
		CVertex *ss1 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, p1s1, PointOnLinePosition(LineStOrEd::END, -3), { __T("A"), __T("Q'") }));
		ss1->draw(pDC, &redPen);
		// 侧缝线-右
		CVertex *ssr = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, q1r1, PointOnLinePosition(LineStOrEd::END, -2), { __T("A"), __T("Q'") }));
		ssr->draw(pDC, &redPen);


		// 前中线
		CVertex *ff = new CVertex(new LineAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, -2.5), b3, PointOnLinePosition(LineStOrEd::HALF, -2.5), { __T("A"), __T("Q'") }));
		ff->draw(pDC, &redPen);


		//左下摆线-弧 
		CVertex *h1 = new CVertex(new ArcAndLineConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, 0), ff, PointOnLinePosition(LineStOrEd::END, -2.5), Quadrant::THREE, { __T("B"), __T("C") }));		
		h1->draw(pDC, &redPen);
		//右下摆线-弧 
		CVertex *hr = new CVertex(new ArcAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, -2.5), ssr, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		hr->draw(pDC, &redPen);


		//口袋--上边线-左
		CVertex *pu = new CVertex(new RayConstraintRelation(b3, PointOnLinePosition(LineStOrEd::START, 3), 0, pocketWidth, { __T("S'"), __T("R'") }));
		pu->draw(pDC, &redPen);
		CVertex *pr = new CVertex(new RayConstraintRelation(pu, PointOnLinePosition(LineStOrEd::END, 0), 90, pocketLengh, { __T("S'"), __T("R'") }));
		pr->draw(pDC, &redPen);
		CVertex *pd = new CVertex(new RayConstraintRelation(pr, PointOnLinePosition(LineStOrEd::END, 0), 0, -pocketWidth, { __T("S'"), __T("R'") }));
		pd->draw(pDC, &redPen);
		CVertex *pl = new CVertex(new RayConstraintRelation(pd, PointOnLinePosition(LineStOrEd::START, 0), 90, -pocketLengh, { __T("S'"), __T("R'") }));
		pl->draw(pDC, &redPen);

		CVertex *p = new CVertex(new ParaConstraintRelation(pu, pr, pl, 2, { __T("W"), __T("W'") }));
		p->draw(pDC, &redPen);


		//口袋--上边线-右
		CVertex *pur = new CVertex(new RayConstraintRelation(b3, PointOnLinePosition(LineStOrEd::END, -3), 0, -pocketWidth, { __T("S'"), __T("R'") }));
		pur->draw(pDC, &redPen);
		CVertex *prr = new CVertex(new RayConstraintRelation(pur, PointOnLinePosition(LineStOrEd::END, 0), 90, pocketLengh, { __T("S'"), __T("R'") }));
		prr->draw(pDC, &redPen);
		CVertex *pdr = new CVertex(new RayConstraintRelation(prr, PointOnLinePosition(LineStOrEd::END, 0), 0, -pocketWidth, { __T("S'"), __T("R'") }));
		pdr->draw(pDC, &redPen);
		CVertex *plr = new CVertex(new RayConstraintRelation(pdr, PointOnLinePosition(LineStOrEd::START, 0), 90, -pocketLengh, { __T("S'"), __T("R'") }));
		plr->draw(pDC, &redPen);

		CVertex *pp = new CVertex(new ParaConstraintRelation(pur, prr, plr, 2, { __T("W"), __T("W'") }));
		pp->draw(pDC, &redPen);
	}
	void static TestDraw_UnfoldKnitting_2D1_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(100, 420) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量
	

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		

		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = bustGirth + 2* turnCollarWidth;
		double rectLengthV_Body = bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

			//p1q1->drawWithLabel(pDC, &greenPen);
			//p1s1->drawWithLabel(pDC, &greenPen);

			//s1r1->drawWithLabel(pDC, &greenPen);
			//q1r1->drawWithLabel(pDC, &greenPen);

		// 绘制胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth + 2,{ __T("W"), __T("W'") }));
		gg1->draw(pDC, &bluePen);
		// 绘制腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);


		// 绘制后中线
		CVertex *zz1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, bustGirth / 2 + turnCollarWidth,{ __T("W"), __T("W'") }));
		zz1->draw(pDC, &bluePen);

		// 左侧缝线
		CVertex *op = new CVertex(new ParaConstraintRelation(p1s1, gg1, s1r1, bustGirth / 4 + turnCollarWidth,{ __T("W"), __T("W'") }));
		op->draw(pDC, &bluePen);

		// 右侧缝线
		CVertex *o1p1 = new CVertex(new ParaConstraintRelation(p1s1, gg1, s1r1, 3 * bustGirth / 4 + turnCollarWidth,{ __T("W"), __T("W'") }));
		o1p1->draw(pDC, &bluePen);


		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, chestWidth+ turnCollarWidth, { __T("W"), __T("W'") }));
		j0k->draw(pDC, &bluePen);

		//// 左背宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 2 - backWidth + turnCollarWidth, { __T("W"), __T("W'") }));
		u0t->draw(pDC, &bluePen);

		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 2 + backWidth + turnCollarWidth, { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth  - chestWidth + turnCollarWidth, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);



		// 左前中线1
		CVertex *f1 = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, p1q1, PointOnLinePosition(LineStOrEd::START, 12), { __T("A"), __T("Q'") }));
		f1->draw(pDC, &redPen);
		// 前中线1
		CVertex *f2 = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, s1r1, PointOnLinePosition(LineStOrEd::START, 6), { __T("A"), __T("Q'") }));
		f2->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3 = new CVertex(new RayConstraintRelation(f1, LineStOrEd::END, 0, 5, { __T("S'"), __T("R'") }));
		f3->draw(pDC, &redPen);

		// 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(f3, LineStOrEd::END, 20, j0k, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 左前肩线2
		CVertex *f5 = new CVertex(new  ExpandConstraintRelation(f4,2, { __T("a"), __T("b") }));
		f5->draw(pDC, &redPen);

		
		// 左后肩线1
		CVertex *f6 = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth/2), 180-20, u0t, { __T("S'"), __T("R'") }));
		f6->draw(pDC, &redPen);
		// 左后肩线2
		CVertex *f7 = new CVertex(new  ExpandConstraintRelation(f6, 2 * PIXELPERCM, { __T("a"), __T("b") }));
		f7->draw(pDC, &redPen);

			// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(j0k, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u0t, LineStOrEd::END,180 + armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f5, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(j0k, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(op, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(u0t, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f7, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);
		
		
		
	
		//右前中线1
		CVertex *f1r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, p1q1, PointOnLinePosition(LineStOrEd::END, -12), { __T("A"), __T("Q'") }));
		f1r->draw(pDC, &redPen);
		// 前中线1
		CVertex *f2r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, s1r1, PointOnLinePosition(LineStOrEd::END, -6), { __T("A"), __T("Q'") }));
		f2r->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3r = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::START, 0, -5, { __T("S'"), __T("R'") }));
		f3r->draw(pDC, &redPen);

		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(f3r, LineStOrEd::START, 180 - 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		// 右前肩线2
		CVertex *f5r = new CVertex(new  ExpandConstraintRelation(f4r, 1.8 * PIXELPERCM, { __T("a"), __T("b") }));
		f5r->draw(pDC, &redPen);


		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 2), 20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new  ExpandConstraintRelation(f6r, 2, { __T("a"), __T("b") }));
		f7r->draw(pDC, &redPen);

		// 袖窿辅助线
		// 左前
		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);
		// 左后
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::END,360 - armAngle , vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(o1p1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

		// 绘制后领窝线
		
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(f6, PointOnLinePosition(LineStOrEd::END, 0), zz1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), Quadrant::THREE, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);

		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(zz1, PointOnLinePosition(LineStOrEd::START, backCollarWidth/6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);

		// 下摆
		CVertex *g = new CVertex(new LineAndLineConstraintRelation(f2, LineStOrEd::END, f2r, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g->draw(pDC, &redPen);

		// 口袋辅助线――左
	    double sideLength = CPoint1::Distance(dynamic_cast<CLine*>(op->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *p = new CVertex(new RayConstraintRelation(f1, LineStOrEd::END, 90, rectLengthV_Body- sideLength/6 , { __T("S'"), __T("R'") }));
		//p->draw(pDC, &bluePen);
		
		CVertex *p1 = new CVertex(new RayConstraintRelation(p, LineStOrEd::END, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p1->draw(pDC, &redPen);
		CVertex *p2 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2->draw(pDC, &redPen);

		CVertex *p3 = new CVertex(new RayConstraintRelation(p, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3->draw(pDC, &redPen);
	
		CVertex *p4 = new CVertex(new RayConstraintRelation(p3, LineStOrEd::START, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p4->draw(pDC, &redPen);

		CVertex *p5 = new CVertex(new ParaConstraintRelation(p4, p2, p3, 2, { __T("W"), __T("W'") }));
		p5->draw(pDC, &redPen);
			
			
		// 口袋辅助线――左
		//double sideLength = CPoint1::Distance(dynamic_cast<CLine*>(op->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *pr = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::START, 90, rectLengthV_Body - sideLength / 6, { __T("S'"), __T("R'") }));
		//pr->draw(pDC, &bluePen);

		CVertex *p1r = new CVertex(new RayConstraintRelation(pr, LineStOrEd::END, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p1r->draw(pDC, &redPen);
		CVertex *p2r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2r->draw(pDC, &redPen);

		CVertex *p3r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::START, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3r->draw(pDC, &redPen);

	    CVertex *p4r = new CVertex(new RayConstraintRelation(p3r, LineStOrEd::START, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p4r->draw(pDC, &redPen);

		CVertex *p5r = new CVertex(new ParaConstraintRelation(p4r, p2r, p3r, 2, { __T("W"), __T("W'") }));
		p5r->draw(pDC, &redPen);

		// 翻折线
		CVertex *g1 = new CVertex(new LineAndLineConstraintRelation(f2, LineStOrEd::END, f3, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		g1->draw(pDC, &bluePen);

		CVertex *g1r = new CVertex(new LineAndLineConstraintRelation(f2r, LineStOrEd::START, f3r, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g1r->draw(pDC, &bluePen);
		
	}
	void static TestDraw_UnfoldKnitting_2D1_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 100) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = bustGirth/2 + 2 * turnCollarWidth;
		double rectLengthV_Body = 2 * bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);

		// 水平中线
		CVertex *gg = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body/2, { __T("W"), __T("W'") }));
		gg->draw(pDC, &bluePen);

	// 绘制后片胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		gg1->draw(pDC, &bluePen);

	// 绘制后片腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

	// 后片侧缝
		CVertex *s1 = new CVertex(new LineAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::START, turnCollarWidth),s1r1, PointOnLinePosition(LineStOrEd::START, turnCollarWidth), { __T("A"), __T("Q'") }));
		s1->draw(pDC, &redPen);

		CVertex *s1r = new CVertex(new LineAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::END, -turnCollarWidth), s1r1, PointOnLinePosition(LineStOrEd::END, -turnCollarWidth), { __T("A"), __T("Q'") }));
		s1r->draw(pDC, &redPen);
    // 后片下摆
		CVertex *h1 = new CVertex(new LineAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::END, 0), s1r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		h1->draw(pDC, &redPen);


		// 绘制后中线
		CVertex *zz1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1,rectWidthV_Body/2, { __T("W"), __T("W'") }));
		zz1->draw(pDC, &bluePen);

		//// 左背宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1, rectWidthV_Body / 2 - backWidth, { __T("W"), __T("W'") }));
		u0t->draw(pDC, &bluePen);

		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1, rectWidthV_Body / 2 + backWidth , { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);


		// 左后肩线1
		CVertex *f6 = new CVertex(new RayConstraintRelation(gg, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth / 2), 180 - 20, u0t, { __T("S'"), __T("R'") }));
		f6->draw(pDC, &redPen);
		// 左后肩线2
		CVertex *f7 = new CVertex(new  ExpandConstraintRelation(f6, 2 * PIXELPERCM, { __T("a"), __T("b") }));
		f7->draw(pDC, &redPen);

		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(gg, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 2), 20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new  ExpandConstraintRelation(f6r, 2, { __T("a"), __T("b") }));
		f7r->draw(pDC, &redPen);

		//左后袖窿

	    //袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u0t->getFigure())->GetEd(), dynamic_cast<CLine*>(s1->getFigure())->GetSt()) / 3;
	
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u0t, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		//左后袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f7, LineStOrEd::START));
        verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(u0t, PointOnLinePosition(LineStOrEd::HALF, 0)));
        verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(s1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		// 右后袖窿辅助线
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//右后袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(s1r, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

		// 绘制后领窝线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(f6, PointOnLinePosition(LineStOrEd::END, 0), zz1, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 6), Quadrant::THREE, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);

		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(zz1, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);

		// 绘制前片胸围线
		CVertex *gg1f = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, -(armHoleDepth + 2), { __T("W"), __T("W'") }));
		gg1f->draw(pDC, &bluePen);
		// 绘制前片腰围线
		CVertex *ww1f = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, -backLength, { __T("W"), __T("W'") }));
		ww1f->draw(pDC, &bluePen);

		// 左侧缝线
		CVertex *s1f = new CVertex(new LineAndLineConstraintRelation(gg1f, PointOnLinePosition(LineStOrEd::START, 0), p1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		s1f->draw(pDC, &redPen);

		CVertex *s1rf = new CVertex(new LineAndLineConstraintRelation(gg1f, PointOnLinePosition(LineStOrEd::END, 0), p1q1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s1rf->draw(pDC, &redPen);
		// 左前下摆

		CVertex *h1f = new CVertex(new LineAndLineConstraintRelation(s1f, PointOnLinePosition(LineStOrEd::START, 0), s1rf, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		h1f->draw(pDC, &redPen);

		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1f, rectWidthV_Body / 2 - chestWidth - turnCollarWidth, { __T("W"), __T("W'") }));
		j0k->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1f, rectWidthV_Body / 2 + chestWidth + turnCollarWidth, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);
		
		// 左前中线1
		CVertex *f1 = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, gg, PointOnLinePosition(LineStOrEd::HALF, -12), { __T("A"), __T("Q'") }));
		f1->draw(pDC, &redPen);

		// 前中线2
		CVertex *f2 = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, p1q1, PointOnLinePosition(LineStOrEd::HALF, -6), { __T("A"), __T("Q'") }));
		f2->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3 = new CVertex(new RayConstraintRelation(f1, LineStOrEd::START, 0, -5, { __T("S'"), __T("R'") }));
		f3->draw(pDC, &redPen);

		// 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(f3, LineStOrEd::START, 180+20, j0k, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 左前肩线2
		CVertex *f5 = new CVertex(new  RayConstraintRelation(f4, LineStOrEd::START, 180 + 20, 2, { __T("S'"), __T("R'") }));
		f5->draw(pDC, &redPen);


		// 袖窿辅助线
		// 左前
		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j0k, LineStOrEd::START, 90 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(f5, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(j0k, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(s1f, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

			//右前中线1
		CVertex *f1r = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, gg, PointOnLinePosition(LineStOrEd::HALF, 12), { __T("A"), __T("Q'") }));
		f1r->draw(pDC, &redPen);
		// 前中线1
		CVertex *f2r = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, p1q1, PointOnLinePosition(LineStOrEd::HALF, 6), { __T("A"), __T("Q'") }));
		f2r->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3r = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::END, 0, 5, { __T("S'"), __T("R'") }));
		f3r->draw(pDC, &redPen);

		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(f3r, LineStOrEd::END, 360-20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		// 右前肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, LineStOrEd::END, 360 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		// 右前袖窿辅助线
		CVertex *vh = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::START, armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);

		//右前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(s1rf, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		// 口袋辅助线――右
		double sideLength = CPoint1::Distance(dynamic_cast<CLine*>(s1f->getFigure())->GetEd(), dynamic_cast<CLine*>(s1f->getFigure())->GetSt()) / 3;
		CVertex *pr = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::END, 90, -5 * sideLength / 6, { __T("S'"), __T("R'") }));
		//pr->draw(pDC, &bluePen);

		CVertex *p1r = new CVertex(new RayConstraintRelation(pr, LineStOrEd::START, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p1r->draw(pDC, &redPen);
		CVertex *p2r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::START, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2r->draw(pDC, &redPen);

		CVertex *p3r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3r->draw(pDC, &redPen);

		CVertex *p4r = new CVertex(new RayConstraintRelation(p3r, LineStOrEd::START, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p4r->draw(pDC, &redPen);

		CVertex *p5r = new CVertex(new ParaConstraintRelation(p1r, p2r, p3r, -2, { __T("W"), __T("W'") }));
		p5r->draw(pDC, &redPen);


		// 口袋辅助线――左
		CVertex *p = new CVertex(new RayConstraintRelation(f1, LineStOrEd::START, 90, -5 * sideLength / 6, { __T("S'"), __T("R'") }));
		//p->draw(pDC, &bluePen);
		CVertex *p1 = new CVertex(new RayConstraintRelation(p, LineStOrEd::START, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p1->draw(pDC, &redPen);
		CVertex *p2 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::START, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2->draw(pDC, &redPen);

		CVertex *p3 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3->draw(pDC, &redPen);

		CVertex *p4 = new CVertex(new RayConstraintRelation(p3, LineStOrEd::START, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p4->draw(pDC, &redPen);

	    CVertex *p5 = new CVertex(new ParaConstraintRelation(p1, p2, p3, -2, { __T("W"), __T("W'") }));
		p5->draw(pDC, &redPen);


		// 翻折线
		CVertex *g1 = new CVertex(new LineAndLineConstraintRelation(f2, LineStOrEd::START, f3, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g1->draw(pDC, &bluePen);

		CVertex *g1r = new CVertex(new LineAndLineConstraintRelation(f2r, LineStOrEd::END, f3r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		g1r->draw(pDC, &bluePen);
	}
	void static TestDraw_UnfoldKnitting_2D1_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1100, 100) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = bustGirth / 2 + 2 * turnCollarWidth;
		double rectLengthV_Body = 2 * bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);

		// 水平中线
		CVertex *gg = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body / 2, { __T("W"), __T("W'") }));
		gg->draw(pDC, &bluePen);

		// 绘制后片胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, -(armHoleDepth + 2), { __T("W"), __T("W'") }));
		gg1->draw(pDC, &bluePen);

		// 绘制后片腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, -backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 后片侧缝
		CVertex *s1 = new CVertex(new LineAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::START, turnCollarWidth), p1q1, PointOnLinePosition(LineStOrEd::START, turnCollarWidth), { __T("A"), __T("Q'") }));
		s1->draw(pDC, &redPen);

		CVertex *s1r = new CVertex(new LineAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::END, -turnCollarWidth), p1q1, PointOnLinePosition(LineStOrEd::END, -turnCollarWidth), { __T("A"), __T("Q'") }));
		s1r->draw(pDC, &redPen);
		// 后片下摆
		CVertex *h1 = new CVertex(new LineAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s1r, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		h1->draw(pDC, &redPen);


		// 绘制后中线
		CVertex *zz1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("W"), __T("W'") }));
		zz1->draw(pDC, &bluePen);

		// 左背宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1, rectWidthV_Body / 2 - backWidth, { __T("W"), __T("W'") }));
		u0t->draw(pDC, &bluePen);

		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1, rectWidthV_Body / 2 + backWidth, { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);


		// 左后肩线1
		CVertex *f6 = new CVertex(new RayConstraintRelation(gg, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth / 2), 180 + 20, u0t, { __T("S'"), __T("R'") }));
		f6->draw(pDC, &redPen);
		// 左后肩线2
		CVertex *f7 = new CVertex(new RayConstraintRelation(f6, PointOnLinePosition(LineStOrEd::START, 0), 180 + 20, 2, { __T("S'"), __T("R'") }));
		f7->draw(pDC, &redPen);

		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(gg, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 2), 360-20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new RayConstraintRelation(f6r, PointOnLinePosition(LineStOrEd::END, 0), 360-20, 2, { __T("S'"), __T("R'") }));
	
		f7r->draw(pDC, &redPen);


		//左后袖窿

		//袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u0t->getFigure())->GetSt(), dynamic_cast<CLine*>(s1->getFigure())->GetEd()) / 3;

		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u0t, LineStOrEd::START, 90 + armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		//左后袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f7, LineStOrEd::START));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(u0t, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(s1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		// 右后袖窿辅助线
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::START, armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//右后袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, LineStOrEd::END));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(s1r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

		// 绘制后领窝线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation( zz1, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth / 6), f6, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);

		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation( f6r, PointOnLinePosition(LineStOrEd::START, 0), zz1, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth / 6), Quadrant::ONE, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);

		// 绘制前片胸围线
		CVertex *gg1f = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		gg1f->draw(pDC, &bluePen);
		// 绘制前片腰围线
		CVertex *ww1f = new CVertex(new ParaConstraintRelation(gg, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1f->draw(pDC, &bluePen);

		// 左侧缝线
		CVertex *s1f = new CVertex(new LineAndLineConstraintRelation(gg1f, PointOnLinePosition(LineStOrEd::START, 0), s1r1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		s1f->draw(pDC, &redPen);

		CVertex *s1rf = new CVertex(new LineAndLineConstraintRelation(gg1f, PointOnLinePosition(LineStOrEd::END, 0), s1r1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s1rf->draw(pDC, &redPen);


		// 左前下摆
		CVertex *h1f = new CVertex(new LineAndLineConstraintRelation(s1f, PointOnLinePosition(LineStOrEd::END, 0), s1rf, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		h1f->draw(pDC, &redPen);

		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1f, rectWidthV_Body / 2 - chestWidth - turnCollarWidth, { __T("W"), __T("W'") }));
		j0k->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, gg, gg1f, rectWidthV_Body / 2 + chestWidth + turnCollarWidth, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);

		// 左前中线1
		CVertex *f1 = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, gg, PointOnLinePosition(LineStOrEd::HALF, -12), { __T("A"), __T("Q'") }));
		f1->draw(pDC, &redPen);

		// 前中线2
		CVertex *f2 = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, s1r1, PointOnLinePosition(LineStOrEd::HALF, -6), { __T("A"), __T("Q'") }));
		f2->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3 = new CVertex(new RayConstraintRelation(f1, LineStOrEd::START, 0, -5, { __T("S'"), __T("R'") }));
		f3->draw(pDC, &redPen);

		// 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(f3, LineStOrEd::START, 180 - 20, j0k, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 左前肩线2
		CVertex *f5 = new CVertex(new  RayConstraintRelation(f4, LineStOrEd::START, 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5->draw(pDC, &redPen);


		// 袖窿辅助线
		// 左前
		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j0k, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(f5, LineStOrEd::START));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(j0k, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(s1f, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//右前中线1
		CVertex *f1r = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, gg, PointOnLinePosition(LineStOrEd::HALF, 12), { __T("A"), __T("Q'") }));
		f1r->draw(pDC, &redPen);
		// 前中线2
		CVertex *f2r = new CVertex(new LineAndLineConstraintRelation(ww1f, LineStOrEd::HALF, s1r1, PointOnLinePosition(LineStOrEd::HALF, 6), { __T("A"), __T("Q'") }));
		f2r->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3r = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::END, 0, 5, { __T("S'"), __T("R'") }));
		f3r->draw(pDC, &redPen);

		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(f3r, LineStOrEd::END, 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		// 右前肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, LineStOrEd::END, 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);



		// 右前袖窿辅助线
		CVertex *vh = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 360-armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);

		//右前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::END));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(s1rf, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		// 口袋辅助线――右
		double sideLength = CPoint1::Distance(dynamic_cast<CLine*>(s1f->getFigure())->GetEd(), dynamic_cast<CLine*>(s1f->getFigure())->GetSt()) / 3;
		CVertex *pr = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::END, 90, 5 * sideLength / 6, { __T("S'"), __T("R'") }));
		//pr->draw(pDC, &bluePen);

		CVertex *p1r = new CVertex(new RayConstraintRelation(pr, LineStOrEd::END, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p1r->draw(pDC, &redPen);
		CVertex *p2r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::END, 90, pocketLengh, { __T("S'"), __T("R'") }));
		p2r->draw(pDC, &redPen);

		CVertex *p3r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::START, 90, pocketLengh, { __T("S'"), __T("R'") }));
		p3r->draw(pDC, &redPen);

		CVertex *p4r = new CVertex(new RayConstraintRelation(p3r, LineStOrEd::END, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p4r->draw(pDC, &redPen);

		CVertex *p5r = new CVertex(new ParaConstraintRelation(p4r, p2r, p3r, -2, { __T("W"), __T("W'") }));
		p5r->draw(pDC, &redPen);


		// 口袋辅助线――左
		CVertex *p = new CVertex(new RayConstraintRelation(f1, LineStOrEd::START, 90, 5 * sideLength / 6, { __T("S'"), __T("R'") }));
		//p->draw(pDC, &bluePen);
		CVertex *p1 = new CVertex(new RayConstraintRelation(p, LineStOrEd::END, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p1->draw(pDC, &redPen);
		CVertex *p2 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::START, 90, pocketLengh, { __T("S'"), __T("R'") }));
		p2->draw(pDC, &redPen);

		CVertex *p3 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::END, 90, pocketLengh, { __T("S'"), __T("R'") }));
		p3->draw(pDC, &redPen);

		CVertex *p4 = new CVertex(new RayConstraintRelation(p3, LineStOrEd::END, 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p4->draw(pDC, &redPen);

		CVertex *p5 = new CVertex(new ParaConstraintRelation(p4, p2, p3, -2, { __T("W"), __T("W'") }));
		p5->draw(pDC, &redPen);


		// 翻折线
		CVertex *g1 = new CVertex(new LineAndLineConstraintRelation(f2, LineStOrEd::START, f3, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g1->draw(pDC, &bluePen);

		CVertex *g1r = new CVertex(new LineAndLineConstraintRelation(f2r, LineStOrEd::END, f3r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		g1r->draw(pDC, &bluePen);
	}
	void static TestDraw_UnfoldKnitting_2D2_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(200, 100) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = (bustGirth + 2 * turnCollarWidth)/2;
		double rectLengthV_Body = bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);





	   // 绘制胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		gg1->draw(pDC, &bluePen);
		// 绘制腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);


		// 绘制后中线
		CVertex *zz1 = new CVertex(new LineAndLineConstraintRelation(p1s1, PointOnLinePosition(LineStOrEd::START, backCollarWidth/6), p1s1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		zz1->draw(pDC, &redPen);

		// 右侧缝线
		CVertex *o1p1 = new CVertex(new ParaConstraintRelation(p1s1, gg1, s1r1, bustGirth / 4, { __T("W"), __T("W'") }));
		o1p1->draw(pDC, &bluePen);


		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, backWidth, { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth/2 - chestWidth , { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);


		//右前中线1
		CVertex *f1r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, p1q1, PointOnLinePosition(LineStOrEd::END, -12), { __T("A"), __T("Q'") }));
		f1r->draw(pDC, &redPen);
		// 前中线1
		CVertex *f2r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, s1r1, PointOnLinePosition(LineStOrEd::END, -6), { __T("A"), __T("Q'") }));
		f2r->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3r = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::START, 0, -5, { __T("S'"), __T("R'") }));
		f3r->draw(pDC, &redPen);

		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(f3r, LineStOrEd::START, 180 - 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		// 右前肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, LineStOrEd::START, 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), 20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new RayConstraintRelation(f6r, LineStOrEd::END, 20, 2, { __T("S'"), __T("R'") }));
		f7r->draw(pDC, &redPen);

		// 袖窿辅助线
		// 右前
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j01k1->getFigure())->GetEd(), dynamic_cast<CLine*>(o1p1->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);
		// 右后
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(o1p1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);
		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(p1s1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);

		// 下摆
		CVertex *g = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::END, f2r, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g->draw(pDC, &redPen);
	}
	void static TestDraw_UnfoldKnitting_2D2_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 100) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = (bustGirth + 2 * turnCollarWidth) / 2;
		double rectLengthV_Body = bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);





		// 绘制胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		gg1->draw(pDC, &bluePen);
		// 绘制腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);


		// 绘制后中线
		CVertex *zz1 = new CVertex(new LineAndLineConstraintRelation(p1s1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), p1s1, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		zz1->draw(pDC, &redPen);

		// 右侧缝线
		CVertex *o1p1 = new CVertex(new ParaConstraintRelation(p1s1, gg1, s1r1, bustGirth / 4, { __T("W"), __T("W'") }));
		o1p1->draw(pDC, &bluePen);


		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, backWidth, { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 2 - chestWidth, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);


		//右前中线1
		CVertex *f1r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, p1q1, PointOnLinePosition(LineStOrEd::END, -12), { __T("A"), __T("Q'") }));
		f1r->draw(pDC, &redPen);
		// 前中线1
		CVertex *f2r = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::END, s1r1, PointOnLinePosition(LineStOrEd::END, -6), { __T("A"), __T("Q'") }));
		f2r->draw(pDC, &redPen);

		// 翻领线
		CVertex *f3r = new CVertex(new RayConstraintRelation(f1r, LineStOrEd::START, 0, -5, { __T("S'"), __T("R'") }));
		f3r->draw(pDC, &redPen);

		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(f3r, LineStOrEd::START, 180 - 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		// 右前肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, LineStOrEd::START, 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 2), 20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new RayConstraintRelation(f6r, LineStOrEd::END, 20, 2, { __T("S'"), __T("R'") }));
		f7r->draw(pDC, &redPen);

		// 袖窿辅助线
		// 右前
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j01k1->getFigure())->GetEd(), dynamic_cast<CLine*>(o1p1->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);
		// 右后
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(o1p1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);
		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(p1s1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);

		// 下摆
		CVertex *g = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::END, f2r, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g->draw(pDC, &redPen);
	}


	//6 翻折编织――款式1
	void static TestDraw_ReversKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(150, 200) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth-4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth-4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//jj1r->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//10 绘制左前领底线。  
		CVertex *a2q1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), 0, -3, { __T("V"), __T("I'") }));
		a2q1->draw(pDC, &redPen);
		//11 绘制右前领底线。  
		CVertex *a2q1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, frontCollarDepth), 0, 3, { __T("I'"), __T("S") }));
		a2q1r->draw(pDC, &redPen);


        // 14 绘制左前领窝
		CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), a2q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bdf->draw(pDC, &redPen);
		// 14 绘制右前领窝
		CVertex *b1d1f = new CVertex(new ArcAndLineConstraintRelation(a2q1r, PointOnLinePosition(LineStOrEd::END, 0), d1q1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1f->draw(pDC, &redPen);

		
        // 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		
		
		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1r->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1r, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1r, PointOnLinePosition(LineStOrEd::END, 0), jj1r, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);

	//	// 绘制外层前领

		// 14 绘制后领窝
		CVertex *c1r = new CVertex(new ArcAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 10), u1v1, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::ONE, { __T("B"), __T("C") }));
		c1r->draw(pDC, &redPen);
		CVertex *c1 = new CVertex(new ArcAndLineConstraintRelation(uv, PointOnLinePosition(LineStOrEd::START, 4), ff1, PointOnLinePosition(LineStOrEd::START, -10),Quadrant::TWO, { __T("B"), __T("C") }));
		c1->draw(pDC, &redPen);

		// 绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec;
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1, PointOnLinePosition(LineStOrEd::START, -10)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(uv, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 9)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(u1v1, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1, PointOnLinePosition(LineStOrEd::END, 10)));
		CVertex *nopf0 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec));
		nopf0->draw(pDC, &redPen);
		
		// 绘制袖中线
		CVertex *s1 = new CVertex(new RayConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, -10), 180 - 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1->draw(pDC, &redPen);
		CVertex *s1r = new CVertex(new RayConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 10), 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1r->draw(pDC, &redPen);

		// 袖口线
		CVertex *s3 = new CVertex(new RayConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), 20, cuffGirth / 2, { __T("S'"), __T("R'") }));
		//s3->draw(pDC, &redPen);
		CVertex *s3r = new CVertex(new RayConstraintRelation(s1r, PointOnLinePosition(LineStOrEd::END, 0), 180- 20, cuffGirth / 2, { __T("S'"), __T("R'") }));
		//s3r->draw(pDC, &redPen);


		//// 绘制袖侧缝线
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(s3, LineStOrEd::END, jj1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2->draw(pDC, &redPen);

		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(s3r, LineStOrEd::START, jj1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2r->draw(pDC, &redPen);

		// 袖口弧线
        CVertex *c2 = new CVertex(new ArcAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		c2->draw(pDC, &redPen);
		CVertex *c2r = new CVertex(new ArcAndLineConstraintRelation(s2r, PointOnLinePosition(LineStOrEd::END, 0), s1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		c2r->draw(pDC, &redPen);
	

	}
	void static TestDraw_ReversKnitting_2D_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(600, 100) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = 2 * bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

			/*p1q1->draw(pDC);
			p1s1->draw(pDC);

			s1r1->draw(pDC);
			q1r1->draw(pDC);
*/


		//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->draw(pDC, &bluePen);
		CVertex *aa10 = new CVertex(new RayConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, 0), 90, -(rectLengthV_Body -9 ), { __T(" U "), __T("J'") }));
		aa10->draw(pDC, &bluePen);


		////绘制矩形中线
		//CVertex *aa = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa->draw(pDC, &bluePen);


		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &bluePen);


		//5 绘制左腰围线―上。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线―上。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//5 绘制左腰围线―下。  backLength = bodyLength - 15 ;
		CVertex *ww1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, (bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1d->draw(pDC, &bluePen);
		//6 绘制右腰围线―下。  backLength = bodyLength - 15 ;
		CVertex *ww1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, (bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1rd->draw(pDC, &bluePen);


		//7 绘制左胸围线―上。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线―上。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1r->draw(pDC, &bluePen);


		//7 绘制左胸围线―下。 
		CVertex *jj1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(armHoleDepth - 4)), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1d->draw(pDC, &bluePen);
		//8 绘制右胸围线―下。 
		CVertex *jj1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(armHoleDepth - 4)), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1rd->draw(pDC, &bluePen);


		//////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		// //8 绘制左臀围线。  
		//CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		////h1->draw(pDC, &bluePen);
		////9 绘制右臀围线。  
		//CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		////h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		//10 绘制左罗纹线。  
		CVertex *i1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1d->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1rd->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1u = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
	    //u1v1u->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uvu = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uvu->draw(pDC, &bluePen);



		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, s1r1, jj1d, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, s1r1, jj1d, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线_下  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(s1r1, u1v1, uv, -fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线――上  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1u = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1u->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(s1r1, (rectWidthV_Body + backCollarWidth) / 2, backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(s1r1, (rectWidthV_Body - backCollarWidth) / 2, backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::END, d1q1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::END, dq, LineStOrEd::START, { __T("A"), __T("Q") }));
		aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(d1q1, PointOnLinePosition(LineStOrEd::END, 0), aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		//b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), dq, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		//bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		//bb1->draw(pDC, &redPen);


		// 前领

		//10 绘制左前领底线。  
		CVertex *a2q1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -frontCollarDepth), 0, -3, { __T("V"), __T("I'") }));
		a2q1->draw(pDC, &redPen);
		//11 绘制右前领底线。  
		CVertex *a2q1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -frontCollarDepth), 0, 3, { __T("I'"), __T("S") }));
		a2q1r->draw(pDC, &redPen);


		// 14 绘制左前领窝
		CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(a2q1, PointOnLinePosition(LineStOrEd::START, 0), dq, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		bdf->draw(pDC, &redPen);
		// 14 绘制右前领窝
		CVertex *b1d1f = new CVertex(new ArcAndLineConstraintRelation(d1q1, PointOnLinePosition(LineStOrEd::START, 0), a2q1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		b1d1f->draw(pDC, &redPen);


		// 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::END, backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::END, 180 - backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetSt(), dynamic_cast<CLine*>(jj1rd->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::START, 90 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::START, armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::ONE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::ONE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::START));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1rd, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1rd, PointOnLinePosition(LineStOrEd::END, 0), jj1rd, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1d, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1d, PointOnLinePosition(LineStOrEd::START, 0), jj1d, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1rd, bustGirth / 4, -1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1d, 0, -1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1rd, waistGirth / 4, 1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1rd, waistGirth / 4, -1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1d, 0, 1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1d, 0, -1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);

		// 下
		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1rd, ribGirth / 4, 1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1d, 0, 1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);

		// 上
		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1u = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1u->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *nou = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		nou->draw(pDC, &redPen);

		// 下
		//18 绘制左侧缝线线1
		CVertex *ayd = new CVertex(new LineAndLineConstraintRelation(jj1d, LineStOrEd::START, ww1d, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayd->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yxd = new CVertex(new LineAndLineConstraintRelation(ww1d, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxd->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xvd = new CVertex(new LineAndLineConstraintRelation(i1d, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvd->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayrd = new CVertex(new LineAndLineConstraintRelation(jj1rd, LineStOrEd::END, ww1rd, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayrd->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxrd = new CVertex(new LineAndLineConstraintRelation(ww1rd, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxrd->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvrd = new CVertex(new LineAndLineConstraintRelation(i1rd, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvrd->draw(pDC, &redPen);

		// 上
		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, nou, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1u, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);



			// 绘制外层前领

			// 14 绘制后领窝
	/*	CVertex *c1r = new CVertex(new ArcAndLineConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::END, 10), u1v1u, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::ONE, { __T("B"), __T("C") }));
		c1r->draw(pDC, &redPen);
		CVertex *c1 = new CVertex(new ArcAndLineConstraintRelation(uvu, PointOnLinePosition(LineStOrEd::START, 4), ff1u, PointOnLinePosition(LineStOrEd::START, -10), Quadrant::TWO, { __T("B"), __T("C") }));
		c1->draw(pDC, &redPen);*/

		// 绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec;
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1u, PointOnLinePosition(LineStOrEd::START, -10)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(uvu, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 9)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(u1v1u, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1u, PointOnLinePosition(LineStOrEd::END, 10)));
		CVertex *nopf0 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec));
		nopf0->draw(pDC, &redPen);

		// 绘制袖中线
		CVertex *s1 = new CVertex(new RayConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::START, -10), 180 - 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1->draw(pDC, &redPen);
		CVertex *s1r = new CVertex(new RayConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::END, 10), 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1r->draw(pDC, &redPen);

		// 袖口线
		CVertex *s3 = new CVertex(new RayConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), 0, cuffGirth / 2, { __T("S'"), __T("R'") }));
		s3->draw(pDC, &redPen);
		CVertex *s3r = new CVertex(new RayConstraintRelation(s1r, PointOnLinePosition(LineStOrEd::END, 0), 0, -cuffGirth / 2, { __T("S'"), __T("R'") }));
		s3r->draw(pDC, &redPen);


		//// 绘制袖侧缝线
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(s3, LineStOrEd::END, jj1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2->draw(pDC, &redPen);

		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(s3r, LineStOrEd::START, jj1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2r->draw(pDC, &redPen);

		//// 袖口弧线
		//CVertex *c2 = new CVertex(new ArcAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		//c2->draw(pDC, &redPen);
		//CVertex *c2r = new CVertex(new ArcAndLineConstraintRelation(s2r, PointOnLinePosition(LineStOrEd::END, 0), s1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//c2r->draw(pDC, &redPen);


	}
	void static TestDraw_ReversKnitting_2D_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1000, 100) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = 2 * bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*p1q1->draw(pDC);
		p1s1->draw(pDC);

		s1r1->draw(pDC);
		q1r1->draw(pDC);
*/


//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		///aa1->draw(pDC, &bluePen);
		CVertex *aa10 = new CVertex(new RayConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, 0), 90, -(rectLengthV_Body - 9), { __T(" U "), __T("J'") }));
		aa10->draw(pDC, &bluePen);
		////绘制矩形中线
		//CVertex *aa = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa->draw(pDC, &bluePen);


		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &bluePen);


		//5 绘制左腰围线―上。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线―上。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//5 绘制左腰围线―下。  backLength = bodyLength - 15 ;
		CVertex *ww1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, (bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1d->draw(pDC, &bluePen);
		//6 绘制右腰围线―下。  backLength = bodyLength - 15 ;
		CVertex *ww1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, (bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1rd->draw(pDC, &bluePen);


		//7 绘制左胸围线―上。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线―上。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1r->draw(pDC, &bluePen);


		//7 绘制左胸围线―下。 
		CVertex *jj1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(armHoleDepth - 4)), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1d->draw(pDC, &bluePen);
		//8 绘制右胸围线―下。 
		CVertex *jj1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(armHoleDepth - 4)), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1rd->draw(pDC, &bluePen);


		//////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		// //8 绘制左臀围线。  
		//CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		////h1->draw(pDC, &bluePen);
		////9 绘制右臀围线。  
		//CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		////h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		//10 绘制左罗纹线。  
		CVertex *i1d = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1d->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1rd = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::HALF, ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1rd->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1u = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1u->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uvu = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uvu->draw(pDC, &bluePen);



		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, s1r1, jj1d, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, s1r1, jj1d, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线_下  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(s1r1, u1v1, uv, -fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线――上  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1u = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1u->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(s1r1, (rectWidthV_Body + backCollarWidth) / 2, backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(s1r1, (rectWidthV_Body - backCollarWidth) / 2, backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::END, d1q1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::END, dq, LineStOrEd::START, { __T("A"), __T("Q") }));
		aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(d1q1, PointOnLinePosition(LineStOrEd::END, 0), aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), dq, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);


		//// 前领

		////10 绘制左前领底线。  
		//CVertex *a2q1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -frontCollarDepth), 0, -3, { __T("V"), __T("I'") }));
		//a2q1->draw(pDC, &redPen);
		////11 绘制右前领底线。  
		//CVertex *a2q1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -frontCollarDepth), 0, 3, { __T("I'"), __T("S") }));
		//a2q1r->draw(pDC, &redPen);


		//// 14 绘制左前领窝
		//CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(a2q1, PointOnLinePosition(LineStOrEd::START, 0), dq, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		//bdf->draw(pDC, &redPen);
		//// 14 绘制右前领窝
		//CVertex *b1d1f = new CVertex(new ArcAndLineConstraintRelation(d1q1, PointOnLinePosition(LineStOrEd::START, 0), a2q1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		//b1d1f->draw(pDC, &redPen);


		// 左前肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::END, backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右前肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::END, 180 - backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetSt(), dynamic_cast<CLine*>(jj1rd->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::START, 90 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::START, armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::ONE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::ONE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::START));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1rd, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1rd, PointOnLinePosition(LineStOrEd::END, 0), jj1rd, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1d, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1d, PointOnLinePosition(LineStOrEd::START, 0), jj1d, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1rd, bustGirth / 4, -1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1d, 0, -1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1rd, waistGirth / 4, 1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1rd, waistGirth / 4, -1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1d, 0, 1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1d, 0, -1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);

		// 下
		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1rd, ribGirth / 4, 1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1d, 0, 1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);

		// 上
		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1u = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1u->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *nou = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		nou->draw(pDC, &redPen);

		// 下
		//18 绘制左侧缝线线1
		CVertex *ayd = new CVertex(new LineAndLineConstraintRelation(jj1d, LineStOrEd::START, ww1d, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayd->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yxd = new CVertex(new LineAndLineConstraintRelation(ww1d, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxd->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xvd = new CVertex(new LineAndLineConstraintRelation(i1d, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvd->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayrd = new CVertex(new LineAndLineConstraintRelation(jj1rd, LineStOrEd::END, ww1rd, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayrd->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxrd = new CVertex(new LineAndLineConstraintRelation(ww1rd, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxrd->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvrd = new CVertex(new LineAndLineConstraintRelation(i1rd, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvrd->draw(pDC, &redPen);

		// 上
		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, nou, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1u, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);



		// 绘制外层前领

		// 14 绘制后领窝
/*	CVertex *c1r = new CVertex(new ArcAndLineConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::END, 10), u1v1u, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::ONE, { __T("B"), __T("C") }));
	c1r->draw(pDC, &redPen);
	CVertex *c1 = new CVertex(new ArcAndLineConstraintRelation(uvu, PointOnLinePosition(LineStOrEd::START, 4), ff1u, PointOnLinePosition(LineStOrEd::START, -10), Quadrant::TWO, { __T("B"), __T("C") }));
	c1->draw(pDC, &redPen);*/

	// 绘制前领窝
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec;
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1u, PointOnLinePosition(LineStOrEd::START, -10)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(uvu, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::START, 9)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(u1v1u, PointOnLinePosition(LineStOrEd::START, 8)));
		verPointPairVec.push_back(std::pair<CVertex*, PointOnLinePosition>(ff1u, PointOnLinePosition(LineStOrEd::END, 10)));
		CVertex *nopf0 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec));
		nopf0->draw(pDC, &redPen);

		// 绘制袖中线
		CVertex *s1 = new CVertex(new RayConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::START, -10), 180 - 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1->draw(pDC, &redPen);
		CVertex *s1r = new CVertex(new RayConstraintRelation(ff1u, PointOnLinePosition(LineStOrEd::END, 10), 60, sleeveLength, { __T("S'"), __T("R'") }));
		s1r->draw(pDC, &redPen);

		// 袖口线
		CVertex *s3 = new CVertex(new RayConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), 0, cuffGirth / 2, { __T("S'"), __T("R'") }));
		s3->draw(pDC, &redPen);
		CVertex *s3r = new CVertex(new RayConstraintRelation(s1r, PointOnLinePosition(LineStOrEd::END, 0), 0, -cuffGirth / 2, { __T("S'"), __T("R'") }));
		s3r->draw(pDC, &redPen);


		//// 绘制袖侧缝线
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(s3, LineStOrEd::END, jj1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2->draw(pDC, &redPen);

		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(s3r, LineStOrEd::START, jj1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		s2r->draw(pDC, &redPen);

		//// 袖口弧线
		//CVertex *c2 = new CVertex(new ArcAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		//c2->draw(pDC, &redPen);
		//CVertex *c2r = new CVertex(new ArcAndLineConstraintRelation(s2r, PointOnLinePosition(LineStOrEd::END, 0), s1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//c2r->draw(pDC, &redPen);


	}
	// 6 翻折编织――款式2
	void static TestDraw_ReversKnitting_3D_Style2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(150, 150) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double collarHeight = armHoleDepth + 8;
		double collarWidth = bustGirth / 2 + 8;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));
		
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//jj1r->draw(pDC, &bluePen);



		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);


		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		// 左肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1u = new CVertex(new LineAndLineConstraintRelation(f4, LineStOrEd::END, f4r, LineStOrEd::START, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1u->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1r->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1r, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1r, PointOnLinePosition(LineStOrEd::END, 0), jj1r, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		if (isShortClothes == true) {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);


		}
		else {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);

			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);

			//18 绘制右侧缝线线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);

			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);

		}

		// 翻领中心线
		CVertex *t1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 90, collarHeight, { __T(" U "), __T("J'") }));
		//t1->draw(pDC, &bluePen);

		// 翻领宽线左
		CVertex *t2 = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::END, 0), 0, -collarWidth / 2, { __T(" U "), __T("J'") }));
		//t2->draw(pDC, &bluePen);

		// 翻领宽线右
		CVertex *t2r = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::END, 0), 0, collarWidth / 2, { __T(" U "), __T("J'") }));
		//t2r->draw(pDC, &bluePen);

		//18 翻领侧缝线左
		CVertex *t3 = new CVertex(new LineAndLineConstraintRelation(f4, LineStOrEd::START, t2, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t3->draw(pDC, &redPen);

		//18 翻领侧缝线左
		CVertex *t4 = new CVertex(new LineAndLineConstraintRelation(f4r, LineStOrEd::END, t2r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t4->draw(pDC, &redPen);

		//  翻领弧线

		/*std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth/6)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *nopf2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		nopf2->draw(pDC, &redPen);*/


		CVertex *t5 = new CVertex(new ArcAndLineConstraintRelation(t2, PointOnLinePosition(LineStOrEd::START, 0), t1, PointOnLinePosition(LineStOrEd::END, backCollarWidth / 6),Quadrant::THREE, { __T("B"), __T("C") }));
		t5->draw(pDC, &redPen);

		CVertex *t5r = new CVertex(new ArcAndLineConstraintRelation(t1, PointOnLinePosition(LineStOrEd::END, backCollarWidth / 6), t2r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		t5r->draw(pDC, &redPen);

		CVertex *t6 = new CVertex(new ArcAndLineConstraintRelation(t1, PointOnLinePosition(LineStOrEd::END, -backCollarWidth / 6), t2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		t6->draw(pDC, &redPenx);

		CVertex *t6r = new CVertex(new ArcAndLineConstraintRelation(t2r, PointOnLinePosition(LineStOrEd::END, 0), t1, PointOnLinePosition(LineStOrEd::END, -backCollarWidth / 6), Quadrant::ONE, { __T("B"), __T("C") }));
		t6r->draw(pDC, &redPenx);

		//// 14 绘制右前领窝
	}
	void static TestDraw_ReversKnitting_2D_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(600, 220) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double collarHeight = armHoleDepth + 8;
		double collarWidth = bustGirth/2 + 8;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1r->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &bluePen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &bluePen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &bluePen);

		// 左肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1r->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1r, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1r, PointOnLinePosition(LineStOrEd::END, 0), jj1r, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		if (isShortClothes == true) {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);


		}
		else {

        //18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);

		CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);

		//18 绘制右侧缝线线2
		CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1r->draw(pDC, &redPen);

		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);

		}
		
		// 翻领中心线
		CVertex *t1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 90, -collarHeight, { __T(" U "), __T("J'") }));
		t1->draw(pDC, &bluePen);

		// 翻领宽线左
		CVertex *t2 = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, 0), 0, -collarWidth/2, { __T(" U "), __T("J'") }));
		t2->draw(pDC, &bluePen);

		// 翻领宽线右
		CVertex *t2r = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, 0), 0, collarWidth/2, { __T(" U "), __T("J'") }));
		t2r->draw(pDC, &bluePen);

		//18 翻领侧缝线左
		CVertex *t3 = new CVertex(new LineAndLineConstraintRelation(f4, LineStOrEd::END, t2, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t3->draw(pDC, &redPen);

		//18 翻领侧缝线左
		CVertex *t4 = new CVertex(new LineAndLineConstraintRelation(f4r, LineStOrEd::START, t2r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t4->draw(pDC, &redPen);

		//  翻领弧线

		/*std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth/6)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *nopf2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		nopf2->draw(pDC, &redPen);*/


		CVertex *t5 = new CVertex(new ArcAndLineConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth / 6), t2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		t5->draw(pDC, &redPen);

		CVertex *t5r = new CVertex(new ArcAndLineConstraintRelation(t2r, PointOnLinePosition(LineStOrEd::END, 0), t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth / 6), Quadrant::ONE, { __T("B"), __T("C") }));
		t5r->draw(pDC, &redPen);

		// 14 绘制右前领窝
	}
	void static TestDraw_ReversKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1000, 220) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double outBodyLength = bodyLength - 15;
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double collarHeight = armHoleDepth + 8;
		double collarWidth = bustGirth / 2 + 8;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth - 4), 0, bustGirth / 4, { __T("H"), __T("P") }));
		jj1r->draw(pDC, &bluePen);


		////new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, bust / 4, { __T("B'"), __T("E'") }), CString("B'E'"));

		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);


		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->draw(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &bluePen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &bluePen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &bluePen);

		// 左肩线1
		CVertex *f4 = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, uv, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);
		// 右肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1r->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制左袖窿直线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制右袖窿直线 2  
		CVertex *efr = new CVertex(new LineAndLineConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("e"), __T("f") }));
		efr->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(efr, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1r, PointOnLinePosition(LineStOrEd::END, -1.5)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf1->draw(pDC, &redPen);

		// 绘制右腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1r, PointOnLinePosition(LineStOrEd::END, 0), jj1r, PointOnLinePosition(LineStOrEd::END, -1.5), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1.5)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1.5), { __T("I'"), __T("J'") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		if (isShortClothes == true) {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);


		}
		else {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);

			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);

			//18 绘制右侧缝线线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);

			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);

		}

		// 翻领中心线
		CVertex *t1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 90, -collarHeight, { __T(" U "), __T("J'") }));
		t1->draw(pDC, &bluePen);

		// 翻领宽线左
		CVertex *t2 = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, 0), 0, -collarWidth / 2, { __T(" U "), __T("J'") }));
		t2->draw(pDC, &bluePen);

		// 翻领宽线右
		CVertex *t2r = new CVertex(new RayConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, 0), 0, collarWidth / 2, { __T(" U "), __T("J'") }));
		t2r->draw(pDC, &bluePen);

		//18 翻领侧缝线左
		CVertex *t3 = new CVertex(new LineAndLineConstraintRelation(f4, LineStOrEd::END, t2, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t3->draw(pDC, &redPen);

		//18 翻领侧缝线左
		CVertex *t4 = new CVertex(new LineAndLineConstraintRelation(f4r, LineStOrEd::START, t2r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		t4->draw(pDC, &redPen);

		//  翻领弧线

		/*std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth/6)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(t2r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *nopf2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		nopf2->draw(pDC, &redPen);*/


		CVertex *t5 = new CVertex(new ArcAndLineConstraintRelation(t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth / 6), t2, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		t5->draw(pDC, &redPen);

		CVertex *t5r = new CVertex(new ArcAndLineConstraintRelation(t2r, PointOnLinePosition(LineStOrEd::END, 0), t1, PointOnLinePosition(LineStOrEd::START, -backCollarWidth / 6), Quadrant::ONE, { __T("B"), __T("C") }));
		t5r->draw(pDC, &redPen);

		// 14 绘制右前领窝
	}
	//6 翻折编织――款式3
	void static TestDraw_ReversKnitting_3D_Style3(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(150, 220) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double outSkirtLength = 2 * bodyLength / 3;
		double outSkirtGirth = hemGirth + 16;

		double rectWidthV_Body = hemGirth / 2;
		double rectLengthV_Body = bodyLength;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/

			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		//pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		//pp1r->draw(pDC, &redPen);

		// 绘制下摆线
		CVertex *he = new CVertex(new ArcAndLineConstraintRelation(pp1, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::END, 5), Quadrant::THREE, { __T("B"), __T("C") }));
		he->draw(pDC, &redPen);
		CVertex *her = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 5),pp1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		her->draw(pDC, &redPen);

		// 绘制下摆线 上
		CVertex *heu = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -5), pp1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		heu->draw(pDC, &redPenx);
		CVertex *heur = new CVertex(new ArcAndLineConstraintRelation( pp1r, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::END, -5), Quadrant::ONE, { __T("B"), __T("C") }));
		heur->draw(pDC, &redPenx);



		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		//ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		//ww1r->draw(pDC, &bluePen);

		//8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		//h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		//h1r->draw(pDC, &bluePen);

		// 绘制左侧缝线1
		CVertex *s1 = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1->draw(pDC, &redPen);
		// 绘制右侧缝线1
		CVertex *s1r = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1r->draw(pDC, &redPen);


		// 绘制左侧缝线2
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2->draw(pDC, &redPen);
		// 绘制右侧缝线2
		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2r->draw(pDC, &redPen);

		// 绘制下腰围线
		CVertex *w1 = new CVertex(new ArcAndLineConstraintRelation(ww1, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, 3.5), Quadrant::THREE, { __T("B"), __T("C") }));
		w1->draw(pDC, &redPen);
		CVertex *w1r = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 3.5), ww1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		w1r->draw(pDC, &redPen);

		// 绘制上腰围线
		CVertex *w1u = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -3.5), ww1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		w1u->draw(pDC, &redPen);
		CVertex *w1ur = new CVertex(new ArcAndLineConstraintRelation(ww1r, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, -3.5), Quadrant::ONE, { __T("B"), __T("C") }));
		w1ur->draw(pDC, &redPen);
	

		//8 绘制左臀围线_外。  
		CVertex *h1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, -(hipGirth / 4 + 3), { __T("W"), __T("H'") }));
		//h1u->draw(pDC, &bluePen);
		//9 绘制右臀围线_外。  
		CVertex *h1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, hipGirth / 4 + 3, { __T("H'"), __T("R") }));
		//h1ur->draw(pDC, &bluePen);


		//3 绘制左下摆线_外。 
		CVertex *pp1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, outSkirtLength), 0, -outSkirtGirth / 4, { __T(" U "), __T("J'") }));
		//pp1u->draw(pDC, &bluePen);
		//4 绘制右下摆线_外。  
		CVertex *pp1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, outSkirtLength), 0, outSkirtGirth / 4, { __T("J'"), __T(" T ") }));
		//pp1ur->draw(pDC, &bluePen);


		// 绘制左侧缝线1_上
		CVertex *s1u = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1u->draw(pDC, &redPen);
		// 绘制右侧缝线1_上
		CVertex *s1ur = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1ur->draw(pDC, &redPen);


		// 绘制左侧缝线2_上
		CVertex *s2u = new CVertex(new LineAndLineConstraintRelation(h1u, LineStOrEd::START, pp1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2u->draw(pDC, &redPen);
		// 绘制右侧缝线2_上
		CVertex *s2ur = new CVertex(new LineAndLineConstraintRelation(h1ur, LineStOrEd::END, pp1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2ur->draw(pDC, &redPen);

		// 绘制下摆线――外层
		CVertex *heo = new CVertex(new ArcAndLineConstraintRelation(pp1u, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, outSkirtLength + 5), Quadrant::THREE, { __T("B"), __T("C") }));
		heo->draw(pDC, &redPen);
		CVertex *heor = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, outSkirtLength + 5), pp1ur, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		heor->draw(pDC, &redPen);

		CVertex *w1uo = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, (outSkirtLength - 5)), pp1u, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		w1uo->draw(pDC, &redPenx);
		CVertex *w1uor = new CVertex(new ArcAndLineConstraintRelation(pp1ur, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, (outSkirtLength - 5)), Quadrant::ONE, { __T("B"), __T("C") }));
		w1uor->draw(pDC, &redPenx);


	}
	void static TestDraw_ReversKnitting_2D_Style3_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(600, 320) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double outSkirtLength = 2 * bodyLength/3;
		double outSkirtGirth = hemGirth + 16;

		double rectWidthV_Body = hemGirth / 2;
		double rectLengthV_Body = bodyLength;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/

		//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START,0), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);

		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);

		// 绘制左侧缝线1
		CVertex *s1 = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1->draw(pDC, &redPen);
		// 绘制右侧缝线1
		CVertex *s1r = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1r->draw(pDC, &redPen);


		// 绘制左侧缝线2
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2->draw(pDC, &redPen);
		// 绘制右侧缝线2
		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2r->draw(pDC, &redPen);


		// 绘制下腰围线
		CVertex *w1 = new CVertex(new ArcAndLineConstraintRelation(ww1, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, 3.5), Quadrant::THREE, { __T("B"), __T("C") }));
		w1->draw(pDC, &bluePen);
		CVertex *w1r = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 3.5), ww1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		w1r->draw(pDC, &bluePen);

		// 绘制上腰围线
		CVertex *w1u = new CVertex(new ArcAndLineConstraintRelation( aa1, PointOnLinePosition(LineStOrEd::START, -3.5), ww1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		w1u->draw(pDC, &bluePen);
		CVertex *w1ur = new CVertex(new ArcAndLineConstraintRelation(ww1r, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, -3.5), Quadrant::ONE, { __T("B"), __T("C") }));
		w1ur->draw(pDC, &bluePen);

		//8 绘制左臀围线_上。  
		CVertex *h1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -hipLength), 0, -(hipGirth / 4 + 3), { __T("W"), __T("H'") }));
		h1u->draw(pDC, &bluePen);
		//9 绘制右臀围线_上。  
		CVertex *h1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -hipLength), 0, hipGirth / 4 + 3 , { __T("H'"), __T("R") }));
		h1ur->draw(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *pp1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -outSkirtLength), 0, -outSkirtGirth / 4, { __T(" U "), __T("J'") }));
		pp1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -outSkirtLength), 0, outSkirtGirth / 4, { __T("J'"), __T(" T ") }));
		pp1ur->draw(pDC, &redPen);


		// 绘制左侧缝线1_上
		CVertex *s1u = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1u->draw(pDC, &redPen);
		// 绘制右侧缝线1_上
		CVertex *s1ur = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1ur->draw(pDC, &redPen);


		// 绘制左侧缝线2_上
		CVertex *s2u = new CVertex(new LineAndLineConstraintRelation(h1u, LineStOrEd::START, pp1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2u->draw(pDC, &redPen);
		// 绘制右侧缝线2_上
		CVertex *s2ur = new CVertex(new LineAndLineConstraintRelation(h1ur, LineStOrEd::END, pp1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2ur->draw(pDC, &redPen);

	}
	void static TestDraw_ReversKnitting_2D_Style3_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1000, 320) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;

		// 含参数变量

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 3.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 翻领高
		double outSkirtLength = 2 * bodyLength / 3;
		double outSkirtGirth = hemGirth + 16;

		double rectWidthV_Body = hemGirth / 2;
		double rectLengthV_Body = bodyLength;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/

			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////cVer_map[aa1->m_id] = aa1;

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);

		//8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, hipLength), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);

		// 绘制左侧缝线1
		CVertex *s1 = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1->draw(pDC, &redPen);
		// 绘制右侧缝线1
		CVertex *s1r = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1r->draw(pDC, &redPen);


		// 绘制左侧缝线2
		CVertex *s2 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2->draw(pDC, &redPen);
		// 绘制右侧缝线2
		CVertex *s2r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2r->draw(pDC, &redPen);


		// 绘制下腰围线
		CVertex *w1 = new CVertex(new ArcAndLineConstraintRelation(ww1, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, 3.5), Quadrant::THREE, { __T("B"), __T("C") }));
		w1->draw(pDC, &bluePen);
		CVertex *w1r = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 3.5), ww1r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		w1r->draw(pDC, &bluePen);

		// 绘制上腰围线
		CVertex *w1u = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -3.5), ww1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::TWO, { __T("B"), __T("C") }));
		w1u->draw(pDC, &bluePen);
		CVertex *w1ur = new CVertex(new ArcAndLineConstraintRelation(ww1r, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, -3.5), Quadrant::ONE, { __T("B"), __T("C") }));
		w1ur->draw(pDC, &bluePen);

		//8 绘制左臀围线_上。  
		CVertex *h1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -hipLength), 0, -(hipGirth / 4 + 3), { __T("W"), __T("H'") }));
		h1u->draw(pDC, &bluePen);
		//9 绘制右臀围线_上。  
		CVertex *h1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -hipLength), 0, hipGirth / 4 + 3, { __T("H'"), __T("R") }));
		h1ur->draw(pDC, &bluePen);


		//3 绘制左下摆线。 
		CVertex *pp1u = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -outSkirtLength), 0, -outSkirtGirth / 4, { __T(" U "), __T("J'") }));
		pp1u->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1ur = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, -outSkirtLength), 0, outSkirtGirth / 4, { __T("J'"), __T(" T ") }));
		pp1ur->draw(pDC, &redPen);


		// 绘制左侧缝线1_上
		CVertex *s1u = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s1u->draw(pDC, &redPen);
		// 绘制右侧缝线1_上
		CVertex *s1ur = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s1ur->draw(pDC, &redPen);


		// 绘制左侧缝线2_上
		CVertex *s2u = new CVertex(new LineAndLineConstraintRelation(h1u, LineStOrEd::START, pp1u, LineStOrEd::START, { __T("A"), __T("Q'") }));
		s2u->draw(pDC, &redPen);
		// 绘制右侧缝线2_上
		CVertex *s2ur = new CVertex(new LineAndLineConstraintRelation(h1ur, LineStOrEd::END, pp1ur, LineStOrEd::END, { __T("A"), __T("Q'") }));
		s2ur->draw(pDC, &redPen);

	}
	

	// 5 分割编织――款式1――口袋――袖窿分割
	void static TestDraw_PartitionKnitting_2D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(350, 220) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		// 口袋

		double pocketLengh = 25 /*bustGirth / 6*/;
		double pocketWidth = 20/*0.5 * pocketLengh*/ ;

		//double turnCollarWidthUp = 3;
		double turnCollarWidth = 18;// 比前片多出来的

      // 门襟
		double placketWidth = 5;

		double rectWidthV_Body = bustGirth + 2 * placketWidth;
		double rectLengthV_Body = bodyLength;

		

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		p1q1->draw(pDC, &bluePen);
		p1s1->draw(pDC, &bluePen);

		s1r1->draw(pDC, &bluePen);
		q1r1->draw(pDC, &bluePen);



		//1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(q1r1, p1q1, s1r1, -rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		//2 绘制胸围线。 平行ad， 与ab，cd相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth , { __T("A"), __T("A'") }), CString("AA'"));
		jj1->draw(pDC, &bluePen);

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -(hemGirth / 2 +  placketWidth), { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 2 +  placketWidth, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -(waistGirth / 2 + placketWidth), { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 2 + placketWidth, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		////7 绘制左胸围线。 
		//CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		////jj1->draw(pDC, &bluePen);
		////8 绘制右胸围线。 
		//CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		////jj1r->draw(pDC, &bluePen);


		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -(hipGirth / 2 +  placketWidth), { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 2 +  placketWidth, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -(ribGirth / 2 +  placketWidth), { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 2 + placketWidth, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);

		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth + 2 * placketWidth, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 2 + placketWidth, -1.5, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 2 + placketWidth, 1.5, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1.5, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1.5, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 2 +  placketWidth, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		if (isShortClothes == true) {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);


		}
		else {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);

			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);

			//18 绘制右侧缝线线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);

			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);

		}



		// 左侧缝线
		CVertex *op = new CVertex(new ParaConstraintRelation(p1s1, jj1, s1r1, bustGirth / 4 + placketWidth, { __T("W"), __T("W'") }));
		op->draw(pDC, &bluePen);

		// 右侧缝线
		CVertex *o1p1 = new CVertex(new ParaConstraintRelation(p1s1, jj1, s1r1, 3 * bustGirth / 4 + placketWidth, { __T("W"), __T("W'") }));
		o1p1->draw(pDC, &bluePen);


		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, chestWidth + placketWidth, { __T("W"), __T("W'") }));
		j0k->draw(pDC, &bluePen);

		//// 左背宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 2 - backWidth + placketWidth, { __T("W"), __T("W'") }));
		u0t->draw(pDC, &bluePen);

		// 右背宽线  
		CVertex *u01t1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 2 + backWidth + placketWidth, { __T("W"), __T("W'") }));
		u01t1->draw(pDC, &bluePen);

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth - chestWidth + placketWidth, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);


		// 左后肩线1
		CVertex *f6 = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, -backCollarWidth / 2), 180 - 20, u0t, { __T("S'"), __T("R'") }));
		f6->draw(pDC, &redPen);
		// 左后肩线2
		CVertex *f7 = new CVertex(new  RayConstraintRelation(f6, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, 2, { __T("S'"), __T("R'") }));
		f7->draw(pDC, &redPen);

		// 右后肩线1
		CVertex *f6r = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::HALF, backCollarWidth / 2), 20, u01t1, { __T("S'"), __T("R'") }));
		f6r->draw(pDC, &redPen);
		// 右后肩线2
		CVertex *f7r = new CVertex(new RayConstraintRelation(f6r, PointOnLinePosition(LineStOrEd::END, 0),20, 2, { __T("S'"), __T("R'") }));
		f7r->draw(pDC, &redPen);

		// 左前肩线
		CVertex *r6 = new CVertex(new RayConstraintRelation(f6, PointOnLinePosition(LineStOrEd::START,0), 0, j0k, { __T("S'"), __T("R'") }));
		//r6->draw(pDC, &redPen);
		CVertex *f4 = new CVertex(new RayConstraintRelation(r6, PointOnLinePosition(LineStOrEd::START, 0), 20, p1q1, { __T("S'"), __T("R'") }));
		f4->draw(pDC, &redPen);

		CVertex *f5 = new CVertex(new RayConstraintRelation(f4, PointOnLinePosition(LineStOrEd::END, 0), 20, 2, { __T("S'"), __T("R'") }));
		f5->draw(pDC, &redPen);

		// 右前肩线辅助线1,2
		CVertex *r6r = new CVertex(new RayConstraintRelation(f6r, PointOnLinePosition(LineStOrEd::END, 0), 0, j01k1, { __T("S'"), __T("R'") }));
		//r6r->draw(pDC, &redPen);
		CVertex *f4r = new CVertex(new RayConstraintRelation(r6r, PointOnLinePosition(LineStOrEd::END, 0), 180-20, p1q1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		// 绘制后领窝线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(f6, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), Quadrant::THREE, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);
		CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		e1r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(j0k, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u0t, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f5, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(j0k, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(op, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(u0t, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(f7, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		// 袖窿辅助线
		//// 左前
		////double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j0k->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
		CVertex *vhr = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vhr->draw(pDC, &bluePen);
		// 左后
		CVertex *v1h1r = new CVertex(new RayConstraintRelation(u01t1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T(""), __T("H'") }));
		v1h1r->draw(pDC, &bluePen);

		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vhr, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(o1p1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(u01t1, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f7r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		// 绘制左后领局部编织线
		CVertex *t = new CVertex(new RayConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), 90, -25, { __T("S'"), __T("R'") }));
		t->draw(pDC, &bluePen);

		
		CVertex *t11 = new CVertex(new RayConstraintRelation(f4, PointOnLinePosition(LineStOrEd::START, 0), 20, -15, { __T("S'"), __T("R'") }));
		t11->draw(pDC, &redPen);
		CVertex *t12 = new CVertex(new RayConstraintRelation(t11, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t12->draw(pDC, &redPen);
		CVertex *t13 = new CVertex(new RayConstraintRelation(t12, PointOnLinePosition(LineStOrEd::START, 0), 0, t, { __T("S'"), __T("R'") }));
		t13->draw(pDC, &redPen);
		CVertex *t14 = new CVertex(new RayConstraintRelation(t13, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t14->draw(pDC, &redPen);


		CVertex *t21 = new CVertex(new RayConstraintRelation(t14, PointOnLinePosition(LineStOrEd::START, 0), 20, -15, { __T("S'"), __T("R'") }));
		t21->draw(pDC, &redPen);
		CVertex *t22 = new CVertex(new RayConstraintRelation(t21, PointOnLinePosition(LineStOrEd::START, 0), 90, -2, { __T("S'"), __T("R'") }));
		t22->draw(pDC, &redPen);
		CVertex *t23 = new CVertex(new RayConstraintRelation(t22, PointOnLinePosition(LineStOrEd::START, 0), 0, t, { __T("S'"), __T("R'") }));
		t23->draw(pDC, &redPen);
		CVertex *t24 = new CVertex(new RayConstraintRelation(t23, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t24->draw(pDC, &redPen);

		CVertex *t31 = new CVertex(new RayConstraintRelation(t24, PointOnLinePosition(LineStOrEd::START, 0), 20, -15, { __T("S'"), __T("R'") }));
		t31->draw(pDC, &redPen);
		CVertex *t32 = new CVertex(new RayConstraintRelation(t31, PointOnLinePosition(LineStOrEd::START, 0), 90, -2, { __T("S'"), __T("R'") }));
		t32->draw(pDC, &redPen);
		CVertex *t33 = new CVertex(new RayConstraintRelation(t32, PointOnLinePosition(LineStOrEd::START, 0), 0, t, { __T("S'"), __T("R'") }));
		t33->draw(pDC, &redPen);
		CVertex *t34 = new CVertex(new RayConstraintRelation(t33, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t34->draw(pDC, &redPen);


		CVertex *t41 = new CVertex(new RayConstraintRelation(t34, PointOnLinePosition(LineStOrEd::START, 0), 20, -15, { __T("S'"), __T("R'") }));
		t41->draw(pDC, &redPen);
		CVertex *t42 = new CVertex(new RayConstraintRelation(t41, PointOnLinePosition(LineStOrEd::START, 0), 90, -2, { __T("S'"), __T("R'") }));
		t42->draw(pDC, &redPen);
		CVertex *t43 = new CVertex(new RayConstraintRelation(t42, PointOnLinePosition(LineStOrEd::START, 0), 0, t, { __T("S'"), __T("R'") }));
		t43->draw(pDC, &redPen);
		CVertex *t44 = new CVertex(new RayConstraintRelation(t43, PointOnLinePosition(LineStOrEd::END, 0), 90, -3, { __T("S'"), __T("R'") }));
		t44->draw(pDC, &redPen);

		// 领线
		// 横
		CVertex *t51 = new CVertex(new RayConstraintRelation(t44, PointOnLinePosition(LineStOrEd::START, 0),0, -turnCollarWidth, { __T("S'"), __T("R'") }));
		t51->draw(pDC, &redPen);
		// 横
		CVertex *t52 = new CVertex(new RayConstraintRelation(t51, PointOnLinePosition(LineStOrEd::START, 0), 90, p1q1, { __T("S'"), __T("R'") }));
		t52->draw(pDC, &redPen);
		// 弧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(t52, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, -3)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);



		// 绘制右后领局部编织线
		CVertex *tr = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), 90, -25, { __T("S'"), __T("R'") }));
		tr->draw(pDC, &bluePen);


		CVertex *t11r = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), 180-20, -15, { __T("S'"), __T("R'") }));
		t11r->draw(pDC, &redPen);
		CVertex *t12r = new CVertex(new RayConstraintRelation(t11r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t12r->draw(pDC, &redPen);
		CVertex *t13r = new CVertex(new RayConstraintRelation(t12r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t13r->draw(pDC, &redPen);
		CVertex *t14r = new CVertex(new RayConstraintRelation(t13r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t14r->draw(pDC, &redPen);
/**/

		CVertex *t21r = new CVertex(new RayConstraintRelation(t14r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t21r->draw(pDC, &redPen);
		CVertex *t22r = new CVertex(new RayConstraintRelation(t21r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t22r->draw(pDC, &redPen);
		CVertex *t23r = new CVertex(new RayConstraintRelation(t22r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t23r->draw(pDC, &redPen);
		CVertex *t24r = new CVertex(new RayConstraintRelation(t23r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t24r->draw(pDC, &redPen);



		CVertex *t31r = new CVertex(new RayConstraintRelation(t24r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t31r->draw(pDC, &redPen);
		CVertex *t32r = new CVertex(new RayConstraintRelation(t31r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t32r->draw(pDC, &redPen);
		CVertex *t33r = new CVertex(new RayConstraintRelation(t32r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t33r->draw(pDC, &redPen);
		CVertex *t34r = new CVertex(new RayConstraintRelation(t33r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t34r->draw(pDC, &redPen);

		CVertex *t41r = new CVertex(new RayConstraintRelation(t34r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t41r->draw(pDC, &redPen);
		CVertex *t42r = new CVertex(new RayConstraintRelation(t41r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t42r->draw(pDC, &redPen);
		CVertex *t43r = new CVertex(new RayConstraintRelation(t42r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t43r->draw(pDC, &redPen);
		CVertex *t44r = new CVertex(new RayConstraintRelation(t43r, PointOnLinePosition(LineStOrEd::START, 0), 90, -3, { __T("S'"), __T("R'") }));
		t44r->draw(pDC, &redPen);


		// 领线
		// 横
		CVertex *t51r = new CVertex(new RayConstraintRelation(t44r, PointOnLinePosition(LineStOrEd::START, 0), 0, turnCollarWidth, { __T("S'"), __T("R'") }));
		t51r->draw(pDC, &redPen);
		// 横
		CVertex *t52r = new CVertex(new RayConstraintRelation(t51r, PointOnLinePosition(LineStOrEd::END, 0), 90, p1q1, { __T("S'"), __T("R'") }));
		t52r->draw(pDC, &redPen);
		// 弧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(t52r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, 3)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		//  口袋――右
		CVertex *p1r = new CVertex(new RayConstraintRelation(tr, PointOnLinePosition(LineStOrEd::END, 2* backLength-10), 0, -pocketWidth, { __T("S'"), __T("R'") }));
		p1r->draw(pDC, &redPen);
		CVertex *p2r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2r->draw(pDC, &redPen);

		CVertex *p3r = new CVertex(new RayConstraintRelation(p1r, LineStOrEd::START, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3r->draw(pDC, &redPen);

		CVertex *p4r = new CVertex(new RayConstraintRelation(p3r, LineStOrEd::START, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p4r->draw(pDC, &redPen);

		CVertex *p5r = new CVertex(new ParaConstraintRelation(p4r, p2r, p3r, 2, { __T("W"), __T("W'") }));
		p5r->draw(pDC, &redPen);

		//  口袋――左
		CVertex *p1 = new CVertex(new RayConstraintRelation(t, PointOnLinePosition(LineStOrEd::END, 2 * backLength - 10), 0, pocketWidth, { __T("S'"), __T("R'") }));
		p1->draw(pDC, &redPen);
		CVertex *p2 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::END, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p2->draw(pDC, &redPen);

		CVertex *p3 = new CVertex(new RayConstraintRelation(p1, LineStOrEd::START, 90, -pocketLengh, { __T("S'"), __T("R'") }));
		p3->draw(pDC, &redPen);

		CVertex *p4 = new CVertex(new RayConstraintRelation(p3, LineStOrEd::START, 0, pocketWidth, { __T("S'"), __T("R'") }));
		p4->draw(pDC, &redPen);

		CVertex *p5 = new CVertex(new ParaConstraintRelation(p4, p2, p3, 2, { __T("W"), __T("W'") }));
		p5->draw(pDC, &redPen);

		// 翻折线
		CVertex *g1 = new CVertex(new LineAndLineConstraintRelation(f4, LineStOrEd::START, ww1, PointOnLinePosition(LineStOrEd::START, 0), { __T("A"), __T("Q'") }));
		g1->draw(pDC, &redPenx);

		CVertex *g1r = new CVertex(new LineAndLineConstraintRelation(f4r, LineStOrEd::END, ww1r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		g1r->draw(pDC, &redPenx);

	}
	void static TestDrawV_PartitionKnitting_2D_Style1_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(950, 200) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength* para.m_ratio;
		
		
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = sleeveLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

		 //袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("z"), __T("z'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("u"), __T("u'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("x'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("x"), __T("") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("w'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("w"), __T("") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("q'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("r'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("s'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("t'"), __T("") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("q"), __T("") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("r"), __T("") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("s"), __T("") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("t") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("v'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("v") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);
	}
	void static TestDrawV_PartitionKnitting_2D_Style1_Sleeve_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(70, 200) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength* para.m_ratio;
		
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = sleeveLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

		 //袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("Z"), __T("Z'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("U"), __T("U'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("X'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("X"), __T("") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("W'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("W"), __T("") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("Q'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("R'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("S'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("T'"), __T("") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("Q"), __T("") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("R"), __T("") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("S"), __T("") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("T") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("V'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("V") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);
	}
	
	// 5 分割编织――款式1――口袋――后中分割
	void static TestDraw_PartitionKnitting_3D_Style(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(350, 120) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		double sleeveLength = para.m_sleeveLength;


		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;



		// 口袋

		double pocketLengh = bustGirth / 12;
		double pocketWidth = 3 * pocketLengh / 2;

		double turnCollarWidthUp = 3;
		double turnCollarWidth = 6;

		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		s1r1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);*/

		// 绘制胸围线
		CVertex *gg1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth + 2, { __T("W"), __T("W'") }));
		//gg1->draw(pDC, &bluePen);

		// 绘制腰围线
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->draw(pDC, &bluePen);

		// 绘制后中线
		CVertex *zz1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, bustGirth / 4, { __T("W"), __T("W'") }));
		//zz1->draw(pDC, &bluePen);


		// 左胸宽线  
		CVertex *j0k = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 4 - chestWidth, { __T("W"), __T("W'") }));
		//j0k->draw(pDC, &bluePen);
		// 右胸宽线  
		CVertex *u0t = new CVertex(new ParaConstraintRelation(p1s1, p1q1, gg1, bustGirth / 4 + chestWidth, { __T("W"), __T("W'") }));
		//u0t->draw(pDC, &bluePen);


		// 后领宽-左
		CVertex *c1 = new CVertex(new RayConstraintRelation(zz1, LineStOrEd::START, 0, -(backCollarWidth / 2 - 2), { __T("S'"), __T("R'") }));
		//c1->draw(pDC, &redPen);
		// 后领宽-右
		CVertex *cr = new CVertex(new RayConstraintRelation(zz1, LineStOrEd::START, 0, backCollarWidth / 2 - 2, { __T("S'"), __T("R'") }));
		//cr->draw(pDC, &redPen);


		//左后领-上 
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(c1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, -2.5)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(cr, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		fgh1->draw(pDC, &redPen);


		//左后领-下 

		CVertex *b5 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, 2.5, { __T("W"), __T("W'") }));
		//b5->draw(pDC, &greenPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(b5, PointOnLinePosition(LineStOrEd::HALF, -6.5)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(b5, PointOnLinePosition(LineStOrEd::HALF, 6.5)));
		CVertex *fgh6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		fgh6->draw(pDC, &redPen);



		// 翻领辅助线-胸围线上
		CVertex *b1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body / 6, { __T("W"), __T("W'") }));
		//b1->draw(pDC, &bluePen);
		CVertex *b2 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, 1 * rectLengthV_Body / 4, { __T("W"), __T("W'") }));
		//b2->draw(pDC, &bluePen);
		//腰下
		CVertex *b3 = new CVertex(new ParaConstraintRelation(ww1, p1s1, q1r1, 5, { __T("W"), __T("W'") }));
		//b3->draw(pDC, &bluePen);
		//腰上
		CVertex *b4 = new CVertex(new ParaConstraintRelation(ww1, p1s1, q1r1, -6, { __T("W"), __T("W'") }));
		//b4->draw(pDC, &bluePen);


		//肩线-左
		CVertex *s1 = new CVertex(new RayConstraintRelation(c1, LineStOrEd::START, -20, j0k, { __T("S'"), __T("R'") }));
		s1->draw(pDC, &redPen);
		//肩线-右
		CVertex *sr = new CVertex(new RayConstraintRelation(cr, LineStOrEd::END, 20, u0t, { __T("S'"), __T("R'") }));
		sr->draw(pDC, &redPen);

		//翻领-内-左
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(c1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, -6)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, -4.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 10)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

		//翻领-外-左  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(s1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, -22)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, -18)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, -11)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(b4, PointOnLinePosition(LineStOrEd::HALF, -10)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1, PointOnLinePosition(LineStOrEd::HALF, -1.0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);


		//翻领-内-右
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(cr, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, 6)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, 4.5)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, 2.5)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(zz1, PointOnLinePosition(LineStOrEd::START, armHoleDepth + 10)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(b3, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		CVertex *fgh3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		fgh3->draw(pDC, &redPen);

		//翻领-外-右
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(sr, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b1, PointOnLinePosition(LineStOrEd::HALF, 22)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b2, PointOnLinePosition(LineStOrEd::HALF, 18)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(gg1, PointOnLinePosition(LineStOrEd::HALF, 11)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b4, PointOnLinePosition(LineStOrEd::HALF, 10)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(b3, PointOnLinePosition(LineStOrEd::HALF, -2.5)));
		CVertex *fgh5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		fgh5->draw(pDC, &redPen);


		// 左袖窿-直
		CVertex *f1 = new CVertex(new LineAndLineConstraintRelation(s1, LineStOrEd::START, j0k, PointOnLinePosition(LineStOrEd::HALF, 0), { __T("A"), __T("Q'") }));
		f1->draw(pDC, &redPen);
		// 右袖窿-直
		CVertex *fr = new CVertex(new LineAndLineConstraintRelation(sr, LineStOrEd::END, u0t, PointOnLinePosition(LineStOrEd::HALF, 0), { __T("A"), __T("Q'") }));
		fr->draw(pDC, &redPen);

		//左袖窿-弧 
		CVertex *fc1 = new CVertex(new ArcAndLineConstraintRelation(gg1, PointOnLinePosition(LineStOrEd::START, 0), f1, PointOnLinePosition(LineStOrEd::HALF, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		fc1->draw(pDC, &redPen);
		//右袖窿-弧 
		CVertex *fcr = new CVertex(new ArcAndLineConstraintRelation(fr, PointOnLinePosition(LineStOrEd::HALF, 0), gg1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		fcr->draw(pDC, &redPen);


		// 侧缝线-左
		CVertex *ss1 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, p1s1, PointOnLinePosition(LineStOrEd::END, -3), { __T("A"), __T("Q'") }));
		ss1->draw(pDC, &redPen);
		// 侧缝线-右
		CVertex *ssr = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, q1r1, PointOnLinePosition(LineStOrEd::END, -2), { __T("A"), __T("Q'") }));
		ssr->draw(pDC, &redPen);


		// 前中线
		CVertex *ff = new CVertex(new LineAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, -2.5), b3, PointOnLinePosition(LineStOrEd::HALF, -2.5), { __T("A"), __T("Q'") }));
		ff->draw(pDC, &redPen);


		//左下摆线-弧 
		CVertex *h1 = new CVertex(new ArcAndLineConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, 0), ff, PointOnLinePosition(LineStOrEd::END, -2.5), Quadrant::THREE, { __T("B"), __T("C") }));
		h1->draw(pDC, &redPen);
		//右下摆线-弧 
		CVertex *hr = new CVertex(new ArcAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::HALF, -2.5), ssr, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		hr->draw(pDC, &redPen);


		//绘制左袖

       //袖中线001
		CVertex *eo1 = new CVertex(new RayConstraintRelation(s1, LineStOrEd::START, 180 - sleeveTiltAngle, sleeveLength, { __T("V'"), __T("H'") }));
		eo1->draw(pDC, &redPen);

		////袖肥jj1
		CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//rj1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
		//er->draw(pDC, &greenPen);

		// 左袖山留针线  
		CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//of->draw(pDC, &greenPen);
		CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//oh->draw(pDC, &greenPen);


		// 袖口
		CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		om1->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
		//jk1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		kl1->draw(pDC, &redPen);
		CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		lm1->draw(pDC, &redPen);



		//绘制右袖
		  //袖中线001
		CVertex *e1o1 = new CVertex(new RayConstraintRelation(sr, LineStOrEd::END, sleeveTiltAngle, sleeveLength, { __T("V'"), __T("H'") }));
		e1o1->draw(pDC, &redPen);
		//袖肥jj1
		CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//r1j1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
		//e1r->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//of1->draw(pDC, &greenPen);
		CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//oh1->draw(pDC, &greenPen);

		// 袖口
		CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, sleeveLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol11->draw(pDC, &redPen);
		// 袖口罗纹
		CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, sleeveLength - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol12->draw(pDC, &redPen);
		//右腋下直栏
		CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		//j1k11->draw(pDC, &redPen);

		//// 右侧缝
		CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		k1l11->draw(pDC, &redPen);
		CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		l1m11->draw(pDC, &redPen);	
	}
	void static TestDraw_PartitionKnitting_2D_Style_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1050, 200) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;

		
		// 含参数变量
		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		// 口袋

		double pocketLengh = 25 /*bustGirth / 6*/;
		double pocketWidth = 20/*0.5 * pocketLengh*/;

		//double turnCollarWidthUp = 3;
		double turnCollarWidth = 18;// 比前片多出来的

	  // 门襟
		double placketWidth = 5;
		double rectWidthV_Body = bustGirth / 4 +placketWidth;
		double rectLengthV_Body = bodyLength;
		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		p1q1->draw(pDC, &bluePen);
		p1s1->draw(pDC, &bluePen);

		s1r1->draw(pDC, &bluePen);
		q1r1->draw(pDC, &bluePen);


		//2 绘制胸围线。 平行ad， 与ab，cd相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth, { __T("A"), __T("A'") }), CString("AA'"));
		jj1->draw(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("A"), __T("A'") }), CString("AA'"));
		pp1r->draw(pDC, &redPen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(bodyLength - backLength), { __T("A"), __T("A'") }), CString("AA'"));
		ww1r->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(bodyLength - (backLength + hipLength)), { __T("A"), __T("A'") }), CString("AA'"));
		h1r->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("A"), __T("A'") }), CString("AA'"));
		i1r->draw(pDC, &redPen);

         // 绘制侧缝线
		if (isShortClothes == true) {

			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx0 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, i1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx0->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::START, pp1r, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);
			
			
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, i1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);
		}
		else {

			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx0 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, h1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx0->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::START, i1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::START, pp1r, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);
			
			
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);
		}

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth/4 - chestWidth /*+ placketWidth*/, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);


		// 翻折线
		CVertex *r6r = new CVertex(new RayConstraintRelation(ww1r, PointOnLinePosition(LineStOrEd::END, 0), 75, p1q1, { __T("S'"), __T("R'") }));
		r6r->draw(pDC, &redPenx);
		
		//肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(r6r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		//肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		//// 绘制后领窝线
		//CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(f6, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), Quadrant::THREE, { __T("B"), __T("C") }));
		//e1->draw(pDC, &redPen);
		//CVertex *e1r = new CVertex(new ArcAndLineConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), f6r, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		//e1r->draw(pDC, &redPen);


		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j01k1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);


		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 3)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::START, -0.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);


		// 绘制右后领局部编织线
		CVertex *tr = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), 90, -25, { __T("S'"), __T("R'") }));
		tr->draw(pDC, &bluePen);


		CVertex *t11r = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::END, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t11r->draw(pDC, &redPen);
		CVertex *t12r = new CVertex(new RayConstraintRelation(t11r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t12r->draw(pDC, &redPen);
		CVertex *t13r = new CVertex(new RayConstraintRelation(t12r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t13r->draw(pDC, &redPen);
		CVertex *t14r = new CVertex(new RayConstraintRelation(t13r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t14r->draw(pDC, &redPen);
	

		CVertex *t21r = new CVertex(new RayConstraintRelation(t14r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t21r->draw(pDC, &redPen);
		CVertex *t22r = new CVertex(new RayConstraintRelation(t21r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t22r->draw(pDC, &redPen);
		CVertex *t23r = new CVertex(new RayConstraintRelation(t22r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t23r->draw(pDC, &redPen);
		CVertex *t24r = new CVertex(new RayConstraintRelation(t23r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t24r->draw(pDC, &redPen);


		CVertex *t31r = new CVertex(new RayConstraintRelation(t24r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t31r->draw(pDC, &redPen);
		CVertex *t32r = new CVertex(new RayConstraintRelation(t31r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t32r->draw(pDC, &redPen);
		CVertex *t33r = new CVertex(new RayConstraintRelation(t32r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t33r->draw(pDC, &redPen);
		CVertex *t34r = new CVertex(new RayConstraintRelation(t33r, PointOnLinePosition(LineStOrEd::START, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t34r->draw(pDC, &redPen);

		CVertex *t41r = new CVertex(new RayConstraintRelation(t34r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, -15, { __T("S'"), __T("R'") }));
		t41r->draw(pDC, &redPen);
		CVertex *t42r = new CVertex(new RayConstraintRelation(t41r, PointOnLinePosition(LineStOrEd::END, 0), 90, -1.5, { __T("S'"), __T("R'") }));
		t42r->draw(pDC, &redPen);
		CVertex *t43r = new CVertex(new RayConstraintRelation(t42r, PointOnLinePosition(LineStOrEd::START, 0), 0, tr, { __T("S'"), __T("R'") }));
		t43r->draw(pDC, &redPen);
		CVertex *t44r = new CVertex(new RayConstraintRelation(t43r, PointOnLinePosition(LineStOrEd::START, 0), 90, -3, { __T("S'"), __T("R'") }));
		t44r->draw(pDC, &redPen);


		// 领线
		// 横
		CVertex *t51r = new CVertex(new RayConstraintRelation(t44r, PointOnLinePosition(LineStOrEd::START, 0), 0, turnCollarWidth+2, { __T("S'"), __T("R'") }));
		t51r->draw(pDC, &redPen);
		// 横
		CVertex *t52r = new CVertex(new RayConstraintRelation(t51r, PointOnLinePosition(LineStOrEd::END, 0), 90, p1q1, { __T("S'"), __T("R'") }));
		t52r->draw(pDC, &redPen);
		// 弧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(t52r, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, 3)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1r, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *fgh4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		fgh4->draw(pDC, &redPen);
	}
	void static TestDraw_PartitionKnitting_2D_Style_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1350, 200) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;


		// 含参数变量
		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		// 口袋

		double pocketLengh = 25 /*bustGirth / 6*/;
		double pocketWidth = 20/*0.5 * pocketLengh*/;

		//double turnCollarWidthUp = 3;
		double turnCollarWidth = 18;// 比前片多出来的

	  // 门襟
		double placketWidth = 5;
		double rectWidthV_Body = bustGirth / 4 + placketWidth;
		double rectLengthV_Body = bodyLength;
		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		p1q1->draw(pDC, &bluePen);
		p1s1->draw(pDC, &bluePen);

		s1r1->draw(pDC, &bluePen);
		q1r1->draw(pDC, &bluePen);


		//2 绘制胸围线。 平行ad， 与ab，cd相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth, { __T("A"), __T("A'") }), CString("AA'"));
		jj1->draw(pDC, &bluePen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, rectLengthV_Body, { __T("A"), __T("A'") }), CString("AA'"));
		pp1r->draw(pDC, &redPen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(bodyLength - backLength), { __T("A"), __T("A'") }), CString("AA'"));
		ww1r->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -(bodyLength - (backLength + hipLength)), { __T("A"), __T("A'") }), CString("AA'"));
		h1r->draw(pDC, &bluePen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("A"), __T("A'") }), CString("AA'"));
		i1r->draw(pDC, &redPen);

		// 绘制侧缝线
		if (isShortClothes == true) {

			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx0 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, i1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx0->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::START, pp1r, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);


			//18 绘制后中线2
			CVertex *yxr1 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, q1r1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr1->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, i1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);
		}
		else {

			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx0 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::START, h1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx0->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::START, i1r, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::START, pp1r, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);


			//18 绘制后中线2
			CVertex *yxr1 = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END,q1r1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr1->draw(pDC, &redPen);
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制后中线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, i1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);
			//18 绘制后中线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);
		}

		// 右胸宽线  
		CVertex *j01k1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - chestWidth /*+ placketWidth*/, { __T("W"), __T("W'") }));
		j01k1->draw(pDC, &bluePen);


		// 翻折线
		CVertex *r6r = new CVertex(new RayConstraintRelation(ww1r, PointOnLinePosition(LineStOrEd::END, 0), 75, p1q1, { __T("S'"), __T("R'") }));
		//r6r->draw(pDC, &redPenx);

		//肩线1
		CVertex *f4r = new CVertex(new RayConstraintRelation(r6r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, j01k1, { __T("S'"), __T("R'") }));
		f4r->draw(pDC, &redPen);
		//肩线2
		CVertex *f5r = new CVertex(new RayConstraintRelation(f4r, PointOnLinePosition(LineStOrEd::START, 0), 180 - 20, 2, { __T("S'"), __T("R'") }));
		f5r->draw(pDC, &redPen);


		// 绘制后领窝线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(r6r, PointOnLinePosition(LineStOrEd::START, 0), q1r1, PointOnLinePosition(LineStOrEd::START, backCollarWidth / 6), Quadrant::THREE, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);
		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(j01k1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(j01k1, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("") }));
		vh->draw(pDC, &bluePen);


		//左前袖窿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 3)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, PointOnLinePosition(LineStOrEd::START, -0.5)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(j01k1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(f5r, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *fgh2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		fgh2->draw(pDC, &redPen);

	}
	void static TestDrawV_PartitionKnitting_2D_Style_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1600, 320) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength* para.m_ratio;


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = sleeveLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));



		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

		 //袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("z"), __T("z'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("u"), __T("u'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T(""), __T("x'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("x"), __T("") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(""), __T("w'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("w"), __T("") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T(""), __T("q'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T(""), __T("r'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T(""), __T("s'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("t'"), __T("") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("q"), __T("") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("r"), __T("") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("s"), __T("") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T(""), __T("t") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T(""), __T("v'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T(""), __T("v") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);
	}

	// 5 分割编织――款式2――折叠
	void static TestDraw_PartitionKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(700, 220) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;


		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		// 口袋

		double pocketLengh = 25 /*bustGirth / 6*/;
		double pocketWidth = 20/*0.5 * pocketLengh*/;

		//double turnCollarWidthUp = 3;
		double turnCollarWidth = 18;// 比前片多出来的

	  // 门襟
		double placketWidth = bustGirth/12;

		double rectWidthV_Body = bustGirth/4 + placketWidth;
		double rectLengthV_Body = bodyLength;



		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		p1q1->draw(pDC, &bluePen);
		p1s1->draw(pDC, &bluePen);

		s1r1->draw(pDC, &bluePen);
		q1r1->draw(pDC, &bluePen);



		//1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(q1r1, p1q1, s1r1, -placketWidth, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &redPen);

		//2 绘制胸围线。 平行ad， 与ab，cd相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, aa1, armHoleDepth, { __T("A"), __T("A'") }), CString("AA'"));
		jj1->draw(pDC, &bluePen);

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		
		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -(waistGirth / 4), { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -(hipGirth / 4), { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -(ribGirth / 4), { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);

		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);

		CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, i1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		// 后领宽线
		CVertex *dq = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, -(backLength / 4), { __T("V"), __T("I'") }));
		//dq->draw(pDC, &redPen);

		// 11 绘制左后领深线
		CVertex *aq = new CVertex(new RayConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), 90, -(backCollarWidth / 6), { __T("V"), __T("I'") }));
		aq->draw(pDC, &bluePen);

		// 11 绘制左后领窝线
		CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(aq, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		e1->draw(pDC, &redPen);

		//18 绘制袖中线
		CVertex *ay1 = new CVertex(new RayConstraintRelation(aq, PointOnLinePosition(LineStOrEd::START, 0), 360-20, -sleeveLength, { __T("V"), __T("I'") }));
		ay1->draw(pDC, &redPen);
		//19 袖口线
		CVertex *ay2 = new CVertex(new RayConstraintRelation(ay1, PointOnLinePosition(LineStOrEd::START, 0), 90, cuffGirth/2, { __T("V"), __T("I'") }));
		ay2->draw(pDC, &redPen);

		//18 绘制袖侧缝线
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ay2, LineStOrEd::END, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);

	}
	void static TestDraw_PartitionKnitting_2D_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(350, 220) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;


		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		// 口袋

		double pocketLengh = 25 /*bustGirth / 6*/;
		double pocketWidth = 20/*0.5 * pocketLengh*/;

		//double turnCollarWidthUp = 3;
		double turnCollarWidth = 18;// 比前片多出来的

	  // 门襟
		double placketWidth = bustGirth / 12;

		double rectWidthV_Body = bustGirth / 4 + placketWidth;
		double rectLengthV_Body = bodyLength;



		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
		CPen redPenx;
		redPenx.CreatePen(PS_DASH, 1, RGB(255, 0, 0));
		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		p1q1->draw(pDC, &bluePen);
		p1s1->draw(pDC, &bluePen);

		s1r1->draw(pDC, &bluePen);
		q1r1->draw(pDC, &bluePen);



		//1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(q1r1, p1q1, s1r1, -placketWidth, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		//2 绘制胸围线。 平行ad， 与ab，cd相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, aa1, armHoleDepth, { __T("A"), __T("A'") }), CString("AA'"));
		jj1->draw(pDC, &bluePen);

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);

		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -(waistGirth / 4), { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -(hipGirth / 4), { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -(ribGirth / 4), { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);

		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);

		CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, i1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		// 后领宽线
		CVertex *dq = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, 0), 0, -(backLength / 4), { __T("V"), __T("I'") }));
		//dq->draw(pDC, &redPen);

		//// 11 绘制左后领深线
		//CVertex *aq = new CVertex(new RayConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), 90, -(backCollarWidth / 6), { __T("V"), __T("I'") }));
		//aq->draw(pDC, &bluePen);

		//// 11 绘制左后领窝线
		//CVertex *e1 = new CVertex(new ArcAndLineConstraintRelation(aq, PointOnLinePosition(LineStOrEd::START, 0), aa1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		//e1->draw(pDC, &redPen);

		////18 绘制袖中线
		//CVertex *ay1 = new CVertex(new RayConstraintRelation(aq, PointOnLinePosition(LineStOrEd::START, 0), 360 - 20, -sleeveLength, { __T("V"), __T("I'") }));
		//ay1->draw(pDC, &redPen);
		////19 袖口线
		//CVertex *ay2 = new CVertex(new RayConstraintRelation(ay1, PointOnLinePosition(LineStOrEd::START, 0), 90, cuffGirth / 2, { __T("V"), __T("I'") }));
		//ay2->draw(pDC, &redPen);

		////18 绘制袖侧缝线
		//CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ay2, LineStOrEd::END, jj1, LineStOrEd::START, { __T("Y"), __T("X") }));
		////yx->drawWithLabel(pDC, &redPen);
		//yxr->draw(pDC, &redPen);

	}



	// 7 不对称编织 1
	void static TestDrawV_AsymmetricKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(150, 200) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;
		double sleeveLength = para.m_sleeveLength;


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 4.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 4.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

			//p1q1->drawWithLabel(pDC, &greenPen);
			//p1s1->drawWithLabel(pDC, &greenPen);

			//s1r1->drawWithLabel(pDC, &greenPen);
			//q1r1->drawWithLabel(pDC, &greenPen);



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
	   //ww1->drawWithLabel(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		//jj1->drawWithLabel(pDC, &bluePen);


		// 5 绘制下摆线OO1
		//CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		//pp1->draw(pDC, &redPen);
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(p1s1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(aa1, PointOnLinePosition(LineStOrEd::END, 3)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(q1r1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *a2b1q = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		a2b1q->draw(pDC, &redPen);



		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->drawWithLabel(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->drawWithLabel(pDC, &bluePen);

		// 平行于下摆线
		CVertex *p1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p1->draw(pDC, &bluePen);
		CVertex *p2 = new CVertex(new ParaConstraintRelation(p1, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p2->draw(pDC, &bluePen);
		CVertex *p3 = new CVertex(new ParaConstraintRelation(p2, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p3->draw(pDC, &redPen);
		CVertex *p4 = new CVertex(new ParaConstraintRelation(p3, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p4->draw(pDC, &bluePen);
		CVertex *p5 = new CVertex(new ParaConstraintRelation(p4, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p5->draw(pDC, &bluePen);
		CVertex *p6 = new CVertex(new ParaConstraintRelation(p5, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p6->draw(pDC, &bluePen);
		CVertex *p7 = new CVertex(new ParaConstraintRelation(p6, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p7->draw(pDC, &redPen);
		CVertex *p8 = new CVertex(new ParaConstraintRelation(p7, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p8->draw(pDC, &bluePen);
		CVertex *p9 = new CVertex(new ParaConstraintRelation(p8, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p9->draw(pDC, &bluePen);
		CVertex *p10 = new CVertex(new ParaConstraintRelation(p9, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p10->draw(pDC, &bluePen);
		CVertex *p11 = new CVertex(new ParaConstraintRelation(p10, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p11->draw(pDC, &bluePen);
		CVertex *p12 = new CVertex(new ParaConstraintRelation(p11, p1s1, q1r1, -3, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p12->draw(pDC, &bluePen);
		CVertex *p13 = new CVertex(new ParaConstraintRelation(p12, p1s1, q1r1, -5, { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//p13->draw(pDC, &bluePen);
		

		// 绘制左侧缝线  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec3;
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1, PointOnLinePosition(LineStOrEd::START, 2)));
		verPointPairVec3.push_back(std::pair<CVertex*, PointOnLinePosition>(p1s1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *a2b1q3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		a2b1q3->draw(pDC, &redPen);


		// 绘制右侧缝线  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec4;
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(s1r1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p1, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p4, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p5, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p7, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p9, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p10, PointOnLinePosition(LineStOrEd::END, -1)));
		/*verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p11, PointOnLinePosition(LineStOrEd::END, 2)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p12, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(p13, PointOnLinePosition(LineStOrEd::END, 1)));*/
		/*verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(ww1, PointOnLinePosition(LineStOrEd::END, -2)));*/
		verPointPairVec4.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, 1)));
		CVertex *a2b1q4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		a2b1q4->draw(pDC, &redPen);


		// 绘制褶皱线 从下往上
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec5;
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(p1, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec5.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0)));
		CVertex *q1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
		q1->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec6;
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec6.push_back(std::pair<CVertex*, PointOnLinePosition>(p5, PointOnLinePosition(LineStOrEd::ONE_THIRD, 1)));
		CVertex *q2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
		q2->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(p4, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		CVertex *q3 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		q3->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(p4, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(p5, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(p7, PointOnLinePosition(LineStOrEd::ONE_THIRD, 3)));
		CVertex *q4 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
		q4->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec9;
		verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(p5, PointOnLinePosition(LineStOrEd::END, -1)));
		verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec9.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::ONE_THIRD, 3)));
		CVertex *q5 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec9));
		q5->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec10;
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(p7, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec10.push_back(std::pair<CVertex*, PointOnLinePosition>(p9, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		CVertex *q6 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec10));
		q6->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec11;
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(p7, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec11.push_back(std::pair<CVertex*, PointOnLinePosition>(p10, PointOnLinePosition(LineStOrEd::ONE_THIRD, 1)));
		CVertex *q7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec11));
		q7->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec12;
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(p9, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec12.push_back(std::pair<CVertex*, PointOnLinePosition>(p11, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		CVertex *q8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec12));
		q8->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec13;
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(p9, PointOnLinePosition(LineStOrEd::END, -1)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(p10, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec13.push_back(std::pair<CVertex*, PointOnLinePosition>(p12, PointOnLinePosition(LineStOrEd::ONE_THIRD, 3)));
		CVertex *q9 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec13));
		q9->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec14;
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(p10, PointOnLinePosition(LineStOrEd::END, -1)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(p11, PointOnLinePosition(LineStOrEd::HALF, 2)));
		verPointPairVec14.push_back(std::pair<CVertex*, PointOnLinePosition>(p13, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		CVertex *q10 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec14));
		q10->draw(pDC, &redPen);

		//12 绘制左后领宽线
		CVertex *d = new CVertex(new RayConstraintRelation(p1q1, LineStOrEd::HALF, 0, -backCollarWidth/2, { __T("M"), __T("K") }));
		//d->drawWithLabel(pDC, &redPen);
		//13 绘制右后领宽线
		CVertex *dr = new CVertex(new RayConstraintRelation(p1q1, LineStOrEd::HALF, 0, backCollarWidth / 2, { __T("M"), __T("K") }));
		//dr->drawWithLabel(pDC, &redPen);
		
		// 绘制领窝线
		CVertex *br = new CVertex(new ArcAndLineConstraintRelation( aa1, PointOnLinePosition(LineStOrEd::START, -3), dr, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::ONE, { __T("B"), __T("C") }));
		br->draw(pDC, &redPen);
		CVertex *br1 = new CVertex(new ArcAndLineConstraintRelation(dr, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, -3), Quadrant::ONE, { __T("B"), __T("C") }));
		br1->draw(pDC, &redPen);

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(d, LineStOrEd::START, 180 - backShouldAngle, p1s1, { __T("M"), __T("K") }));
		//d->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *der = new CVertex(new RayConstraintRelation(dr, LineStOrEd::END, backShouldAngle, q1r1, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		der->draw(pDC, &redPen);

		

		
		// 袖窿 胸围线以上
		CVertex *jj12 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, (armHoleDepth - 4)/2, { __T("J"), __T("J'") }));
		//jj12->draw(pDC, &bluePen);


		//绘制左袖内侧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec15;
		verPointPairVec15.push_back(std::pair<CVertex*, PointOnLinePosition>(de, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec15.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec15.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::START, -5)));
		verPointPairVec15.push_back(std::pair<CVertex*, PointOnLinePosition>(p1, PointOnLinePosition(LineStOrEd::START, -8)));
		verPointPairVec15.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::START, -14)));
		CVertex *q11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec15));
		q11->draw(pDC, &redPen);

		//绘制左袖外侧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec16;
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(de, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(jj12, PointOnLinePosition(LineStOrEd::START, -9)));
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, -12)));
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::START, -12)));
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::START, -12)));
		verPointPairVec16.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::START, -14)));
		CVertex *q12 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec16));
		q12->draw(pDC, &redPen);

		//绘制右袖内侧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec17;
		verPointPairVec17.push_back(std::pair<CVertex*, PointOnLinePosition>(der, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec17.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, 1)));
		verPointPairVec17.push_back(std::pair<CVertex*, PointOnLinePosition>(p3, PointOnLinePosition(LineStOrEd::END, 5)));
		verPointPairVec17.push_back(std::pair<CVertex*, PointOnLinePosition>(p1, PointOnLinePosition(LineStOrEd::END, 8)));
		verPointPairVec17.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::END, 14)));
		CVertex *q13 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec17));
		q13->draw(pDC, &redPen);


		//绘制右袖外侧
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec18;
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(der, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(jj12, PointOnLinePosition(LineStOrEd::END, 9)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, 12)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(p8, PointOnLinePosition(LineStOrEd::END, 12)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(p6, PointOnLinePosition(LineStOrEd::END, 12)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(p2, PointOnLinePosition(LineStOrEd::END, 14)));
		CVertex *q14 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec18));
		q14->draw(pDC, &redPen);






	}
	void static TestDraw_AsymmetricKnitting_2D_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(550, 330) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth;
		double sleeveLength = para.m_sleeveLength;
		// 含参数变量
		

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 领宽
		double collarWidth = backCollarWidth + 6;
		double armGap = 2;

		double rectWidthV_Body = bustGirth / 2 + sleeveWidth / 2 + armGap;
		double rectLengthV_Body = bodyLength;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


		//1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(q1r1, p1q1, s1r1, -bustGirth/ 4, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////2 绘制胸围线。 平行ad， 与ab，cd相交，
		//CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth , { __T("A"), __T("A'") }), CString("AA'"));
		//jj1->draw(pDC, &bluePen);

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//jj1r->draw(pDC, &bluePen);


		
		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);

		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		//j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		//jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		//lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


	if (isShortClothes == true) {

		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);
		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);


	}
	else {

		//18 绘制左侧缝线线1
		CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		//ay->draw(pDC, &redPen);
		//18 绘制左侧缝线线2
		CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx->draw(pDC, &redPen);

		CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1->draw(pDC, &redPen);
		//18 绘制左侧缝线线3
		CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xv->draw(pDC, &redPen);

		//18 绘制右侧缝线线1
		CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
		//ay->drawWithLabel(pDC, &redPen);
		//ayr->draw(pDC, &redPen);
		//18 绘制右侧缝线线2
		CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yxr->draw(pDC, &redPen);

		//18 绘制右侧缝线线2
		CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
		//yx->drawWithLabel(pDC, &redPen);
		yx1r->draw(pDC, &redPen);

		//18 绘制右侧缝线线3
		CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
		//xv->drawWithLabel(pDC, &redPen);
		xvr->draw(pDC, &redPen);

	}


	//	肩斜长度
    double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
	//double x = sqrt(collarWidth*collarWidth - armHoleDepth * armHoleDepth);
	// 绘制下肩线
	CVertex *s1 = new CVertex(new RayConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, -(sleeveWidth / 2 + armGap)), 90, SL, { __T(" U "), __T("J'") }));
	s1->draw(pDC, &redPen);
	// 绘制上肩线
	CVertex *s1u = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, sleeveWidth/2), 90, -SL, { __T(" U "), __T("J'") }));
	s1u->draw(pDC, &redPen);

	// 领宽线
	CVertex *c1 = new CVertex(new LineAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s1u, LineStOrEd::END, { __T("A"), __T("Q'") }));
	c1->draw(pDC, &redPen);

	// 绘制袖中线――下
	CVertex *ss1 = new CVertex(new RayConstraintRelation(s1, PointOnLinePosition(LineStOrEd::END, 0), 90, sleeveLength, { __T(" U "), __T("J'") }));
	ss1->draw(pDC, &redPen);
	// 袖口线
	CVertex *ss2 = new CVertex(new RayConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, 0), 0, cuffGirth/2, { __T(" U "), __T("J'") }));
	ss2->draw(pDC, &redPen);

	// 绘制袖罗纹线
	CVertex *ss5 = new CVertex(new RayConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
	ss5->draw(pDC, &redPen);

	// 袖侧缝线
	CVertex *ss3 = new CVertex(new LineAndLineConstraintRelation(ss2, LineStOrEd::END, ss5, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
	ss3->draw(pDC, &redPen);

	CVertex *ss6 = new CVertex(new LineAndLineConstraintRelation(ss5, LineStOrEd::END, ww1, PointOnLinePosition(LineStOrEd::START, -2), { __T("A"), __T("Q'") }));
	ss6->draw(pDC, &redPen);

	// 袖腋下线
	CVertex *ss4 = new CVertex(new RayConstraintRelation(ss6, PointOnLinePosition(LineStOrEd::END, 0), 0,2, { __T(" U "), __T("J'") }));
	ss4->draw(pDC, &redPen);

	
	
	// 绘制上袖

	// 袖宽线
	CVertex *s5 = new CVertex(new RayConstraintRelation(s1u, PointOnLinePosition(LineStOrEd::START, 0), 0, sleeveWidth/2, { __T(" U "), __T("J'") }));
	//s5->draw(pDC, &redPen);

	// 绘制袖中线
	CVertex *s6 = new CVertex(new RayConstraintRelation(s1u, PointOnLinePosition(LineStOrEd::START, 0), 90, -sleeveLength, { __T(" U "), __T("J'") }));
	s6->draw(pDC, &redPen);

	// 绘制袖口线
	CVertex *s7 = new CVertex(new RayConstraintRelation(s6, PointOnLinePosition(LineStOrEd::START, 0), 0, cuffGirth/2, { __T(" U "), __T("J'") }));
	s7->draw(pDC, &redPen);

	// 绘制袖罗纹线
	CVertex *s11 = new CVertex(new RayConstraintRelation(s6, PointOnLinePosition(LineStOrEd::START, ribLength), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
	s11->draw(pDC, &redPen);

	// 袖侧缝线
	CVertex *s8 = new CVertex(new LineAndLineConstraintRelation(s7, LineStOrEd::END, s11, PointOnLinePosition(LineStOrEd::END,0), { __T("A"), __T("Q'") }));
	s8->draw(pDC, &redPen);
	CVertex *s12 = new CVertex(new LineAndLineConstraintRelation(s11, LineStOrEd::END, s5, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
	s12->draw(pDC, &redPen);
	
	// 褶皱弧线
		
	CVertex *s9 = new CVertex(new LineAndLineConstraintRelation(s12, LineStOrEd::END, p1q1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("A"), __T("Q'") }));
	s9->draw(pDC, &redPen);
	CVertex *s10 = new CVertex(new LineAndLineConstraintRelation(s9, LineStOrEd::END, ww1r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
	s10->draw(pDC, &redPen);

	// 辅助线
	CVertex *s13 = new CVertex(new LineAndLineConstraintRelation(s9, LineStOrEd::END, s1u, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
	s13->draw(pDC, &bluePen);
	


	}
	void static TestDraw_AsymmetricKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(950, 330) + offset;
		orig = originPoint;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;
		double sleeveLength = para.m_sleeveLength* para.m_ratio;
		// 含参数变量


		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 领宽
		double collarWidth = backCollarWidth + 6;
		double armGap = 2;

		double rectWidthV_Body = bustGirth / 2 + sleeveWidth / 2 + armGap;
		double rectLengthV_Body = bodyLength;

		bool isShortClothes = bodyLength / bustGirth > 0.72 ? false : true;

		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//1 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(q1r1, p1q1, s1r1, -bustGirth / 4, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		////2 绘制胸围线。 平行ad， 与ab，cd相交，
		//CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth , { __T("A"), __T("A'") }), CString("AA'"));
		//jj1->draw(pDC, &bluePen);

		//3 绘制左下摆线。 
		CVertex *pp1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T(" U "), __T("J'") }));
		pp1->draw(pDC, &redPen);
		//4 绘制右下摆线。  
		CVertex *pp1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("J'"), __T(" T ") }));
		pp1r->draw(pDC, &redPen);


		//5 绘制左腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, -waistGirth / 4, { __T(" X "), __T(" G'") }));
		ww1->draw(pDC, &bluePen);
		//6 绘制右腰围线。  backLength = bodyLength - 15 ;
		CVertex *ww1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength)), 0, waistGirth / 4, { __T("G'"), __T(" Q ") }));
		ww1r->draw(pDC, &bluePen);


		//7 绘制左胸围线。 
		CVertex *jj1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, -bustGirth / 4, { __T("Y"), __T("H") }));
		//jj1->draw(pDC, &bluePen);
		//8 绘制右胸围线。 
		CVertex *jj1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::START, armHoleDepth), 0, bustGirth / 4, { __T("H"), __T("P") }));
		//jj1r->draw(pDC, &bluePen);



		 //8 绘制左臀围线。  
		CVertex *h1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, -hipGirth / 4, { __T("W"), __T("H'") }));
		h1->draw(pDC, &bluePen);
		//9 绘制右臀围线。  
		CVertex *h1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -(bodyLength - (backLength + hipLength))), 0, hipGirth / 4, { __T("H'"), __T("R") }));
		h1r->draw(pDC, &bluePen);


		//10 绘制左罗纹线。  
		CVertex *i1 = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -ribGirth / 4, { __T("V"), __T("I'") }));
		i1->draw(pDC, &redPen);
		//11 绘制右罗纹线。  
		CVertex *i1r = new CVertex(new RayConstraintRelation(aa1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, ribGirth / 4, { __T("I'"), __T("S") }));
		i1r->draw(pDC, &redPen);

		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1r, bustGirth / 4, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		//j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		//jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1r, waistGirth / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, 0, -1, { __T("L"), __T("Z") }));
		//lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, 0, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(i1r, ribGirth / 4, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(i1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		if (isShortClothes == true) {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);
			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);


		}
		else {

			//18 绘制左侧缝线线1
			CVertex *ay = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ww1, LineStOrEd::START, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			//ay->draw(pDC, &redPen);
			//18 绘制左侧缝线线2
			CVertex *yx = new CVertex(new LineAndLineConstraintRelation(ww1, LineStOrEd::START, h1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx->draw(pDC, &redPen);

			CVertex *yx1 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, no, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1->draw(pDC, &redPen);
			//18 绘制左侧缝线线3
			CVertex *xv = new CVertex(new LineAndLineConstraintRelation(i1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xv->draw(pDC, &redPen);

			//18 绘制右侧缝线线1
			CVertex *ayr = new CVertex(new LineAndLineConstraintRelation(jj1r, LineStOrEd::END, ww1r, LineStOrEd::END, { __T("A"), __T("Y") }));
			//ay->drawWithLabel(pDC, &redPen);
			//ayr->draw(pDC, &redPen);
			//18 绘制右侧缝线线2
			CVertex *yxr = new CVertex(new LineAndLineConstraintRelation(ww1r, LineStOrEd::END, h1r, LineStOrEd::END, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yxr->draw(pDC, &redPen);

			//18 绘制右侧缝线线2
			CVertex *yx1r = new CVertex(new LineAndLineConstraintRelation(h1r, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("Y"), __T("X") }));
			//yx->drawWithLabel(pDC, &redPen);
			yx1r->draw(pDC, &redPen);

			//18 绘制右侧缝线线3
			CVertex *xvr = new CVertex(new LineAndLineConstraintRelation(i1r, LineStOrEd::END, pp1r, LineStOrEd::END, { __T("X"), __T("W") }));
			//xv->drawWithLabel(pDC, &redPen);
			xvr->draw(pDC, &redPen);

		}


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//double x = sqrt(collarWidth*collarWidth - armHoleDepth * armHoleDepth);
		// 绘制下肩线
		CVertex *s1 = new CVertex(new RayConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, -(sleeveWidth / 2 + armGap)), 90, SL, { __T(" U "), __T("J'") }));
		s1->draw(pDC, &redPen);
		// 绘制上肩线
		CVertex *s1u = new CVertex(new RayConstraintRelation(p1q1, PointOnLinePosition(LineStOrEd::START, sleeveWidth / 2), 90, -SL, { __T(" U "), __T("J'") }));
		s1u->draw(pDC, &redPen);

		// 领宽线
		CVertex *c1 = new CVertex(new LineAndLineConstraintRelation(s1, PointOnLinePosition(LineStOrEd::START, 0), s1u, LineStOrEd::END, { __T("A"), __T("Q'") }));
		c1->draw(pDC, &redPen);

		// 绘制袖中线――下
		CVertex *ss1 = new CVertex(new RayConstraintRelation(s1, PointOnLinePosition(LineStOrEd::END, 0), 90, sleeveLength, { __T(" U "), __T("J'") }));
		ss1->draw(pDC, &redPen);
		// 袖口线
		CVertex *ss2 = new CVertex(new RayConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, 0), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
		ss2->draw(pDC, &redPen);

		// 绘制袖罗纹线
		CVertex *ss5 = new CVertex(new RayConstraintRelation(ss1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
		ss5->draw(pDC, &redPen);

		// 袖侧缝线
		CVertex *ss3 = new CVertex(new LineAndLineConstraintRelation(ss2, LineStOrEd::END, ss5, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		ss3->draw(pDC, &redPen);

		CVertex *ss6 = new CVertex(new LineAndLineConstraintRelation(ss5, LineStOrEd::END, ww1, PointOnLinePosition(LineStOrEd::START, -2), { __T("A"), __T("Q'") }));
		ss6->draw(pDC, &redPen);

		// 袖腋下线
		CVertex *ss4 = new CVertex(new RayConstraintRelation(ss6, PointOnLinePosition(LineStOrEd::END, 0), 0, 2, { __T(" U "), __T("J'") }));
		ss4->draw(pDC, &redPen);



		// 绘制上袖

		// 袖宽线
		CVertex *s5 = new CVertex(new RayConstraintRelation(s1u, PointOnLinePosition(LineStOrEd::START, 0), 0, sleeveWidth / 2, { __T(" U "), __T("J'") }));
		//s5->draw(pDC, &redPen);

		// 绘制袖中线
		CVertex *s6 = new CVertex(new RayConstraintRelation(s1u, PointOnLinePosition(LineStOrEd::START, 0), 90, -sleeveLength, { __T(" U "), __T("J'") }));
		s6->draw(pDC, &redPen);

		// 绘制袖口线
		CVertex *s7 = new CVertex(new RayConstraintRelation(s6, PointOnLinePosition(LineStOrEd::START, 0), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
		s7->draw(pDC, &redPen);

		// 绘制袖罗纹线
		CVertex *s11 = new CVertex(new RayConstraintRelation(s6, PointOnLinePosition(LineStOrEd::START, ribLength), 0, cuffGirth / 2, { __T(" U "), __T("J'") }));
		s11->draw(pDC, &redPen);

		// 袖侧缝线
		CVertex *s8 = new CVertex(new LineAndLineConstraintRelation(s7, LineStOrEd::END, s11, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s8->draw(pDC, &redPen);
		CVertex *s12 = new CVertex(new LineAndLineConstraintRelation(s11, LineStOrEd::END, s5, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s12->draw(pDC, &redPen);

		// 褶皱弧线

		CVertex *s9 = new CVertex(new LineAndLineConstraintRelation(s12, LineStOrEd::END, p1q1, PointOnLinePosition(LineStOrEd::THREE_FORTH, 0), { __T("A"), __T("Q'") }));
		s9->draw(pDC, &redPen);
		CVertex *s10 = new CVertex(new LineAndLineConstraintRelation(s9, LineStOrEd::END, ww1r, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s10->draw(pDC, &redPen);

		// 辅助线
		CVertex *s13 = new CVertex(new LineAndLineConstraintRelation(s9, LineStOrEd::END, s1u, PointOnLinePosition(LineStOrEd::END, 0), { __T("A"), __T("Q'") }));
		s13->draw(pDC, &bluePen);



	}



	// 8  交错编织 1
	void static TestDrawV_InterKnitting_3D_Style1(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(300, 320) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow =  1.5 * hatHeight / 5;
		double hatStraight =  hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		// 口袋

		double pocketLengh = bustGirth/6;
		double pocketWidth = 2 * pocketLengh / 3;
	


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->drawWithLabel(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		//jj1->drawWithLabel(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->drawWithLabel(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->drawWithLabel(pDC, &bluePen);





		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->drawWithLabel(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//绘制前领窝辅助弧线ab1c1
	/*	CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &bluePen);*/

		//绘制左前领窝弧线ab1c1
		/*CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::THREE, { __T("B"), __T("C") }));
		bdf->draw(pDC, &redPen);*/

		//绘制右前领窝弧线ab1c1
		/*CVertex *bdf1 = new CVertex(new ArcAndLineConstraintRelation( aa1, PointOnLinePosition(LineStOrEd::START, 4), d1q1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		bdf1->draw(pDC, &redPen);*/

		
		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);




		//绘制左袖

		//袖中线001
		CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		eo1->draw(pDC, &redPen);

		//袖肥jj1
		CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//rj1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
		//er->draw(pDC, &greenPen);

		// 左袖山留针线  
		CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//oh->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		f1ghi7->draw(pDC, &redPen);


		// 袖口
		CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		om1->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
		//jk1->draw(pDC, &redPen);




		// 左侧缝
		CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		kl1->draw(pDC, &redPen);
		CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		lm1->draw(pDC, &redPen);



		//绘制右袖
		  //袖中线001
		CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		e1o1->draw(pDC, &redPen);
		//袖肥jj1
		CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//r1j1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
		//e1r->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//oh1->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::START));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
		f1ghi8->draw(pDC, &redPen);

		// 袖口
		CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol11->draw(pDC, &redPen);
		// 袖口罗纹
		CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol12->draw(pDC, &redPen);
		//右腋下直栏
		CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		//j1k11->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		k1l11->draw(pDC, &redPen);
		CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		l1m11->draw(pDC, &redPen);

		// 帽子
		CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &redPen);
		// 帽子左侧辅助线1
		/*CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -4, -hatHeight, { __T("J'"), __T("K'") }));
		h1->draw(pDC, &redPen);*/
		CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -3, -hatHeight, { __T("J'"), __T("K'") }));
		//h1->draw(pDC, &greenPen);

		// 帽子左侧辅助线2
		/*CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid-8, -hatHeight, { __T("J'"), __T("K'") }));
		h2->draw(pDC, &redPen);*/

		CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid - 9, -hatHeight, { __T("J'"), __T("K'") }));
		//h2->draw(pDC, &greenPen);


		CVertex *dd2 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatNarrow, { __T("F"), __T("F'") }));
		//dd2->draw(pDC, &bluePen);
		CVertex *dd3 = new CVertex(new ParaConstraintRelation(dd2, h1, h2, -hatStraight, { __T("F"), __T("F'") }));
		//dd3->draw(pDC, &bluePen);
		CVertex *dd4 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatHeight, { __T("F"), __T("F'") }));
		//dd4->draw(pDC, &bluePen);

		//左侧冒沿

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec18;
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, LineStOrEd::START));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd2, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd3, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd4, PointOnLinePosition(LineStOrEd::START, 9)));
		CVertex *f1ghi18 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec18));
		f1ghi18->draw(pDC, &redPen);

		// 右侧帽沿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec28;
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, LineStOrEd::END));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd2, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd3, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd4, PointOnLinePosition(LineStOrEd::END, -9)));
		CVertex *f1ghi28 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec28));
		f1ghi28->draw(pDC, &redPen);

		// 帽顶线
		CVertex * dd14 = new CVertex(new LineAndLineConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::START, 9), dd4, PointOnLinePosition(LineStOrEd::END, -8), { __T("K'"), __T("L'") }));
		dd14->draw(pDC, &redPen);
		
		// 左侧帽沿内线
		CVertex *d1d4 = new CVertex(new RayConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::START, 9), 90, hatHeight-hatNarrow, { __T("V'"), __T("H'") }));
		d1d4->draw(pDC, &redPen);

		// 右侧帽沿内线
		CVertex *d1d4r = new CVertex(new RayConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::END, -9), 90, hatHeight - hatNarrow, { __T("V'"), __T("H'") }));
		d1d4r->draw(pDC, &redPen);

		// 左侧帽沿内线弧线
		CVertex *d1d2 = new CVertex(new ArcAndLineConstraintRelation( d1d4, PointOnLinePosition(LineStOrEd::END, 0), dd1, PointOnLinePosition(LineStOrEd::HALF, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		d1d2->draw(pDC, &redPen);

		// 右侧帽沿内线弧线
		CVertex *d1d2R = new CVertex(new ArcAndLineConstraintRelation(dd1, PointOnLinePosition(LineStOrEd::HALF, 0), d1d4r, PointOnLinePosition(LineStOrEd::END, 0),Quadrant::FOUR, { __T("B"), __T("C") }));
		d1d2R->draw(pDC, &redPen);

		// 口袋

		// 绘制  袋底直栏1
		CVertex *nn1 = new CVertex(new LineAndLineConstraintRelation(n1o1, PointOnLinePosition(LineStOrEd::START, -3), no, PointOnLinePosition(LineStOrEd::START, -3), { __T("K'"), __T("L'") }));	
		//nn1->draw(pDC, &greenPen);

		// 绘制 袋底直栏2
		CVertex *nn2 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, - 2.5 * pocketLengh/6, { __T("F"), __T("F'") }));
		//nn2->draw(pDC, &bluePen);

		// 绘制 袋底直栏2
		CVertex *nn3 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -pocketLengh, { __T("F"), __T("F'") }));
		//nn3->draw(pDC, &redPen);


		// 右侧袋线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec38;
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *f1ghi38 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec38));
		f1ghi38->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec48;
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *f1ghi48 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec48));
		f1ghi48->draw(pDC, &redPen);


		CVertex *nn11 = new CVertex(new LineAndLineConstraintRelation(nn1, PointOnLinePosition(LineStOrEd::START, 7), nn1, PointOnLinePosition(LineStOrEd::END, -7), { __T("K'"), __T("L'") }));
		nn11->draw(pDC, &redPen);

		CVertex *nn33 = new CVertex(new LineAndLineConstraintRelation(nn3, PointOnLinePosition(LineStOrEd::START, 12), nn3, PointOnLinePosition(LineStOrEd::END, -12), { __T("K'"), __T("L'") }));
		nn33->draw(pDC, &redPen);

		
	}
	void static TestDrawV_InterKnitting_2D_Style1_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 50) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		

		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		jj1->draw(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);



		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		aq->draw(pDC, &bluePen);

		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style1_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 450) + offset;
		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint , 90, rectLengthV_Body , { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);


	    //2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body/2,-(rectLengthV_Body + backCollarWidth / 6), { __T("O"), __T("O'") }));
		aa1->draw(pDC, &bluePen);


		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		jj1->draw(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);



		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->drawWithLabel(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->drawWithLabel(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new LineAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0),{ __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new LineAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("B"), __T("C") }));
		//bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		//bb1->draw(pDC, &redPen);

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style1_Sleeve_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {


		CPoint1 originPoint = CPoint1(800, 420) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength;// 罗纹长
		double ribGirth = para.m_ribWidth;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth;
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

			//袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style1_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1000, 420) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth* para.m_ratio;
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 * para.m_ratio + 5.5 * para.m_ratio;
		double backWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 * para.m_ratio + 0.3* para.m_ratio; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6* para.m_ratio) + 1.5* para.m_ratio);
		double fronUpChestWidth = bustGirth / 24 + 1.6* para.m_ratio;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18 * para.m_ratio;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14 * para.m_ratio;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5* para.m_ratio;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5* para.m_ratio;
		double armStraightLine = 1.5* para.m_ratio;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

			//袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style1_Hat(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(930, 120) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		double rectWidthV_Hat = hatWidthMid;
		double rectLengthV_Hat = hatHeight;


		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Hat-6, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Hat, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *h1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(h1, LineStOrEd::END, 0, rectWidthV_Hat-6, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Hat, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *h2 = new CVertex(rayCRvertical);

			//p1q1->drawWithLabel(pDC, &greenPen);
			//h1->drawWithLabel(pDC, &greenPen);

			//s1r1->drawWithLabel(pDC, &greenPen);
			//h2->drawWithLabel(pDC, &greenPen);




		// 帽子左侧辅助线1
		/*CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -4, -hatHeight, { __T("J'"), __T("K'") }));
		h1->draw(pDC, &redPen);*/
		/*CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -3, -hatHeight, { __T("J'"), __T("K'") }));
		h1->draw(pDC, &greenPen);*/

		//// 帽子左侧辅助线2
		///*CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid-8, -hatHeight, { __T("J'"), __T("K'") }));
		//h2->draw(pDC, &redPen);*/

		//CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid - 9, -hatHeight, { __T("J'"), __T("K'") }));
		////h2->draw(pDC, &greenPen);
		CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::START, 4), s1r1, PointOnLinePosition(LineStOrEd::END, -4), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &redPen);



		CVertex *dd2 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatNarrow, { __T("F"), __T("F'") }));
		//dd2->draw(pDC, &bluePen);
		CVertex *dd3 = new CVertex(new ParaConstraintRelation(dd2, h1, h2, -hatStraight, { __T("F"), __T("F'") }));
		//dd3->draw(pDC, &bluePen);
		CVertex *dd4 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatHeight, { __T("F"), __T("F'") }));
		//dd4->draw(pDC, &bluePen);

		//左侧冒沿

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec18;
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, LineStOrEd::START));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd2, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd3, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd4, PointOnLinePosition(LineStOrEd::START, 9)));
		CVertex *f1ghi18 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec18));
		f1ghi18->draw(pDC, &redPen);

		// 右侧帽沿
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec28;
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, LineStOrEd::END));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd2, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd3, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd4, PointOnLinePosition(LineStOrEd::END, -9)));
		CVertex *f1ghi28 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec28));
		f1ghi28->draw(pDC, &redPen);

		// 帽顶线
		CVertex * dd14 = new CVertex(new LineAndLineConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::START, 9), dd4, PointOnLinePosition(LineStOrEd::END, -8), { __T("K'"), __T("L'") }));
		dd14->draw(pDC, &redPen);

		// 左侧帽沿内线
		CVertex *d1d4 = new CVertex(new RayConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::START, 9), 90, hatHeight - hatNarrow, { __T("V'"), __T("H'") }));
		d1d4->draw(pDC, &redPen);

		// 右侧帽沿内线
		CVertex *d1d4r = new CVertex(new RayConstraintRelation(dd4, PointOnLinePosition(LineStOrEd::END, -9), 90, hatHeight - hatNarrow, { __T("V'"), __T("H'") }));
		d1d4r->draw(pDC, &redPen);

		// 左侧帽沿内线弧线
		CVertex *d1d2 = new CVertex(new ArcAndLineConstraintRelation(d1d4, PointOnLinePosition(LineStOrEd::END, 0), dd1, PointOnLinePosition(LineStOrEd::HALF, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		d1d2->draw(pDC, &redPen);

		// 右侧帽沿内线弧线
		CVertex *d1d2R = new CVertex(new ArcAndLineConstraintRelation(dd1, PointOnLinePosition(LineStOrEd::HALF, 0), d1d4r, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		d1d2R->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style1_Pocket(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 220) + offset;

		// 参数
		double bodyLength = para.m_bodyLength;    // 衣长
		double bustGirth = para.m_bustGirth;    // 胸围 

		double shoulderWidth = para.m_shouldWidth; //肩宽
		double backLength = para.m_backLength;   // 背长

		double waistGirth = para.m_waistGirth; // 腰围
		double hipGirth = para.m_hipGirth;    // 臀围
		double hemGirth = para.m_hemGirth;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		double rectWidthV_Hat = hatWidthMid;
		double rectLengthV_Hat = hatHeight;


		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;
		double rectWidthV_Pocket = bustGirth/2;
		double rectLengthV_Pocket = pocketLengh;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Pocket, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Pocket, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Pocket, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Pocket, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *nn1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		nn1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);*/



		// 口袋

		// 绘制  袋底直栏1
		//CVertex *nn1 = new CVertex(new LineAndLineConstraintRelation(n1o1, PointOnLinePosition(LineStOrEd::START, -3), no, PointOnLinePosition(LineStOrEd::START, -3), { __T("K'"), __T("L'") }));
		//nn1->draw(pDC, &greenPen);

		// 绘制 袋底直栏2
		CVertex *nn2 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -2.5 * pocketLengh / 6, { __T("F"), __T("F'") }));
		//nn2->draw(pDC, &bluePen);

		// 绘制 袋底直栏2
		CVertex *nn3 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -pocketLengh, { __T("F"), __T("F'") }));
		//nn3->draw(pDC, &redPen);


		// 右侧袋线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec38;
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *f1ghi38 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec38));
		f1ghi38->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec48;
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *f1ghi48 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec48));
		f1ghi48->draw(pDC, &redPen);


		CVertex *nn11 = new CVertex(new LineAndLineConstraintRelation(nn1, PointOnLinePosition(LineStOrEd::START, 7), nn1, PointOnLinePosition(LineStOrEd::END, -7), { __T("K'"), __T("L'") }));
		nn11->draw(pDC, &redPen);

		CVertex *nn33 = new CVertex(new LineAndLineConstraintRelation(nn3, PointOnLinePosition(LineStOrEd::START, 12), nn3, PointOnLinePosition(LineStOrEd::END, -12), { __T("K'"), __T("L'") }));
		nn33->draw(pDC, &redPen);

	}

	// 8 交错编织2
	void static TestDrawV_InterKnitting_3D_Style2(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(300, 320) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		//aa1->drawWithLabel(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		//ww1->drawWithLabel(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		//jj1->drawWithLabel(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		//u1v1->drawWithLabel(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		//uv->drawWithLabel(pDC, &bluePen);





		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		//ff1->drawWithLabel(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->draw(pDC, &redPen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->draw(pDC, &redPen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右后领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左后领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);
		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//绘制前领窝辅助弧线ab1c1
	/*	CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &bluePen);*/

		//绘制左前领窝弧线ab1c1
		/*CVertex *bdf = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::END, 0), aa1, PointOnLinePosition(LineStOrEd::START, 4), Quadrant::THREE, { __T("B"), __T("C") }));
		bdf->draw(pDC, &redPen);*/

		//绘制右前领窝弧线ab1c1
		/*CVertex *bdf1 = new CVertex(new ArcAndLineConstraintRelation( aa1, PointOnLinePosition(LineStOrEd::START, 4), d1q1, PointOnLinePosition(LineStOrEd::END, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		bdf1->draw(pDC, &redPen);*/


		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;
		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		//vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		//v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &redPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);




		//绘制左袖

		//袖中线001
		CVertex *eo1 = new CVertex(new RayConstraintRelation(de, LineStOrEd::START, 180 - sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		eo1->draw(pDC, &redPen);

		//袖肥jj1
		CVertex *rj1 = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight, sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//rj1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * er = new CVertex(new LineAndLineConstraintRelation(eo1, LineStOrEd::END, rj1, LineStOrEd::START, { __T("O"), __T("R") }));
		//er->draw(pDC, &greenPen);

		// 左袖山留针线  
		CVertex *of = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve, sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - sleeveCrownHeight / 4, 2 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new VerConstraintRelation(eo1, rectLengthV_Sleeve - 2 * sleeveCrownHeight / 4, 3 * sleeveWidth / 8 - 2, { __T("N'"), __T("O'") }));
		//oh->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec7;
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::END));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::END, 0)));
		//verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec7.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi7 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
		f1ghi7->draw(pDC, &redPen);


		// 袖口
		CVertex *om1 = new CVertex(new VerConstraintRelation(eo1, 0, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		om1->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *ol1 = new CVertex(new VerConstraintRelation(eo1, ribLength, cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk1 = new CVertex(new VerConstraintRelation(rj1, rectWidthV_Sleeve / 2, -armStraightLine, { __T("J'"), __T("K'") }));
		//jk1->draw(pDC, &redPen);




		// 左侧缝
		CVertex * kl1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		kl1->draw(pDC, &redPen);
		CVertex * lm1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, ol1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K"), __T("L") }));
		lm1->draw(pDC, &redPen);



		//绘制右袖
		  //袖中线001
		CVertex *e1o1 = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, sleeveTiltAngle, rectLengthV_Sleeve, { __T("V'"), __T("H'") }));
		e1o1->draw(pDC, &redPen);
		//袖肥jj1
		CVertex *r1j1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight, -sleeveWidth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		//r1j1->draw(pDC, &bluePen);

		//  袖山辅助线
		CVertex * e1r = new CVertex(new LineAndLineConstraintRelation(e1o1, LineStOrEd::START, r1j1, LineStOrEd::END, { __T("O"), __T("R") }));
		//e1r->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new VerConstraintRelation(e1o1, 0, -(sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new VerConstraintRelation(e1o1, sleeveCrownHeight / 4, -(2 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new VerConstraintRelation(e1o1, 2 * sleeveCrownHeight / 4, -(3 * sleeveWidth / 8 - 2), { __T("N'"), __T("O'") }));
		//oh1->draw(pDC, &greenPen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec8;
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::START));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::START, 0)));
		//verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec8.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi8 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
		f1ghi8->draw(pDC, &redPen);

		// 袖口
		CVertex *ol11 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol11->draw(pDC, &redPen);
		// 袖口罗纹
		CVertex *ol12 = new CVertex(new VerConstraintRelation(e1o1, rectLengthV_Sleeve - ribLength, -cuffGirth / 2, { __T("N'"), __T("O'") })); // bust / 12 + 13.7 
		ol12->draw(pDC, &redPen);
		//右腋下直栏
		CVertex *j1k11 = new CVertex(new VerConstraintRelation(r1j1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		//j1k11->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l11 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		k1l11->draw(pDC, &redPen);
		CVertex * l1m11 = new CVertex(new LineAndLineConstraintRelation(ol11, LineStOrEd::START, ol12, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		l1m11->draw(pDC, &redPen);

		// 帽子
		CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &redPen);
		
		// 帽子左侧辅助线1
		
		CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -7, -hatHeight, { __T("J'"), __T("K'") }));
		//h1->draw(pDC, &greenPen);

		CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid -5, -hatHeight, { __T("J'"), __T("K'") }));
		//h2->draw(pDC, &greenPen);

		CVertex *h3 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, h2, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		//h3->draw(pDC, &greenPen);
		
		CVertex *h4 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::END, h2, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		//h4->draw(pDC, &greenPen);

		CVertex *h5 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatHeight/3, { __T("F"), __T("F'") }));
		//h5->draw(pDC, &bluePen);

		CVertex *h6 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -2 * hatHeight / 3, { __T("F"), __T("F'") }));
		//h6->draw(pDC, &bluePen);

		CVertex *h = new CVertex(new RayConstraintRelation(h3, PointOnLinePosition(LineStOrEd::END, 0), 135,4, { __T("V'"), __T("H'") }));
		//h->draw(pDC, &bluePen);

		//左侧冒沿

        std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec28;
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h1, PointOnLinePosition(LineStOrEd::ONE_THIRD, -4)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h6, PointOnLinePosition(LineStOrEd::START, 4)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h5, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *f1ghi28 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec28));
		f1ghi28->draw(pDC, &redPen);


		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec18;
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h1, PointOnLinePosition(LineStOrEd::ONE_THIRD, -4)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h3, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h, PointOnLinePosition(LineStOrEd::START,0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h2, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *f1ghi18 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec18));
		f1ghi18->draw(pDC, &redPen);


		// 口袋

		// 绘制  袋底直栏1
		CVertex *nn1 = new CVertex(new LineAndLineConstraintRelation(n1o1, PointOnLinePosition(LineStOrEd::START, -3), no, PointOnLinePosition(LineStOrEd::START, -3), { __T("K'"), __T("L'") }));
		//nn1->draw(pDC, &greenPen);

		// 绘制 袋底直栏2
		CVertex *nn2 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -2.5 * pocketLengh / 6, { __T("F"), __T("F'") }));
		//nn2->draw(pDC, &bluePen);

		// 绘制 袋底直栏2
		CVertex *nn3 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -pocketLengh, { __T("F"), __T("F'") }));
		//nn3->draw(pDC, &redPen);


		// 右侧袋线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec38;
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *f1ghi38 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec38));
		f1ghi38->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec48;
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *f1ghi48 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec48));
		f1ghi48->draw(pDC, &redPen);


		CVertex *nn11 = new CVertex(new LineAndLineConstraintRelation(nn1, PointOnLinePosition(LineStOrEd::START, 7), nn1, PointOnLinePosition(LineStOrEd::END, -7), { __T("K'"), __T("L'") }));
		nn11->draw(pDC, &redPen);

		CVertex *nn33 = new CVertex(new LineAndLineConstraintRelation(nn3, PointOnLinePosition(LineStOrEd::START, 12), nn3, PointOnLinePosition(LineStOrEd::END, -12), { __T("K'"), __T("L'") }));
		nn33->draw(pDC, &redPen);


	}
	void static TestDrawV_InterKnitting_2D_Style2_Hat(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(930, 120) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		double rectWidthV_Hat = hatWidthMid;
		double rectLengthV_Hat = hatHeight;


		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Hat - 6, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Hat, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Hat - 6, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Hat, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//h1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//h2->drawWithLabel(pDC, &greenPen);


		// 帽子
		CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(s1r1, PointOnLinePosition(LineStOrEd::START, 4), s1r1, PointOnLinePosition(LineStOrEd::END, -4), { __T("K'"), __T("L'") }));
		dd1->draw(pDC, &redPen);

		//CVertex * dd1 = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		//dd1->draw(pDC, &redPen);

		// 帽子左侧辅助线1

		CVertex *h1 = new CVertex(new VerConstraintRelation(dd1, -7, -hatHeight, { __T("J'"), __T("K'") }));
		//h1->draw(pDC, &greenPen);

		CVertex *h2 = new CVertex(new VerConstraintRelation(dd1, hatWidthMid - 5, -hatHeight, { __T("J'"), __T("K'") }));
		//h2->draw(pDC, &greenPen);

		CVertex *h3 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::START, h2, PointOnLinePosition(LineStOrEd::START, 0), { __T("K'"), __T("L'") }));
		//h3->draw(pDC, &greenPen);

		CVertex *h4 = new CVertex(new LineAndLineConstraintRelation(h1, LineStOrEd::END, h2, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		//h4->draw(pDC, &greenPen);

		CVertex *h5 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -hatHeight / 3, { __T("F"), __T("F'") }));
		//h5->draw(pDC, &bluePen);

		CVertex *h6 = new CVertex(new ParaConstraintRelation(dd1, h1, h2, -2 * hatHeight / 3, { __T("F"), __T("F'") }));
		//h6->draw(pDC, &bluePen);

		CVertex *h = new CVertex(new RayConstraintRelation(h3, PointOnLinePosition(LineStOrEd::END, 0), 135, 4, { __T("V'"), __T("H'") }));
		//h->draw(pDC, &bluePen);

		//左侧冒沿

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec28;
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h1, PointOnLinePosition(LineStOrEd::ONE_THIRD, -4)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h6, PointOnLinePosition(LineStOrEd::START, 4)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(h5, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec28.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, PointOnLinePosition(LineStOrEd::START, 0)));
		CVertex *f1ghi28 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec28));
		f1ghi28->draw(pDC, &redPen);


		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec18;
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h1, PointOnLinePosition(LineStOrEd::ONE_THIRD, -4)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h3, PointOnLinePosition(LineStOrEd::HALF, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(h2, PointOnLinePosition(LineStOrEd::ONE_THIRD, 2)));
		verPointPairVec18.push_back(std::pair<CVertex*, PointOnLinePosition>(dd1, PointOnLinePosition(LineStOrEd::END, 0)));
		CVertex *f1ghi18 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec18));
		f1ghi18->draw(pDC, &redPen);


	}
	void static TestDrawV_InterKnitting_2D_Style2_front(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 50) + offset;
		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/



			//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
		aa1->draw(pDC, &bluePen);

		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		jj1->draw(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);



		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		d1q1->draw(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		dq->draw(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		aq1->draw(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		aq->draw(pDC, &bluePen);

		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new ArcAndLineConstraintRelation(aq1, PointOnLinePosition(LineStOrEd::ONE_THIRD, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), Quadrant::FOUR, { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new ArcAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), Quadrant::THREE, { __T("B"), __T("C") }));
		bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		bb1->draw(pDC, &redPen);

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &greenPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style2_back(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 450) + offset;
		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜


		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //



		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));




		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Body, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		//p1q1->drawWithLabel(pDC, &greenPen);
		//p1s1->drawWithLabel(pDC, &greenPen);

		//s1r1->drawWithLabel(pDC, &greenPen);
		//q1r1->drawWithLabel(pDC, &greenPen);


		//2 绘制后中线。 平行ad， 与ab，cd相交，
		CVertex *aa1 = new CVertex(new VerConstraintRelation(s1r1, rectWidthV_Body / 2, -(rectLengthV_Body + backCollarWidth / 6), { __T("O"), __T("O'") }));
		aa1->draw(pDC, &bluePen);


		//cVer_map[aa1->m_id] = aa1;

		//3 绘制腰围线。  backLength = bodyLength - hipLength;
		CVertex *ww1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, backLength, { __T("W"), __T("W'") }));
		ww1->draw(pDC, &bluePen);

		// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, p1s1, q1r1, armHoleDepth - 4, { __T("J"), __T("J'") }));
		jj1->draw(pDC, &bluePen);

		// 5 绘制下摆线OO1
		CVertex *pp1 = new CVertex(new VerConstraintRelation(p1s1, rectLengthV_Body, rectWidthV_Body, { __T("O"), __T("O'") }));
		pp1->draw(pDC, &redPen);

		// 6 绘制罗纹线
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(s1r1, p1s1, q1r1, -ribLength, { __T("N"), __T("N'") }));
		oo1->draw(pDC, &redPen);


		// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		CVertex *u1v1 = new CVertex(new  ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 + (backWidth - 1.0), { __T("U"), __T("V") })); // bust / 12 + 13.7
		u1v1->draw(pDC, &bluePen);

		// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
		CVertex *uv = new CVertex(new ParaConstraintRelation(p1s1, p1q1, jj1, bustGirth / 4 - (backWidth - 1.0), { __T("U'"), __T("V'") })); // bust / 12 + 13.7
		uv->draw(pDC, &bluePen);



		// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
		CVertex *ff1 = new CVertex(new ParaConstraintRelation(p1q1, u1v1, uv, fronUpChestWidth, { __T("F"), __T("F'") }));
		ff1->draw(pDC, &bluePen);

		// 10 绘制右后领深线 
		CVertex *d1q1 = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 6, { __T("D'"), __T("Q'") })); // bust / 12 + 13.7
		//d1q1->drawWithLabel(pDC, &bluePen);
		// 11 绘制左后领深线
		CVertex *dq = new CVertex(new VerConstraintRelation(p1q1, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 6, { __T("D"), __T("Q") })); // bust / 12 + 13.7
		//dq->drawWithLabel(pDC, &bluePen);

		//12 绘制右后领宽线，  
		CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("A"), __T("Q'") }));
		//aq1->drawWithLabel(pDC, &bluePen);
		//13 绘制右后领宽线，  
		CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);

		// 14 绘制右领窝
		CVertex *b1d1 = new CVertex(new LineAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), d1q1, PointOnLinePosition(LineStOrEd::START, 0), { __T("B"), __T("C") }));
		b1d1->draw(pDC, &redPen);

		// 14 绘制左领窝
		CVertex *bd = new CVertex(new LineAndLineConstraintRelation(dq, PointOnLinePosition(LineStOrEd::START, 0), aq, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("B"), __T("C") }));
		//bd->draw(pDC, &redPen);

		// 16 后水平线
		CVertex *bb1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::ONE_THIRD, aq, LineStOrEd::TWO_THIRDS, { __T("A"), __T("Q") }));
		//aq->drawWithLabel(pDC, &bluePen);
		//bb1->draw(pDC, &redPen);

		//	肩斜长度
		double SL = ((shoulderWidth - backCollarWidth) / cos(frontShouldAngle)) / PIXELPERCM;

		//18 绘制左肩线1 
		CVertex *de = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, 180 - backShouldAngle, SL, { __T("M"), __T("K") }));
		//ce->drawWithLabel(pDC, &redPen);
		de->draw(pDC, &redPen);
		//19 绘制右肩线2 
		CVertex *d1e1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, SL, { __T("M"), __T("K") }));
		//mf->drawWithLabel(pDC, &redPen);
		d1e1->draw(pDC, &redPen);

		// 袖窿辅助线
		double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("H"), __T("V") }));
		vh->draw(pDC, &bluePen);
		CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, 360 - armAngle, vhLength / PIXELPERCM, { __T("V'"), __T("H'") }));
		v1h1->draw(pDC, &bluePen);

		// 24  绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
		CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, PointOnLinePosition(LineStOrEd::END, 0), ff1, PointOnLinePosition(LineStOrEd::END, 0), { __T("F'"), __T("E'") }));
		e1f1->draw(pDC, &redPen);

		// 25  绘制右袖窿弧线 2  
		CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::END, 0), u1v1, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("e"), __T("f") }));
		f1g1->draw(pDC, &redPen);


		// 26  绘制右袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(f1g1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(v1h1, LineStOrEd::END));
		verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -1)));
		CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
		nopf->draw(pDC, &redPen);

		// 绘制腋下水平部分
		CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::END, 0), jj1, PointOnLinePosition(LineStOrEd::END, -1), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 24  绘制左袖窿弧线 1  
		CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, PointOnLinePosition(LineStOrEd::START, 0), ff1, PointOnLinePosition(LineStOrEd::START, 0), { __T("F'"), __T("E'") }));
		ef->draw(pDC, &redPen);

		// 25  绘制左袖窿弧线 2  
		CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ff1, PointOnLinePosition(LineStOrEd::START, 0), uv, PointOnLinePosition(LineStOrEd::TWO_THIRDS, 0), { __T("E"), __T("F") }));
		fg->draw(pDC, &redPen);


		// 26  绘制左袖窿弧线 3  
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(fg, LineStOrEd::END));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(vh, LineStOrEd::START));
		verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, 1)));
		CVertex *nopf1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
		nopf1->draw(pDC, &redPen);

		// 绘制左腋下水平部分
		CVertex *ij = new CVertex(new LineAndLineConstraintRelation(jj1, PointOnLinePosition(LineStOrEd::START, 0), jj1, PointOnLinePosition(LineStOrEd::START, 1), { __T("I"), __T("J") }));
		ij->draw(pDC, &redPen);


		// 32 绘制右胸围直栏 I’J’
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bustGirth / 2, 1.5, { __T("J'"), __T("K'") })); // bust / 12 + 13.7
		j1k1->draw(pDC, &redPen);
		// 33 绘制左胸围直栏 IJ
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1.5, { __T("J"), __T("K") })); // bust / 12 + 13.7
		jk->draw(pDC, &redPen);


		//绘制右腰围直栏
		CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, -1, { __T("L'"), __T("Z'") }));
		l1z1->draw(pDC, &redPen);
		CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bustGirth + waistGirth) / 4, 1, { __T("Z'"), __T("M'") }));
		z1m1->draw(pDC, &redPen);

		//绘制左腰围直栏
		CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, -1, { __T("L"), __T("Z") }));
		lz->draw(pDC, &redPen);
		CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bustGirth - waistGirth) / 4, 1, { __T("Z"), __T("M") }));
		zm->draw(pDC, &redPen);


		// 32 绘制右下摆直栏 I’J’
		CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bustGirth / 2, -1.5, { __T("N'"), __T("O'") })); // bust / 12 + 13.7
		n1o1->draw(pDC, &greenPen);
		// 33 绘制左下摆直栏 IJ
		CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1.5, { __T("N"), __T("O") })); // bust / 12 + 13.7
		no->draw(pDC, &redPen);


		// 38 绘制右侧缝线1 J’K’
		CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		// 39 绘制右侧缝线2 L’M
		CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, PointOnLinePosition(LineStOrEd::START, 0), { __T("L'"), __T("M'") }));
		m1n1->draw(pDC, &redPen);
		// 40 绘制右侧缝线2 L’M
		CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, pp1, LineStOrEd::END, { __T("O'"), __T("P'") }));
		o1p1->draw(pDC, &redPen);


		// 38 绘制左侧缝线1 J’K’
		CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		// 39 绘制左侧缝线2 L’M
		CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, PointOnLinePosition(LineStOrEd::START, 0), { __T("L"), __T("M") }));
		mn->draw(pDC, &redPen);
		// 40 绘制左侧缝线2 L’M
		CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, pp1, LineStOrEd::START, { __T("O"), __T("P") }));
		op->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style2_Sleeve_left(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {


		CPoint1 originPoint = CPoint1(800, 420) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth* para.m_ratio;
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

			//袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style2_Sleeve_right(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1000, 420) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

		double cuffGirth = para.m_cuffGirth* para.m_ratio;
		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;




		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽



		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;

		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 20;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Sleeve, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Sleeve, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *s1r1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*	p1q1->drawWithLabel(pDC, &greenPen);
			p1s1->drawWithLabel(pDC, &greenPen);

			s1r1->drawWithLabel(pDC, &greenPen);
			q1r1->drawWithLabel(pDC, &greenPen);*/


			//绘制左袖

			//袖中线001
		CVertex *oo1 = new CVertex(new ParaConstraintRelation(p1s1, p1q1, s1r1, rectWidthV_Sleeve / 2, { __T("O"), __T("O'") }));
		oo1->draw(pDC, &bluePen);

		//袖肥jj1
		CVertex *jj1 = new CVertex(new ParaConstraintRelation(p1q1, q1r1, p1s1, sleeveCrownHeight + 4.5, { __T("O"), __T("O'") }));
		jj1->draw(pDC, &bluePen);

		// 袖口
		CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffGirth / 2, { __T("O"), __T("M'") }));
		om1->draw(pDC, &redPen);
		CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffGirth / 2, { __T("O"), __T("M") }));
		om->draw(pDC, &redPen);

		// 袖口罗纹
		CVertex *cl1 = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, cuffGirth / 2, { __T("C"), __T("L'") }));
		cl1->draw(pDC, &redPen);
		CVertex *cl = new CVertex(new RayConstraintRelation(oo1, PointOnLinePosition(LineStOrEd::END, -ribLength), 0, -cuffGirth / 2, { __T("C"), __T("L'") }));
		cl->draw(pDC, &redPen);


		//  袖山辅助线
		CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF, { __T("O"), __T("R") }));
		//or->draw(pDC, &greenPen);

		// 右袖山留针线  
		CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, sleeveWidth / 8, { __T("O"), __T("F'") }));
		of1->draw(pDC, &redPen);
		CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, 2 * sleeveWidth / 8, { __T("A"), __T("G'") }));
		og1->draw(pDC, &bluePen);
		CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, 3 * sleeveWidth / 8, { __T("B"), __T("H'") }));
		oh1->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec1;
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(of1, LineStOrEd::END));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(og1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(oh1, PointOnLinePosition(LineStOrEd::END, 0)));
		verPointPairVec1.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen)));
		CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		f1ghi->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * i1j1 = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::END, jj1, PointOnLinePosition(LineStOrEd::END, -armBindLen), { __T("I'"), __T("J'") }));
		i1j1->draw(pDC, &redPen);


		// 左袖山留针线  
		CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -sleeveWidth / 8, { __T("O"), __T("F'") }));
		of->draw(pDC, &redPen);
		CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -2 * sleeveWidth / 8, { __T("A"), __T("G") }));
		og->draw(pDC, &bluePen);
		CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -3 * sleeveWidth / 8, { __T("B"), __T("H") }));
		oh->draw(pDC, &bluePen);

		//绘制弧线fghi
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec2;
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(of, LineStOrEd::START));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(og, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(oh, PointOnLinePosition(LineStOrEd::START, 0)));
		verPointPairVec2.push_back(std::pair<CVertex*, PointOnLinePosition>(jj1, PointOnLinePosition(LineStOrEd::START, armBindLen)));
		CVertex *f1ghi2 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		f1ghi2->draw(pDC, &redPen);

		//绘制i1j1
		CVertex * ij = new CVertex(new LineAndLineConstraintRelation(jj1, LineStOrEd::START, jj1, PointOnLinePosition(LineStOrEd::START, armBindLen), { __T("J"), __T("I") }));
		ij->draw(pDC, &redPen);



		//右腋下直栏
		CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine, { __T("J'"), __T("K'") }));
		j1k1->draw(pDC, &redPen);

		//左腋下直栏
		CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine, { __T("J'"), __T("K'") }));
		jk->draw(pDC, &redPen);

		// 右侧缝
		CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		k1l1->draw(pDC, &redPen);
		CVertex * l1m1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::END, cl1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("L'") }));
		l1m1->draw(pDC, &redPen);

		// 左侧缝
		CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		kl->draw(pDC, &redPen);
		CVertex * lm = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::START, cl, PointOnLinePosition(LineStOrEd::START, 0), { __T("K"), __T("L") }));
		lm->draw(pDC, &redPen);

	}
	void static TestDrawV_InterKnitting_2D_Style2_Pocket(CDC * pDC, ClothesParameter & para, CSize offset /*,std::map<CString, CVertex*> & cVer_map */) {

		CPoint1 originPoint = CPoint1(1200, 163) + offset;

		// 参数
		double bodyLength = para.m_bodyLength* para.m_ratio;    // 衣长
		double bustGirth = para.m_bustGirth* para.m_ratio;    // 胸围 

		double shoulderWidth = para.m_shouldWidth* para.m_ratio; //肩宽
		double backLength = para.m_backLength* para.m_ratio;   // 背长

		double waistGirth = para.m_waistGirth* para.m_ratio; // 腰围
		double hipGirth = para.m_hipGirth* para.m_ratio;    // 臀围
		double hemGirth = para.m_hemGirth* para.m_ratio;  //下摆围

		double ribLength = para.m_ribLength* para.m_ratio;// 罗纹长
		double ribGirth = para.m_ribWidth* para.m_ratio;// 罗纹宽

		double backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
		double frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜
		double cuffGirth = para.m_cuffGirth* para.m_ratio;

		// 含参数变量
		double rectWidthV_Body = bustGirth / 2;
		double rectLengthV_Body = bodyLength;

		double armHoleDepth = bustGirth / 5 + 4 + 5.5;
		double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 背宽
		double chestWidth = 1.5 * (bustGirth / 10) + 4 + 0.3; // 胸宽

		double backCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double frontCollarWidth = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽


		double frontShouldAngle = 20;
		double backShouldAngle = 20;
		double hipLength = 18;// 腰长  腰节线到臀围线的距离
		double armAngle = 45; //
		double frontCollarDepth = 14;


		// 袖子
		double sleeveWidth = (bustGirth / 5) * 2;
		double sleeveCrownHeight = (bustGirth / 10) + 2.5;
		double rectWidthV_Sleeve = sleeveWidth;//原来是29
		double rectLengthV_Sleeve = bodyLength;
		double sleeveTiltAngle = 35;
		double armBindLen = 1.5;
		double armStraightLine = 1.5;

		// 帽子
		double hatWidthBottom = 2 * ((bustGirth / 24 + 3.6) + 1.5);
		double hatWidthMid = hatWidthBottom + 12;
		double hatWidthUp = hatWidthBottom - 18;

		double hatHeight = hatWidthBottom * 2;
		double hatNarrow = 1.5 * hatHeight / 5;
		double hatStraight = hatHeight / 5;
		double hatWidth = 2.5 * hatHeight / 5;

		double rectWidthV_Hat = hatWidthMid;
		double rectLengthV_Hat = hatHeight;


		// 口袋

		double pocketLengh = bustGirth / 6;
		double pocketWidth = 2 * pocketLengh / 3;
		double rectWidthV_Pocket = bustGirth / 2;
		double rectLengthV_Pocket = pocketLengh;


		CPen redPen;
		redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
		CPen redPen1;
		redPen1.CreatePen(PS_SOLID, 2, RGB(255, 0, 0));

		CPen bluePen;
		bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

		CPen greenPen;
		greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


		ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Pocket, { __T("P'"), __T("Q'") });
		ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Pocket, { __T("P'"), __T("S'") });

		//水平ab
		CVertex *p1q1 = new CVertex(parameterCRhorizontal);

		/*cVer_map[CString("rect_top")] = pq;
		CVertex *zuixia = cVer_map[CString("rect_top")];*/

		//垂直ad
		CVertex *p1s1 = new CVertex(parameterCRvertical);

		ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(p1s1, LineStOrEd::END, 0, rectWidthV_Pocket, { __T("S'"), __T("R'") });
		ConstraintRelation * rayCRvertical = new RayConstraintRelation(p1q1, LineStOrEd::END, 90, rectLengthV_Pocket, { __T("Q'"), __T("R'") });

		//水平cd
		CVertex *nn1 = new CVertex(rayCRhorizontal);
		//垂直bc
		CVertex *q1r1 = new CVertex(rayCRvertical);

		/*p1q1->drawWithLabel(pDC, &greenPen);
		p1s1->drawWithLabel(pDC, &greenPen);

		nn1->drawWithLabel(pDC, &greenPen);
		q1r1->drawWithLabel(pDC, &greenPen);*/



		// 口袋

		// 绘制  袋底直栏1
		//CVertex *nn1 = new CVertex(new LineAndLineConstraintRelation(n1o1, PointOnLinePosition(LineStOrEd::START, -3), no, PointOnLinePosition(LineStOrEd::START, -3), { __T("K'"), __T("L'") }));
		//nn1->draw(pDC, &greenPen);

		// 绘制 袋底直栏2
		CVertex *nn2 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -2.5 * pocketLengh / 6, { __T("F"), __T("F'") }));
		//nn2->draw(pDC, &bluePen);

		// 绘制 袋底直栏2
		CVertex *nn3 = new CVertex(new ParaConstraintRelation(nn1, p1s1, q1r1, -pocketLengh, { __T("F"), __T("F'") }));
		//nn3->draw(pDC, &redPen);


		// 右侧袋线
		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec38;
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::END, -7)));
		verPointPairVec38.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::END, -12)));
		CVertex *f1ghi38 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec38));
		f1ghi38->draw(pDC, &redPen);

		std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVec48;
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn1, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn2, PointOnLinePosition(LineStOrEd::START, 7)));
		verPointPairVec48.push_back(std::pair<CVertex*, PointOnLinePosition>(nn3, PointOnLinePosition(LineStOrEd::START, 12)));
		CVertex *f1ghi48 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec48));
		f1ghi48->draw(pDC, &redPen);


		CVertex *nn11 = new CVertex(new LineAndLineConstraintRelation(nn1, PointOnLinePosition(LineStOrEd::START, 7), nn1, PointOnLinePosition(LineStOrEd::END, -7), { __T("K'"), __T("L'") }));
		nn11->draw(pDC, &redPen);

		CVertex *nn33 = new CVertex(new LineAndLineConstraintRelation(nn3, PointOnLinePosition(LineStOrEd::START, 12), nn3, PointOnLinePosition(LineStOrEd::END, -12), { __T("K'"), __T("L'") }));
		nn33->draw(pDC, &redPen);

	}

	// V领_开衫 - 后片--- 多个参数合并成的一个函数
	//void static TestDraw_V_Cardigan_Back(CDC * pDC, ClothesParameter & para  /*,std::map<CString, CVertex*> & cVer_map */) {

	//	// 参数类型及个数
	//	double bodyLength = para.m_bodyLength;    // 衣长
	//	double backLength = para.m_backLength;   // 背长
	//	double bustGirth = para.m_bustGirth;    // 胸围 
	//	double waistGirth = para.m_waistGirth; // 腰围
	//	double hipGirth = para.m_hipGirth;    // 臀围
	//	double hemGirth = para.m_hemGirth;  //下摆围
	//	double shoulderWidth = para.m_shouldWidth; //肩宽
	//	double m_backShoulderAngle =para.m_backShoulderAngle; // 前肩斜
	//	double m_frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	//	// 求解含参数的表达式 
	//	double rectWidthV_Body = bustGirth / 2;
	//	double rectLengthV_Body = bodyLength;
	//	double armHoleDepth = bustGirth / 5 + 4 + 1.5;
	//	double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3 - 1.5;
	//	double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽
	//	double backCollarWidth = (bustGirth / 24 + 3.6) + 3.3;
	//	double backShouldAngle = 20;
	//	double backShouldExpandLen = /*1.2*/ (shoulderWidth / 2 - backWidth) / cos(backShouldAngle);// 这个应该与肩宽有关系


	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen bluePen;
	//	bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	//	CPoint1 originPoint = CPoint1(800, 120);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P"), __T("Q") });
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P"), __T("S") });

	//	//水平ab
	//	CVertex *pq = new CVertex(parameterCRhorizontal);

	//	/*cVer_map[CString("rect_top")] = pq;
	//	CVertex *zuixia = cVer_map[CString("rect_top")];*/

	//	//垂直ad
	//	CVertex *ps = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ps, LineStOrEd::END, 0, rectWidthV_Body, { __T("S"), __T("R") });
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(pq, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q"), __T("R") });

	//	//水平cd
	//	CVertex *sr = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *qr = new CVertex(rayCRvertical);

	//	pq->drawWithLabel(pDC, &greenPen);
	//	ps->drawWithLabel(pDC, &greenPen);

	//	sr->drawWithLabel(pDC, &greenPen);
	//	qr->drawWithLabel(pDC, &greenPen);


	//	//2 绘制后中线。 平行ad， 与ab，cd相交，  说明一下，在程序中"A'" 用a11 来表示
	//	CVertex *aa11 = new CVertex(new ParaConstraintRelation(ps, pq, sr, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
	//	aa11->drawWithLabel(pDC, &bluePen);

	//	//cVer_map[aa1->m_id] = aa1;

	//	////3 绘制腰围线。  backLength = bodyLength - 15 ;
	//	//CVertex *jj1 = new CVertex(new ParaConstraintRelation(pq, ps, qr, _backLength, { __T("J"), __T("J'") }), CString("JJ'"));
	//	//jj1->drawWithLabel(pDC, &redPen);

	//	//3 绘制右腰围线。  backLength = bodyLength - 15 ;
	//	CVertex *oj1 = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength) * PIXELPERCM), 0, waistGirth / 4, { __T("C'"), __T("C2") }));
	//	oj1->drawWithLabel(pDC, &redPen);

	//	//3 绘制左腰围线。  backLength = bodyLength - 15 ;
	//	CVertex *oj = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength) * PIXELPERCM), 0, -waistGirth / 4, { __T("C'"), __T("C2") }));
	//	oj->drawWithLabel(pDC, &redPen);


	//	// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	//	CVertex *ii1 = new CVertex(new ParaConstraintRelation(pq, ps, qr, armHoleDepth, { __T("I"), __T("I'") }), CString("II'"));
	//	ii1->drawWithLabel(pDC, &bluePen);

	//	// 5 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	//	CVertex *b2d2 = new CVertex(new VerConstraintRelation(ii1, bustGirth / 4 + backWidth, -bustGirth / 5 - 4 - 1.5, { __T("B2"), __T("D2") }), CString("B2D2")); // bust / 12 + 13.7
	//	b2d2->drawWithLabel(pDC, &bluePen);

	//	// 6 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	//	CVertex *b1d1 = new CVertex(new VerConstraintRelation(ii1, bustGirth / 4 - backWidth, -bustGirth / 5 - 4 - 1.5, { __T("B1"), __T("D1") }), CString("B1D1")); // bust / 12 + 13.7
	//	b1d1->drawWithLabel(pDC, &bluePen);

	//	// 7 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	//	CVertex *ee1 = new CVertex(new ParaConstraintRelation(pq, b1d1, b2d2, fronUpChestWidth, { __T("E"), __T("E'") }), CString("EE'"));
	//	ee1->drawWithLabel(pDC, &bluePen);

	//	// 8 绘制右后领深线 
	//	CVertex *ca2 = new CVertex(new VerConstraintRelation(pq, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 3, { __T("C'"), __T("A2") }), CString("C'A2")); // bust / 12 + 13.7
	//	ca2->drawWithLabel(pDC, &bluePen);

	//	// 9 绘制左后领深线
	//	CVertex *ca1 = new CVertex(new VerConstraintRelation(pq, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 3, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
	//	ca1->drawWithLabel(pDC, &bluePen);

	//	//10 绘制右后领宽线，  
	//	CVertex *aa2 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, ca2, LineStOrEd::END, { __T("A"), __T("A2") }), CString("AA2"));
	//	aa2->drawWithLabel(pDC, &bluePen);
	//	//11 绘制右后领宽线，  
	//	CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, ca1, LineStOrEd::END, { __T("A1"), __T("A") }), CString("AA1"));
	//	aa1->drawWithLabel(pDC, &bluePen);

	//	// 12 绘制右后领窝直线，  
	//	CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, aa2, LineStOrEd::ONE_THIRD, { __T("A"), __T("B'") }));
	//	ab1->drawWithLabel(pDC, &redPen);
	//	// 13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
	//	CVertex *b1c1 = new CVertex(new ArcAndLineConstraintRelation(aa2, LineStOrEd::ONE_THIRD, ca2, LineStOrEd::START, Quadrant::FORTH, { __T("B'"), __T("C'") }));
	//	b1c1->draw(pDC, &redPen);

	//	//14 绘制右后领窝直线，  
	//	CVertex *ab = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, aa1, LineStOrEd::TWO_THIRDS, { __T("B"), __T("A") }));
	//	ab->drawWithLabel(pDC, &redPen);
	//	//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
	//	CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(ca1, LineStOrEd::START, aa1, LineStOrEd::TWO_THIRDS, Quadrant::SECOND, { __T("B"), __T("C") }));
	//	bc->draw(pDC, &redPen);


	//	// 16 绘制右肩线1
	//	CVertex *c1c2 = new CVertex(new RayConstraintRelation(ca2, LineStOrEd::START, backShouldAngle, b2d2, { __T("C'"), __T("C2") }));
	//	c1c2->drawWithLabel(pDC, &redPen);
	//	// 17 绘制右肩线2 
	//	CVertex *c2d1 = new CVertex(new ExpandConstraintRelation(c1c2, backShouldExpandLen, { __T("C2"), __T("D'") }));
	//	c2d1->drawWithLabel(pDC, &redPen);


	//	// 18 绘制左肩线1 
	//	CVertex *cc1 = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, -backShouldAngle, b1d1, { __T("C"), __T("C1") }));
	//	cc1->drawWithLabel(pDC, &redPen);
	//	// 19 绘制左肩线2  
	//	CVertex *c1d = new CVertex(new ExpandConstraintRelation(cc1, -backShouldExpandLen, { __T("C1"), __T("D") }));
	//	c1d->drawWithLabel(pDC, &redPen);


	//	// 20 绘制右夹圈比深线fd2 比例约束
	//	CPoint1 D11 = dynamic_cast<CLine*>(c2d1->getFigure())->GetEd();
	//	CVertex *d1f2 = new CVertex(new VerConstraintRelation(ii1, D11, { __T("D1"), __T("") }));
	//	CPoint1 D2 = dynamic_cast<CLine*>(b2d2->getFigure())->GetEd();
	//	CVertex *f1d2 = new CVertex(new RatioConstraintRelation(d1f2, -0.3, D2, { __T("F'"), __T("D2") }));
	//	f1d2->drawWithLabel(pDC, &bluePen);

	//	// 21 绘制左夹圈比深线fd1 比例约束
	//	CPoint1 D = dynamic_cast<CLine*>(c1d->getFigure())->GetSt();
	//	CVertex *d1f1 = new CVertex(new VerConstraintRelation(ii1, D, { __T("D"), __T("") }));
	//	CPoint1 D1 = dynamic_cast<CLine*>(b1d1->getFigure())->GetEd();
	//	CVertex *fd1 = new CVertex(new RatioConstraintRelation(d1f2, -0.3, D1, { __T("F"), __T("D1") }));
	//	fd1->drawWithLabel(pDC, &bluePen);

	//	//// 22  绘制右袖窿辅助线   ---曲线法画袖窿弧线才用
	//	//double d2i1Length = CPoint1::Distance(dynamic_cast<CLine*>(b2d2->getFigure())->GetEd(), dynamic_cast<CLine*>(ii1->getFigure())->GetEd()) / 3;
	//	//CVertex *d2g1 = new CVertex(new RayConstraintRelation(b2d2, PointOnLinePosition(LineStOrEd::END, 0), -45, d2i1Length / PIXELPERCM, { __T("E0'"), __T("G'") }));
	//	//d2g1->drawWithLabel(pDC, &bluePen);

	//	//// 23  绘制左袖窿辅助线    ---曲线法画袖窿弧线才用
	//	//CVertex *d1g = new CVertex(new RayConstraintRelation(b1d1, PointOnLinePosition(LineStOrEd::END, 0), 180 + 45, d2i1Length / PIXELPERCM, { __T("E0"), __T("G") }));
	//	//d1g->drawWithLabel(pDC, &bluePen);


	//	// 24   绘制右袖窿弧线 1  
	//	CVertex *d1e1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), c2d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("E'"), __T("D'") }));
	//	d1e1->drawWithLabel(pDC, &redPen);
	//	// 25  绘制右袖窿弧线 2  
	//	CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), f1d2, PointOnLinePosition(LineStOrEd::START, 0), { __T("E'"), __T("F'") }));
	//	e1f1->drawWithLabel(pDC, &redPen);
	//	// // 26  绘制右袖窿弧线 3 ---曲线法 
	//	//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(e1f1, LineStOrEd::END));
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(d2g1, LineStOrEd::END));
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(ii1, PointOnLinePosition(LineStOrEd::END, -1)));
	//	//CVertex *f1g1h1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	//	//f1g1h1->draw(pDC,&redPen);

	//	// 26  绘制右袖窿弧线 3 ---弧线法 
	//	CVertex *f1h1 = new CVertex(new ArcAndLineConstraintRelation(e1f1, LineStOrEd::END, ii1, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THIRD, { __T("F'"), __T("H'") }));
	//	f1h1->draw(pDC, &redPen);

	//	// 27  绘制右袖窿弧线 4 ---腋下平收
	//	CVertex *h1i1 = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::END, 0, -1.5, { __T("H'"), __T("I'") }));
	//	h1i1->drawWithLabel(pDC, &greenPen);


	//	// 28  绘制左袖窿弧线 1  
	//	CVertex *de = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::START, 0), c1d, PointOnLinePosition(LineStOrEd::START, 0), { __T("D"), __T("E") }));
	//	de->drawWithLabel(pDC, &redPen);
	//	// 29  绘制左袖窿弧线 2  
	//	CVertex *ef = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::START, 0), fd1, PointOnLinePosition(LineStOrEd::START, 0), { __T("E"), __T("F") }));
	//	ef->drawWithLabel(pDC, &redPen);

	//	// 30  绘制左袖窿弧线 3 ---弧线法 
	//	CVertex *fh = new CVertex(new ArcAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::START, 1.5), ef, LineStOrEd::END, Quadrant::FORTH, { __T("F"), __T("H") }));
	//	fh->draw(pDC, &redPen);

	//	//// 30  绘制左袖窿弧线 3---曲线法  
	//	//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(d1g, LineStOrEd::START));
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ii1, PointOnLinePosition(LineStOrEd::START, 1)));
	//	//CVertex *fgh = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	//	//fgh->draw(pDC, &redPen);

	//	// 31  绘制左袖窿弧线 4 ---腋下平收
	//	CVertex *hi = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::START, 0, 1.5, { __T("I"), __T("H") }));
	//	hi->drawWithLabel(pDC, &greenPen);


	//	//// 32 绘制下摆线---用map标记了id之后直接赋值。
	//	//CVertex *kk1 = new CVertex(new ParaConstraintRelation(pq, qr, ps, bodyLength, { __T("K"), __T("K'") }), CString("KK'"));
	//	//kk1->drawWithLabel(pDC, &redPen);


	//	//3 绘制右下摆线。  
	//	CVertex *a1k1 = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("A'"), __T("K'") }));
	//	a1k1->drawWithLabel(pDC, &redPen);
	//	//3 绘制左下摆线。 
	//	CVertex *a1k = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("K"), __T("A'") }));
	//	a1k->drawWithLabel(pDC, &redPen);


	//	// 33 绘制右侧缝线1
	//	CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::END, 0), oj1, PointOnLinePosition(LineStOrEd::END, 0), { __T("I'"), __T("J'") }));
	//	i1j1->drawWithLabel(pDC, &redPen);
	//	// 34 绘制右侧缝线1
	//	CVertex *j1k1 = new CVertex(new LineAndLineConstraintRelation(oj1, PointOnLinePosition(LineStOrEd::END, 0), a1k1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("J'") }));
	//	j1k1->drawWithLabel(pDC, &redPen);


	//	// 35 绘制左侧缝线1
	//	CVertex *ij = new CVertex(new LineAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::START, 0), oj, PointOnLinePosition(LineStOrEd::START, 0), { __T("J "), __T("I") }));
	//	ij->drawWithLabel(pDC, &redPen);
	//	// 36 绘制左侧缝线1
	//	CVertex *jk = new CVertex(new LineAndLineConstraintRelation(oj, PointOnLinePosition(LineStOrEd::START, 0), a1k, PointOnLinePosition(LineStOrEd::START, 0), { __T("J"), __T("K") }));
	//	jk->drawWithLabel(pDC, &redPen);

	//}



	// V领_套衫 - 后片--- 多个参数合并成的一个函数
	//void static TestDraw_V_pullover_Back(CDC * pDC, ClothesParameter & para  /*,std::map<CString, CVertex*> & cVer_map */) {

	//	// 参数类型及个数
	//	double bodyLength = para.m_bodyLength;    // 衣长
	//	double backLength = para.m_backLength;   // 背长
	//	double bustGirth = para.m_bustGirth;    // 胸围 
	//	double waistGirth = para.m_waistGirth; // 腰围
	//	double hipGirth = para.m_hipGirth;    // 臀围
	//	double hemGirth = para.m_hemGirth;  //下摆围
	//	double shoulderWidth = para.m_shouldWidth; //肩宽
	//	double m_backShoulderAngle = para.m_backShoulderAngle; // 前肩斜
	//	double m_frontShoulderAngle = para.m_frontShoulderAngle; // 后肩斜

	//	// 求解含参数的表达式 
	//	double rectWidthV_Body = bustGirth / 2;
	//	double rectLengthV_Body = bodyLength;
	//	double armHoleDepth = bustGirth / 5 + 4 + 1.5;
	//	double backWidth = 1.5 * (bustGirth / 10) + 4 + 0.3 - 1.5;
	//	double fronUpChestWidth = bustGirth / 24 + 1.6;   //前上胸宽
	//	double backCollarWidth = (bustGirth / 24 + 3.6) + 3.3;
	//	double backShouldAngle = 20;
	//	double backShouldExpandLen = /*1.2*/ (shoulderWidth / 2 - backWidth) / cos(backShouldAngle);// 这个应该与肩宽有关系


	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen bluePen;
	//	bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));


	//	CPoint1 originPoint = CPoint1(800, 120);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body, { __T("P"), __T("Q") });
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body, { __T("P"), __T("S") });

	//	//水平ab
	//	CVertex *pq = new CVertex(parameterCRhorizontal);

	//	/*cVer_map[CString("rect_top")] = pq;
	//	CVertex *zuixia = cVer_map[CString("rect_top")];*/

	//	//垂直ad
	//	CVertex *ps = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ps, LineStOrEd::END, 0, rectWidthV_Body, { __T("S"), __T("R") });
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(pq, LineStOrEd::END, 90, rectLengthV_Body, { __T("Q"), __T("R") });

	//	//水平cd
	//	CVertex *sr = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *qr = new CVertex(rayCRvertical);

	//	pq->drawWithLabel(pDC, &greenPen);
	//	ps->drawWithLabel(pDC, &greenPen);

	//	sr->drawWithLabel(pDC, &greenPen);
	//	qr->drawWithLabel(pDC, &greenPen);


	//	//2 绘制后中线。 平行ad， 与ab，cd相交，  说明一下，在程序中"A'" 用a11 来表示
	//	CVertex *aa11 = new CVertex(new ParaConstraintRelation(ps, pq, sr, rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
	//	aa11->drawWithLabel(pDC, &bluePen);

	//	//cVer_map[aa1->m_id] = aa1;

	//	////3 绘制腰围线。  backLength = bodyLength - 15 ;
	//	//CVertex *jj1 = new CVertex(new ParaConstraintRelation(pq, ps, qr, _backLength, { __T("J"), __T("J'") }), CString("JJ'"));
	//	//jj1->drawWithLabel(pDC, &redPen);

	//	//3 绘制右腰围线。  backLength = bodyLength - 15 ;
	//	CVertex *oj1 = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength) * PIXELPERCM), 0, waistGirth / 4, { __T("C'"), __T("C2") }));
	//	oj1->drawWithLabel(pDC, &redPen);

	//	//3 绘制左腰围线。  backLength = bodyLength - 15 ;
	//	CVertex *oj = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, -(bodyLength - backLength) * PIXELPERCM), 0, -waistGirth / 4, { __T("C'"), __T("C2") }));
	//	oj->drawWithLabel(pDC, &redPen);


	//	// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
	//	CVertex *ii1 = new CVertex(new ParaConstraintRelation(pq, ps, qr, armHoleDepth, { __T("I"), __T("I'") }), CString("II'"));
	//	ii1->drawWithLabel(pDC, &bluePen);

	//	// 5 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	//	CVertex *b2d2 = new CVertex(new VerConstraintRelation(ii1, bustGirth / 4 + backWidth, -bustGirth / 5 - 4 - 1.5, { __T("B2"), __T("D2") }), CString("B2D2")); // bust / 12 + 13.7
	//	b2d2->drawWithLabel(pDC, &bluePen);

	//	// 6 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
	//	CVertex *b1d1 = new CVertex(new VerConstraintRelation(ii1, bustGirth / 4 - backWidth, -bustGirth / 5 - 4 - 1.5, { __T("B1"), __T("D1") }), CString("B1D1")); // bust / 12 + 13.7
	//	b1d1->drawWithLabel(pDC, &bluePen);

	//	// 7 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
	//	CVertex *ee1 = new CVertex(new ParaConstraintRelation(pq, b1d1, b2d2, fronUpChestWidth, { __T("E"), __T("E'") }), CString("EE'"));
	//	ee1->drawWithLabel(pDC, &bluePen);

	//	// 8 绘制右后领深线 
	//	CVertex *ca2 = new CVertex(new VerConstraintRelation(pq, (rectWidthV_Body + backCollarWidth) / 2, -backCollarWidth / 3, { __T("C'"), __T("A2") }), CString("C'A2")); // bust / 12 + 13.7
	//	ca2->drawWithLabel(pDC, &bluePen);

	//	// 9 绘制左后领深线
	//	CVertex *ca1 = new CVertex(new VerConstraintRelation(pq, (rectWidthV_Body - backCollarWidth) / 2, -backCollarWidth / 3, { __T("C"), __T("A1") }), CString("AA1")); // bust / 12 + 13.7
	//	ca1->drawWithLabel(pDC, &bluePen);

	//	//10 绘制右后领宽线，  
	//	CVertex *aa2 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, ca2, LineStOrEd::END, { __T("A"), __T("A2") }), CString("AA2"));
	//	aa2->drawWithLabel(pDC, &bluePen);
	//	//11 绘制右后领宽线，  
	//	CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, ca1, LineStOrEd::END, { __T("A1"), __T("A") }), CString("AA1"));
	//	aa1->drawWithLabel(pDC, &bluePen);

	//	// 12 绘制右后领窝直线，  
	//	CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, aa2, LineStOrEd::ONE_THIRD, { __T("A"), __T("B'") }));
	//	ab1->drawWithLabel(pDC, &redPen);
	//	// 13 绘制右后领窝弧线, 这里为辅助线， 线线关系 
	//	CVertex *b1c1 = new CVertex(new ArcAndLineConstraintRelation(aa2, LineStOrEd::ONE_THIRD, ca2, LineStOrEd::START, Quadrant::FORTH, { __T("B'"), __T("C'") }));
	//	b1c1->draw(pDC, &redPen);

	//	//14 绘制右后领窝直线，  
	//	CVertex *ab = new CVertex(new LineAndLineConstraintRelation(aa11, LineStOrEd::START, aa1, LineStOrEd::TWO_THIRDS, { __T("B"), __T("A") }));
	//	ab->drawWithLabel(pDC, &redPen);
	//	//15 绘制左后领窝弧线, 这里为辅助线， 线线关系 
	//	CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(ca1, LineStOrEd::START, aa1, LineStOrEd::TWO_THIRDS, Quadrant::SECOND, { __T("B"), __T("C") }));
	//	bc->draw(pDC, &redPen);


	//	// 16 绘制右肩线1
	//	CVertex *c1c2 = new CVertex(new RayConstraintRelation(ca2, LineStOrEd::START, backShouldAngle, b2d2, { __T("C'"), __T("C2") }));
	//	c1c2->drawWithLabel(pDC, &redPen);
	//	// 17 绘制右肩线2 
	//	CVertex *c2d1 = new CVertex(new ExpandConstraintRelation(c1c2, backShouldExpandLen, { __T("C2"), __T("D'") }));
	//	c2d1->drawWithLabel(pDC, &redPen);


	//	// 18 绘制左肩线1 
	//	CVertex *cc1 = new CVertex(new RayConstraintRelation(ca1, LineStOrEd::START, -backShouldAngle, b1d1, { __T("C"), __T("C1") }));
	//	cc1->drawWithLabel(pDC, &redPen);
	//	// 19 绘制左肩线2  
	//	CVertex *c1d = new CVertex(new ExpandConstraintRelation(cc1, -backShouldExpandLen, { __T("C1"), __T("D") }));
	//	c1d->drawWithLabel(pDC, &redPen);


	//	// 20 绘制右夹圈比深线fd2 比例约束
	//	CPoint1 D11 = dynamic_cast<CLine*>(c2d1->getFigure())->GetEd();
	//	CVertex *d1f2 = new CVertex(new VerConstraintRelation(ii1, D11, { __T("D1"), __T("") }));
	//	CPoint1 D2 = dynamic_cast<CLine*>(b2d2->getFigure())->GetEd();
	//	CVertex *f1d2 = new CVertex(new RatioConstraintRelation(d1f2, -0.3, D2, { __T("F'"), __T("D2") }));
	//	f1d2->drawWithLabel(pDC, &bluePen);

	//	// 21 绘制左夹圈比深线fd1 比例约束
	//	CPoint1 D = dynamic_cast<CLine*>(c1d->getFigure())->GetSt();
	//	CVertex *d1f1 = new CVertex(new VerConstraintRelation(ii1, D, { __T("D"), __T("") }));
	//	CPoint1 D1 = dynamic_cast<CLine*>(b1d1->getFigure())->GetEd();
	//	CVertex *fd1 = new CVertex(new RatioConstraintRelation(d1f2, -0.3, D1, { __T("F"), __T("D1") }));
	//	fd1->drawWithLabel(pDC, &bluePen);

	//	//// 22  绘制右袖窿辅助线   ---曲线法画袖窿弧线才用
	//	//double d2i1Length = CPoint1::Distance(dynamic_cast<CLine*>(b2d2->getFigure())->GetEd(), dynamic_cast<CLine*>(ii1->getFigure())->GetEd()) / 3;
	//	//CVertex *d2g1 = new CVertex(new RayConstraintRelation(b2d2, PointOnLinePosition(LineStOrEd::END, 0), -45, d2i1Length / PIXELPERCM, { __T("E0'"), __T("G'") }));
	//	//d2g1->drawWithLabel(pDC, &bluePen);

	//	//// 23  绘制左袖窿辅助线    ---曲线法画袖窿弧线才用
	//	//CVertex *d1g = new CVertex(new RayConstraintRelation(b1d1, PointOnLinePosition(LineStOrEd::END, 0), 180 + 45, d2i1Length / PIXELPERCM, { __T("E0"), __T("G") }));
	//	//d1g->drawWithLabel(pDC, &bluePen);


	//	// 24   绘制右袖窿弧线 1  
	//	CVertex *d1e1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), c2d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("E'"), __T("D'") }));
	//	d1e1->drawWithLabel(pDC, &redPen);
	//	// 25  绘制右袖窿弧线 2  
	//	CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), f1d2, PointOnLinePosition(LineStOrEd::START, 0), { __T("E'"), __T("F'") }));
	//	e1f1->drawWithLabel(pDC, &redPen);
	//	// // 26  绘制右袖窿弧线 3 ---曲线法 
	//	//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(e1f1, LineStOrEd::END));
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(d2g1, LineStOrEd::END));
	//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(ii1, PointOnLinePosition(LineStOrEd::END, -1)));
	//	//CVertex *f1g1h1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
	//	//f1g1h1->draw(pDC,&redPen);

	//	// 26  绘制右袖窿弧线 3 ---弧线法 
	//	CVertex *f1h1 = new CVertex(new ArcAndLineConstraintRelation(e1f1, LineStOrEd::END, ii1, PointOnLinePosition(LineStOrEd::END, -1.5), Quadrant::THIRD, { __T("F'"), __T("H'") }));
	//	f1h1->draw(pDC, &redPen);

	//	// 27  绘制右袖窿弧线 4 ---腋下平收
	//	CVertex *h1i1 = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::END, 0, -1.5, { __T("H'"), __T("I'") }));
	//	h1i1->drawWithLabel(pDC, &greenPen);


	//	// 28  绘制左袖窿弧线 1  
	//	CVertex *de = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::START, 0), c1d, PointOnLinePosition(LineStOrEd::START, 0), { __T("D"), __T("E") }));
	//	de->drawWithLabel(pDC, &redPen);
	//	// 29  绘制左袖窿弧线 2  
	//	CVertex *ef = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::START, 0), fd1, PointOnLinePosition(LineStOrEd::START, 0), { __T("E"), __T("F") }));
	//	ef->drawWithLabel(pDC, &redPen);

	//	// 30  绘制左袖窿弧线 3 ---弧线法 
	//	CVertex *fh = new CVertex(new ArcAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::START, 1.5), ef, LineStOrEd::END, Quadrant::FORTH, { __T("F"), __T("H") }));
	//	fh->draw(pDC, &redPen);

	//	//// 30  绘制左袖窿弧线 3---曲线法  
	//	//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmL;
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ef, LineStOrEd::END));
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(d1g, LineStOrEd::START));
	//	//verPointPairVecArmL.push_back(std::pair<CVertex*, PointOnLinePosition>(ii1, PointOnLinePosition(LineStOrEd::START, 1)));
	//	//CVertex *fgh = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmL));
	//	//fgh->draw(pDC, &redPen);

	//	// 31  绘制左袖窿弧线 4 ---腋下平收
	//	CVertex *hi = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::START, 0, 1.5, { __T("I"), __T("H") }));
	//	hi->drawWithLabel(pDC, &greenPen);


	//	//// 32 绘制下摆线---用map标记了id之后直接赋值。
	//	//CVertex *kk1 = new CVertex(new ParaConstraintRelation(pq, qr, ps, bodyLength, { __T("K"), __T("K'") }), CString("KK'"));
	//	//kk1->drawWithLabel(pDC, &redPen);


	//	//3 绘制右下摆线。  
	//	CVertex *a1k1 = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, 0), 0, hemGirth / 4, { __T("A'"), __T("K'") }));
	//	a1k1->drawWithLabel(pDC, &redPen);
	//	//3 绘制左下摆线。 
	//	CVertex *a1k = new CVertex(new RayConstraintRelation(aa11, PointOnLinePosition(LineStOrEd::END, 0), 0, -hemGirth / 4, { __T("K"), __T("A'") }));
	//	a1k->drawWithLabel(pDC, &redPen);


	//	// 33 绘制右侧缝线1
	//	CVertex *i1j1 = new CVertex(new LineAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::END, 0), oj1, PointOnLinePosition(LineStOrEd::END, 0), { __T("I'"), __T("J'") }));
	//	i1j1->drawWithLabel(pDC, &redPen);
	//	// 34 绘制右侧缝线1
	//	CVertex *j1k1 = new CVertex(new LineAndLineConstraintRelation(oj1, PointOnLinePosition(LineStOrEd::END, 0), a1k1, PointOnLinePosition(LineStOrEd::END, 0), { __T("K'"), __T("J'") }));
	//	j1k1->drawWithLabel(pDC, &redPen);


	//	// 35 绘制左侧缝线1
	//	CVertex *ij = new CVertex(new LineAndLineConstraintRelation(ii1, PointOnLinePosition(LineStOrEd::START, 0), oj, PointOnLinePosition(LineStOrEd::START, 0), { __T("J "), __T("I") }));
	//	ij->drawWithLabel(pDC, &redPen);
	//	// 36 绘制左侧缝线1
	//	CVertex *jk = new CVertex(new LineAndLineConstraintRelation(oj, PointOnLinePosition(LineStOrEd::START, 0), a1k, PointOnLinePosition(LineStOrEd::START, 0), { __T("J"), __T("K") }));
	//	jk->drawWithLabel(pDC, &redPen);

	//}








};










// V领_套衫-后片(新版) 
//void static TestDrawV_Back1(CDC * pDC /*, std::map<CString, CVertex*> & cVer_map*/) {
//
//	CPen redPen;
//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
//
//	CPen bluePen;
//	bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));
//
//	CPen greenPen;
//	greenPen.CreatePen(PS_SOLID, 2, RGB(0, 255, 0));
//
//
//	CPoint1 originPoint = CPoint1(800, 120);
//
//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, _rectWidthV_Body, { __T("P"), __T("Q") });
//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, _rectLengthV_Body, { __T("P"), __T("S") });
//
//	//水平ab
//	CVertex *pq = new CVertex(parameterCRhorizontal);
//	/*	cVer_map[CString("rect_top")] = pq;
//
//		CVertex *zuixia = cVer_map[CString("rect_top")];*/
//
//		//垂直ad
//	CVertex *ps = new CVertex(parameterCRvertical);
//
//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ps, LineStOrEd::END, 0, _rectWidthV_Body, { __T("S"), __T("R") });
//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(pq, LineStOrEd::END, 90, _rectLengthV_Body, { __T("Q"), __T("R") });
//
//	//水平cd
//	CVertex *sr = new CVertex(rayCRhorizontal);
//	//垂直bc
//	CVertex *qr = new CVertex(rayCRvertical);
//
//	pq->drawWithLabel(pDC, &greenPen);
//	ps->drawWithLabel(pDC, &greenPen);
//
//	sr->drawWithLabel(pDC, &greenPen);
//	qr->drawWithLabel(pDC, &greenPen);
//
//
//	//2 绘制后中线。 平行ad， 与ab，cd相交，
//	CVertex *aa1 = new CVertex(new ParaConstraintRelation(ps, pq, sr, _rectWidthV_Body / 2, { __T("A"), __T("A'") }), CString("AA'"));
//	aa1->drawWithLabel(pDC, &bluePen);
//
//	//cVer_map[aa1->m_id] = aa1;
//
//	//3 绘制腰围线。  backLength = bodyLength - hipLength;
//	CVertex *g0g01 = new CVertex(new ParaConstraintRelation(pq, ps, qr, _backLength, { __T("G0"), __T("G0'") }));
//	g0g01->drawWithLabel(pDC, &bluePen);
//
//	// 4 jj1 绘制胸围线  平行ad， 与ab，ef相交，
//	CVertex *ii1 = new CVertex(new ParaConstraintRelation(pq, ps, qr, _bust / 5 + 4 + 1.5, { __T("I"), __T("I'") }));
//	ii1->drawWithLabel(pDC, &bluePen);
//
//	// 5 绘制下摆线OO1
//	CVertex *oo1 = new CVertex(new VerConstraintRelation(ps, _rectLengthV_Body, _rectWidthV_Body, { __T("C0'"), __T("E0'") }));
//	oo1->drawWithLabel(pDC, &redPen);
//
//	// 6 绘制罗纹线
//	CVertex *nn1 = new CVertex(new ParaConstraintRelation(sr, ps, qr, -ribLen, { __T("N"), __T("N'") }));
//	nn1->drawWithLabel(pDC, &redPen);
//
//
//	// 7 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
//	CVertex *c01e01 = new CVertex(new VerConstraintRelation(ii1, _bust / 4 + _backWidth - 1.5, -_bust / 5 - 4 - 1.5, { __T("C0'"), __T("E0'") })); // bust / 12 + 13.7
//	c01e01->drawWithLabel(pDC, &bluePen);
//
//	// 8 绘制左背宽线  backWidth = 1.5 * (bust / 10) + 4 + 0.3;
//	CVertex *c0e0 = new CVertex(new VerConstraintRelation(ii1, _bust / 4 - _backWidth + 1.5, -_bust / 5 - 4 - 1.5, { __T("C0"), __T("E0") })); // bust / 12 + 13.7
//	c0e0->drawWithLabel(pDC, &bluePen);
//
//
//	// 9 绘制后上胸宽线  fronUpChestWidth = bust / 24 + 1.6
//	CVertex *ee1 = new CVertex(new ParaConstraintRelation(pq, c0e0, c01e01, _fronUpChestWidth, { __T("E"), __T("E'") }));
//	ee1->drawWithLabel(pDC, &bluePen);
//
//
//	// 10 绘制右后领深线 
//	CVertex *c1b01 = new CVertex(new VerConstraintRelation(pq, (_rectWidthV_Body + _backCollarWidth) / 2, -_backCollarWidth / 3, { __T("C'"), __T("B0'") })); // bust / 12 + 13.7
//	c1b01->drawWithLabel(pDC, &bluePen);
//
//	// 11 绘制左后领深线
//	CVertex *cb0 = new CVertex(new VerConstraintRelation(pq, (_rectWidthV_Body - _backCollarWidth) / 2, -_backCollarWidth / 3, { __T("C"), __T("B0") })); // bust / 12 + 13.7
//	cb0->drawWithLabel(pDC, &bluePen);
//
//	// 12 绘制右后领窝水平部分
//	//CPoint1 B1 = dynamic_cast<CLine*>(aa1->getFigure())->GetSt() + CPoint1(backCollarWidth / 6 * PIXELPERCM, 0);
//	//CVertex *ab1 = new CVertex(new LineAndPointConstraintRelation(aa1, LineStOrEd::START, B1, { __T("A"), __T("B1") }));
//	//ab1->drawWithLabel(pDC, &redPen);
//
//	// 13 绘制左后领窝水平部分 （标记有问题） 还是换成你那样的写法了。
//	//CPoint1 B = dynamic_cast<CLine*>(aa1->getFigure())->GetSt() + CPoint1(-backCollarWidth / 6 * PIXELPERCM, 0);
//	//CVertex *ab = new CVertex(new LineAndPointConstraintRelation(aa1, LineStOrEd::START, B, { __T("B"), __T("A") }));
//	//ab->drawWithLabel(pDC, &redPen);
//
//
//	//12 绘制右后领宽线，  
//	CVertex *ab01 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, c1b01, LineStOrEd::END, { __T("A"), __T("B0'") }));
//	ab01->drawWithLabel(pDC, &bluePen);
//	//13 绘制右后领宽线，  
//	CVertex *ab0 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, cb0, LineStOrEd::END, { __T("A"), __T("B0") }));
//	ab0->drawWithLabel(pDC, &bluePen);
//
//
//	//13 绘制右后领窝直线，  
//	CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, ab01, LineStOrEd::ONE_THIRD, { __T("A"), __T("B1'") }));
//	ab1->drawWithLabel(pDC, &redPen);
//	//14 绘制右后领窝直线，  
//	CVertex *ab = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, ab0, LineStOrEd::TWO_THIRDS, { __T("A"), __T("B") }));
//	ab->drawWithLabel(pDC, &redPen);
//
//
//	// 14 绘制右后领窝线, 这里为辅助线， 线线关系 
//	CVertex *b1c1 = new CVertex(new ArcAndLineConstraintRelation(ab01, LineStOrEd::ONE_THIRD, c1b01, LineStOrEd::START, Quadrant::FORTH, { __T("A"), __T("B0") }));
//	b1c1->draw(pDC, &redPen);
//
//	// 15 绘制左后领窝线, 这里为辅助线， 线线关系 
//	CVertex *bc = new CVertex(new ArcAndLineConstraintRelation(cb0, LineStOrEd::START, ab0, LineStOrEd::TWO_THIRDS, Quadrant::SECOND, { __T("A"), __T("B0") }));
//	bc->draw(pDC, &redPen);
//
//	//pDC->Arc(CRect(CPoint(0, 0), CPoint(100, 100)), CPoint(100, 50), CPoint(50, 100));
//
//	 // 延长线那个代码那有问题了
//
//
//	// 16 绘制右肩线1 C’D0’
//	CVertex *c1d01 = new CVertex(new RayConstraintRelation(c1b01, LineStOrEd::START, _backShouldAngle, c01e01, { __T(""), __T("D0'") }));
//	c1d01->drawWithLabel(pDC, &redPen);
//	// 17 绘制右肩线2 D0’D’
//	CVertex *d01d1 = new CVertex(new ExpandConstraintRelation(c1d01, _backShouldExpandLen, { __T(""), __T("D'") }));
//	d01d1->drawWithLabel(pDC, &redPen);
//
//
//	// 18 绘制右肩线1 C’D0’
//	CVertex *cd0 = new CVertex(new RayConstraintRelation(cb0, LineStOrEd::START, -_backShouldAngle, c0e0, { __T("D0"), __T("") }));
//	cd0->drawWithLabel(pDC, &redPen);
//	// 19 绘制右肩线2 D0’ D’          有问题。
//	CVertex *dd0 = new CVertex(new ExpandConstraintRelation(cd0, -_backShouldExpandLen, { __T("D"), __T("") }));
//	dd0->drawWithLabel(pDC, &greenPen);
//
//
//	// 20 绘制右夹圈比深线F’F0’ 高度是个求解公式 这个我就是验证一下那个程序写的对不。
//	//	E01f1  是直线上的一个点。关键是那个距离
//
//
//
//	CPoint1 D1 = dynamic_cast<CLine*>(d01d1->getFigure())->GetSt();
//	CVertex *d1d = new CVertex(new VerConstraintRelation(ii1, D1, { __T(""), __T("") }));
//
//	CPoint1 E01 = dynamic_cast<CLine*>(c01e01->getFigure())->GetEd();
//	CVertex *e01f1 = new CVertex(new RatioConstraintRelation(d1d, -0.3, E01, { __T("E0'"), __T("F'") }));
//	e01f1->drawWithLabel(pDC, &greenPen);
//
//
//
//
//	// 21 绘制右夹圈比深线F’F0’ 高度是个求解公式 这个我就是验证一下那个程序写的对不。
//	//CPoint1 D1 = dynamic_cast<CLine*>(d01d1->getFigure())->GetSt();
//	//CVertex *d0d01 = new CVertex(new VerConstraintRelation(ii1, D1, { __T(""), __T("") }));
//	//CPoint1 E01 = dynamic_cast<CLine*>(c01e01->getFigure())->GetSt();
//	//CVertex *e01f1 = new CVertex(new RatioConstraintRelation(c01e01, 0.3, E01, { __T("E0'"), __T("F'") }));
//	//e01f1->drawWithLabel(pDC, &greenPen);
//
//	// 22  绘制右袖窿辅助线   
//	double e01g1Length = CPoint1::Distance(dynamic_cast<CLine*>(c01e01->getFigure())->GetEd(), dynamic_cast<CLine*>(ii1->getFigure())->GetEd()) / 3 + 1;
//	CVertex *e01g1 = new CVertex(new RayConstraintRelation(c01e01, PointOnLinePosition(LineStOrEd::END, 0), -45, e01g1Length / PIXELPERCM, { __T("E0'"), __T("G'") }));
//	e01g1->drawWithLabel(pDC, &bluePen);
//
//	// 23  绘制左袖窿辅助线   
//	CVertex *e0g = new CVertex(new RayConstraintRelation(c0e0, PointOnLinePosition(LineStOrEd::END, 0), 180 + 45, e01g1Length / PIXELPERCM, { __T("E0"), __T("G") }));
//	e0g->drawWithLabel(pDC, &bluePen);
//
//
//	//
// //   // 24   绘制右袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
//	// CVertex *d1e1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), d01d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("e"), __T("f") }));
//	// d1e1->drawWithLabel(pDC, &redPen);
//
// //    /* CVertex *d1e1 = new CVertex(new LineAndLineConstraintRelation(ee1, LineStOrEd::END, d01d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("e"), __T("f") }));
//	// d1e1->drawWithLabel(pDC, &redPen);*/
//
//	// // 25  绘制右袖窿弧线 2  
//	// CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), d01d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("e"), __T("f") }));
//	// e1f1->drawWithLabel(pDC, &redPen);
//
//	// // 26  绘制右袖窿弧线 3  
//	//std::vector<std::pair<CVertex*, PointOnLinePosition>> verPointPairVecArmR;
//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(e1f1, LineStOrEd::END));
//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(e01g1, LineStOrEd::END));
//	//verPointPairVecArmR.push_back(std::pair<CVertex*, PointOnLinePosition>(ii1, PointOnLinePosition(LineStOrEd::END, -1)));
//	//CVertex *nopf = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecArmR));
//	//nopf->draw(pDC);
//
//	//  // 27   绘制左袖窿弧线 1  这个能不能当成一步啊，绘图的时候。	
//	// CVertex *de = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::START, 0), dd0, PointOnLinePosition(LineStOrEd::START, 0), { __T("e"), __T("f") }));
//	// de->drawWithLabel(pDC, &redPen);
//
//	 //// 28  绘制左袖窿弧线 2  
//	 //CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(ee1, PointOnLinePosition(LineStOrEd::END, 0), d01d1, PointOnLinePosition(LineStOrEd::END, 0), { __T("e"), __T("f") }));
//	 //e1f1->drawWithLabel(pDC, &redPen);
//
//	 //// 29  绘制左袖窿弧线 3  
//   /* std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf1;
//	verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::END));
//	verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(r1b1, LineStOrEd::END));
//	verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(d1c1, LineStOrEd::END));*/
//
//	//    // 30 绘制右腋下平收I’H’
//		  //CVertex *h1i1 = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::END, 0, -armBindLen, { __T("H'"), __T("") }));
//		  //h1i1->drawWithLabel(pDC, &redPen);
//	   // // 31 绘制左腋下平收IH
//		  //CVertex *hi = new CVertex(new RayConstraintRelation(ii1, LineStOrEd::START, 0, armBindLen, { __T("H"), __T("") }));
//		  //hi->drawWithLabel(pDC, &redPen);
//
//		  //// 32 绘制右胸围直栏 I’J’
//		  //CVertex *i1j1 = new CVertex(new VerConstraintRelation(ii1, bust / 2, 1, { __T(""), __T("J’") })); // bust / 12 + 13.7
//		  //i1j1->drawWithLabel(pDC, &redPen);
//		  //// 33 绘制左胸围直栏 IJ
//		  //CVertex *ij = new CVertex(new VerConstraintRelation(ii1, 0, 1, { __T(""), __T("J") })); // bust / 12 + 13.7
//		  //ij->drawWithLabel(pDC, &redPen);
//
//		  //// 34 绘制右腰围直栏1 K’H0’
//		  //CVertex *k1h01 = new CVertex(new VerConstraintRelation(g0g01, (bust + waist) / 4, -1, { __T("K'"), __T("H0'") }));
//		  //k1h01->drawWithLabel(pDC, &redPen);
//	//      // 35 绘制右腰围直栏2 H0’ L’
//		  //CVertex *h01l1 = new CVertex(new VerConstraintRelation(g0g01, (bust + waist) / 4, 1, { __T("H0'"), __T("L'") }));
//		  //h01l1->drawWithLabel(pDC, &redPen);
//		  //// 36 绘制左腰围直栏1 K’H0’
//	   //   CVertex *kh0 = new CVertex(new VerConstraintRelation(g0g01, (bust - waist) / 4, -1, { __T("K"), __T("H0") }));
//		  //kh0->drawWithLabel(pDC, &redPen);
//		  //// 37 绘制左腰围直栏2 H0’ L’
//		  //CVertex *h0l = new CVertex(new VerConstraintRelation(g0g01, (bust - waist) / 4, 1, { __T("H0"), __T("L") }));
//		  //h0l->drawWithLabel(pDC, &redPen);
//
//
//		  //// 38 绘制右侧缝线1 J’K’
//		  //CVertex *j1k1 = new CVertex(new LineAndLineConstraintRelation(i1j1, LineStOrEd::END, k1h01, LineStOrEd::START, { __T("J'"), __T("K'") }));
//		  //j1k1->drawWithLabel(pDC, &redPen);
//		  //// 39 绘制右侧缝线2 L’M
//		  //CVertex *l1m1 = new CVertex(new LineAndLineConstraintRelation(h01l1, LineStOrEd::END,qr, PointOnLinePosition( LineStOrEd::END, ribLen + 1), { __T("L'"), __T("M'") }));
//		  //l1m1->drawWithLabel(pDC, &redPen);
//		  //// 40 绘制右侧缝线2 L’M
//		  //CVertex *m1o1 = new CVertex(new LineAndLineConstraintRelation(l1m1, LineStOrEd::END, oo1, LineStOrEd::END, { __T("L'"), __T("M") }));
//		  //m1o1->drawWithLabel(pDC, &redPen);
//		  //
//		  //// 41 绘制右侧缝线1 JK
//		  //CVertex *jk = new CVertex(new LineAndLineConstraintRelation(ij, LineStOrEd::END, kh0, LineStOrEd::START, { __T("J"), __T("K") }));
//		  //jk->drawWithLabel(pDC, &redPen);
//		  //// 42 绘制右侧缝线2 LM
//		  //CVertex *lm = new CVertex(new LineAndLineConstraintRelation(h0l, LineStOrEd::END, ps, PointOnLinePosition(LineStOrEd::END, ribLen + 1), { __T("L"), __T("M") }));
//		  //lm->drawWithLabel(pDC, &redPen);
//		  //// 43 绘制右侧缝线2 L’M
//		  //CVertex *mo = new CVertex(new LineAndLineConstraintRelation(lm, LineStOrEd::END, oo1, LineStOrEd::START, { __T("L"), __T("M") }));
//		  //mo->drawWithLabel(pDC, &redPen);
//
//}





	// V领-后片
	 //void static TestDrawV_Back(CDC * pDC) {
	
		//CPen redPen;
		//redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

		//CPen greenPen;
		//greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

		////double rectWidth = 42;
		////double rectLength = 56;
		//CPoint1 originPoint = CPoint1(800, 420);

		//ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, _rectWidthV_Body, { __T("a"), __T("b") });
		//ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, _rectLengthV_Body, { __T("a"), __T("d") });

		////水平ab
		//CVertex *ab = new CVertex(parameterCRhorizontal);
		////垂直ad
		//CVertex *ad = new CVertex(parameterCRvertical);

		//ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, _rectWidthV_Body, { __T("d"), __T("c") });
		//ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, _rectLengthV_Body, { __T("b"), __T("c") });

		////水平cd
		//CVertex *cd = new CVertex(rayCRhorizontal);
		////垂直bc
		//CVertex *bc = new CVertex(rayCRvertical);

		//ab->drawWithLabel(pDC, &redPen);
		//ad->drawWithLabel(pDC, &redPen);

		//bc->drawWithLabel(pDC, &redPen);
		//cd->drawWithLabel(pDC, &redPen);


		////oo1 绘制后中线。 平行ad， 与ab，cd相交，
		//CVertex *aa1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Body / 2, { __T("a"), __T("a1") }));
		//aa1->draw(pDC);

		////ww1 绘制腰围线。 平行ab， 与ad，bc相交
		//CVertex *ww1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, backLength, { __T("w"), __T("w1") }));
		//ww1->draw(pDC);

		////jj1 绘制胸围线  平行ad， 与ab，ef相交，
		//CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, bust / 5 + 4 + 1.5, { __T("j"), __T("j1") }));
		//jj1->draw(pDC);



		//// 绘制右侧

	 //   // 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
		//CVertex *u1v1 = new CVertex(new VerConstraintRelation(jj1, bust / 4 + (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5, { __T("u1"), __T("v1") })); // bust / 12 + 13.7
		//u1v1->draw(pDC);

  //      // 绘制右后领深线dq
		//CVertex *d1q1 = new CVertex(new VerConstraintRelation(ab, bust / 4 + bust / 24 + 3.6, -(bust / 24 + 3.6) / 3, { __T("u1"), __T("v1") })); // bust / 12 + 13.7
		////d1q1->draw(pDC);

		//////aq1, 这里为辅助线， 线线关系 oo1的起点 和 d1q1的终点组成的线  
		//CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END, { __T("a"), __T("q1") }));

		////ob1, 后领窝直线部分
		//CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq1, LineStOrEd::ONE_THIRD, { __T("a"), __T("b1") }));
		//ab1->draw(pDC, &redPen);

		//// 后领窝弧线

		////d1c1 线线关系， aq1的2/3点和d1q1的起点组成的线。
		//CVertex *d1c1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, d1q1, LineStOrEd::START, { __T("d1"), __T("c1") }));
		//d1c1->draw(pDC, &greenPen);

		//CVertex *ac1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1c1, LineStOrEd::START, { __T("a"), __T("c1") }));
		//ac1->draw(pDC,  &greenPen);


		//CVertex *c1r = new CVertex(new AngleBisectionConstraintRelation(d1c1, ac1,-3, { __T("c1"), __T("r") }));
		//c1r->draw(pDC,&greenPen);

		//CVertex *cr1 = new CVertex(new RayConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, (180 + armAngle),0.5, { __T("c"), __T("r1") }));
		//cr1->draw(pDC,&greenPen);

		////绘制弧线ab1d1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec1;
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::ONE_THIRD));
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::TWO_THIRDS));
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(cr1, LineStOrEd::START));
		//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::START));
		//
		//CVertex *ab1d1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
		//ab1d1->draw(pDC, &redPen);



		////绘制肩斜线 d1t1 射线, dq的起点， 然后与vv1相交
		//CVertex *d1t1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1, { __T("d1"), __T("t1") }));
		//d1t1->draw(pDC);

		////绘制肩斜线 d1t1 的延长线
		//CVertex *d1e1 = new CVertex(new ExpandConstraintRelation(d1t1, backShouldExpandLen, { __T("d1"), __T("e1") }));
		//d1e1->draw(pDC, &redPen);


		////F1点为ut1的1/4点

		////射线E1F1  t1u线的1/4点 和 d1e1的终点
		//CVertex *t1v1 = new CVertex(new LineAndLineConstraintRelation(d1t1, LineStOrEd::END, u1v1, LineStOrEd::END, { __T("t1"), __T("v1") }));
		//CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, LineStOrEd::END, t1v1, LineStOrEd::ONE_FORTH, { __T("e1"), __T("v1") }));
		//e1f1->draw(pDC, &redPen);

	
	 //  //绘制f1g1  fg   G点为ut1的2/3点
		//CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(e1f1, LineStOrEd::START, t1v1, LineStOrEd::TWO_THIRDS, { __T("f1"), __T("g1") }));
		//f1g1->draw(pDC, &redPen);


		//double v1h1Length = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
		//CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, -armAngle, v1h1Length / PIXELPERCM, { __T("v1"), __T("h1") }));
		////v1h1->draw(pDC);

		////绘制i1j1
		//CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(-armBindLen, 0);
		//CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1, { __T("i1"), __T("j1") }));
		//i1j1->draw(pDC, &redPen);
		//

		////绘制弧线g1h1i1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec3;
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(f1g1, LineStOrEd::END));
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(v1h1, LineStOrEd::END));
		//verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

		//CVertex *g1h1i1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
		//g1h1i1->draw(pDC, &redPen);

		//// 绘制j1k1
		//CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bust / 2, 1, { __T("j1"), __T("k1") })); // bust / 12 + 13.7
		//j1k1->draw(pDC, &redPen);

		//// 绘制k1l1
		//CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, -1, { __T("l1"), __T("z1") }));
		//l1z1->draw(pDC, &redPen);


		//CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, 1, { __T("z1"), __T("m1") }));
		//z1m1->draw(pDC, &redPen);

		////绘制jk
		//CVertex *l1k1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START, { __T("l1"), __T("k1") }));
		//l1k1->draw(pDC, &redPen);

		////绘制罗纹线oo1
		//CVertex *oo1 = new CVertex(new ParaConstraintRelation(cd, ad, bc, -ribLen, { __T("o"), __T("o1") }));
		//oo1->draw(pDC, &redPen);

		////绘制n1o1
		//CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bust / 2, -1, { __T("n1"), __T("o1") }));
		//n1o1->draw(pDC, &redPen);

		////绘制m1n1
		//CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, LineStOrEd::START, { __T("m1"), __T("n1") }));
		//m1n1->draw(pDC, &redPen);

		////绘制o1p1
		//CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, cd, LineStOrEd::END, { __T("o1"), __T("p1") }));
		//o1p1->draw(pDC, &redPen);

		////绘制下摆线pp1
		//CVertex *pp1 = new CVertex(new ParaConstraintRelation(oo1, ad, bc, ribLen, { __T("p"), __T("p1") }));
		//pp1->draw(pDC, &redPen);


	 //   // 绘制左侧

	 //   // 绘制左背宽线  
		//CVertex *uv = new CVertex(new VerConstraintRelation(jj1, bust / 4 - (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5, { __T("u"), __T("v") })); // bust / 12 + 13.7
		///*uv->draw(pDC);*/


	 //   //绘制左后领深线dq
		//CVertex *dq = new CVertex(new VerConstraintRelation(ab, bust / 4 - (bust / 24 + 3.6), -(bust / 24 + 3.6) / 3, { __T("d"), __T("q") })); // bust / 12 + 13.7
		////dq->draw(pDC);

	 //   //aq, 辅助线， 线线关系， oo1的起点 和 d1q1的终点组成的线  
		//CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END, { __T("a"), __T("q") }));

		////ob1, 后领窝直线部分
		//CVertex *a2b = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS, { __T("a2"), __T("b") }));
		//a2b->draw(pDC, &redPen);

		////dc, 辅助线， 线线关系， oq的2/3点和dq的起点组成的线
	 //   CVertex *dc = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, aq, LineStOrEd::ONE_THIRD, { __T("d"), __T("c") }));
	 //   //dc->draw(pDC);



		//// 后领窝弧线

		//CVertex *ac = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dc, LineStOrEd::END, { __T("a"), __T("c") }));
		////ac->draw(pDC);

		//CVertex *ab2 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS, { __T("a"), __T("b2") }));
		////ab2->draw(pDC, &redPen);

		//CVertex *cr = new CVertex(new RayConstraintRelation(aq, LineStOrEd::ONE_THIRD, -(20 + armAngle), 0.5, { __T("c"), __T("r") }));
		////cr->draw(pDC,&greenPen);

		////绘制弧线ab1d1
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec2;
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS));
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::ONE_THIRD));
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(cr, LineStOrEd::END));
		//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START));

		//CVertex *abd = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
		//abd->draw(pDC, &redPen);


		//// 前两个点是开始点和结束点， 后两个点是控制点 （这两个控制点是一点一点试出来的， 比较蛋疼）
		////LineAndBezierConstraintRelation *testbezierl = new LineAndBezierConstraintRelation(
		////	std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS),
		////	std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START),
		////	CPoint1(858, 50), CPoint1(900, 50));
		//////	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
		////CVertex *bezierl = new CVertex(testbezier);
		////bezierl->draw(pDC, &redPen);



	 //   //绘制肩斜线 dt 射线, d1q1的起点， 然后与uu1相交
		//CVertex *dt = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, -backShouldAngle, uv, { __T("d"), __T("t") }));
		//dt->draw(pDC);

		////绘制肩斜线 dt的延长线
		//CVertex *de = new CVertex(new ExpandConstraintRelation(dt, -backShouldExpandLen, { __T("d"), __T("e") }));
		//de->draw(pDC, &redPen);


		////射线E1F1  t1u线的1/4点 和 d1e1的终点
		//CVertex *tv = new CVertex(new LineAndLineConstraintRelation(dt, LineStOrEd::START, uv, LineStOrEd::END, { __T("t"), __T("v") }));
		//CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, LineStOrEd::START, tv, LineStOrEd::ONE_FORTH, { __T("e"), __T("f") }));
		//ef->draw(pDC, &redPen);


		////G点为ut1的2/3点
		//CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ef, LineStOrEd::END, tv, LineStOrEd::TWO_THIRDS, { __T("f"), __T("g") }));
		//fg->draw(pDC, &redPen);


		//double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(uv->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
		//CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM, { __T("v"), __T("h") }));
		////vh->draw(pDC);

		//
		//CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
		//CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i, { __T("a"), __T("b") }));
		//ij->draw(pDC, &redPen);


		////绘制袖窿弧线ghi
		//std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec4;
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(fg, LineStOrEd::END));
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(vh, LineStOrEd::START));
		//verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

		//CVertex *ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
		//ghi->draw(pDC, &redPen);


		//// 绘制jk
		//CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1, { __T("j"), __T("k") }));
		//jk->draw(pDC, &redPen);

		//// 绘制kl
		//CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, -1, { __T("l"), __T("z") }));
		//lz->draw(pDC, &redPen);

		//CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, 1, { __T("z"), __T("m") }));
		//zm->draw(pDC, &redPen);


		//CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START, { __T("k"), __T("l") }));
		//kl->draw(pDC, &redPen);


		////绘制no
		//CVertex *no = new CVertex(new VerConstraintRelation(oo1,0, -1, { __T("n"), __T("o") }));
		//no->draw(pDC, &redPen);


		////绘制mn
		//CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, LineStOrEd::START, { __T("m"), __T("n") }));
		//mn->draw(pDC, &redPen);

		////绘制op
		//CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, cd, LineStOrEd::START, { __T("o"), __T("p") }));
		//op->draw(pDC, &redPen);


	

 //   // V领-前片
 //   void static TestDrawV_Front(CDC * pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

	//	CPen bluePen;
	//	bluePen.CreatePen(PS_DASH, 1, RGB(0, 0, 255));

	//	CPoint1 originPoint = CPoint1(400, 420);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidthV_Body);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLengthV_Body);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	//ab->draw(pDC,&bluePen);
	//	//ad->draw(pDC);

	//	//bc->draw(pDC);
	//	//cd->draw(pDC);


	//	//aq1 绘制前中线。 平行ad， 与ab，cd相交，
	//	CVertex *a1q1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Body / 2));
	//	//a1q1->draw(pDC);

	//	//ww1 绘制腰围线。 平行ab， 与ad，bc相交
	//	CVertex *ww1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, backLength));
	//	//ww1->draw(pDC);

	//	//jj1 绘制胸围线  平行ad， 与ab，ef相交，
	//	CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, bust / 5 + 4 + 1.5));
	//	jj1->draw(pDC);

	//	//绘制罗纹线oo1
	//	CVertex *oo1 = new CVertex(new ParaConstraintRelation(cd, ad, bc, - ribLen));
	//	oo1->draw(pDC, &redPen);


	//	//绘制下摆线pp1
	//	CVertex *pp1 = new CVertex(new ParaConstraintRelation(oo1, ad, bc,  ribLen));
	//	pp1->draw(pDC, &redPen);


	//	// 绘制右侧

	//	// 绘制右胸u1v1宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	//	CVertex *u1v1 = new CVertex(new VerConstraintRelation(jj1, bust / 4 + (1.5 * bust / 10 + 4 + 0.3 - 1), - bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
	//	//u1v1->draw(pDC);

	//	// 绘制右领口垂直线d1c1   前领宽处理成了与后领宽一样的。
	//	CVertex *d1c1 = new CVertex(new VerConstraintRelation(ab, bust / 4 + bust / 24 + 3.6, -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
	//	d1c1->draw(pDC,&redPen);


	//	// 绘制右前领窝
	//	CVertex *aq1 = new CVertex(new VerConstraintRelation(ab, bust / 4 , (bust / 24 + 3.6) * 2)); // bust / 12 + 13.7
	//	//aq1->draw(pDC, &greenPen);

	//	CVertex *aa1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::END, a1q1, LineStOrEd::END));// bust / 12 + 13.7
	//	aa1->draw(pDC);

	//	CVertex *ac1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::END, d1c1, LineStOrEd::END));
	//	//ac1->draw(pDC);

	//	double aclength = CPoint1::Distance(dynamic_cast<CLine*>(ac1->getFigure())->GetEd(), dynamic_cast<CLine*>(ac1->getFigure())->GetSt());
	//	CVertex *r1b1 = new CVertex(new VerConstraintRelation(ac1, aclength / (2 * PIXELPERCM), 0.7)); // bust / 12 + 13.7
	//	//r1b1->draw(pDC);

	//	// 接下来用两点画弧线的公式来画。

	//	 //绘制前领窝弧线ab1c1
	//    std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf1;
	//    verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::END));
	//    verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(r1b1, LineStOrEd::END));
	//    verPointPairVecf1.push_back(std::pair<CVertex*, LineStOrEd>(d1c1, LineStOrEd::END));
	// 
	//    CVertex *ab1c1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf1));
	//    ab1c1->draw(pDC, &redPen);
	//   // ab1c1->draw(pDC, &redPen);


	//	//绘制肩斜线 d1t1 射线, dq的起点， 然后与vv1相交
	//	CVertex *d1t1 = new CVertex(new RayConstraintRelation(d1c1, LineStOrEd::START, frontShouldAngle, u1v1));
	//	d1t1->draw(pDC,&redPen);

	//	//绘制肩斜线 d1t1 的延长线
	//	CVertex *d1e1 = new CVertex(new ExpandConstraintRelation(d1t1, frontShouldExpandLen));
	//	d1e1->draw(pDC, &redPen);

	//	//F1点为ut1的1/4点

	//	//射线E1F1  t1u线的1/4点 和 d1e1的终点
	//	CVertex *t1v1 = new CVertex(new LineAndLineConstraintRelation(d1t1, LineStOrEd::END, u1v1, LineStOrEd::END));
	//	CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, LineStOrEd::END, t1v1, LineStOrEd::ONE_FORTH));
	//	e1f1->draw(pDC, &redPen);


	//	//绘制f1g1  fg   G点为ut1的2/3点
	//	CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(e1f1, LineStOrEd::START, t1v1, LineStOrEd::TWO_THIRDS));
	//	f1g1->draw(pDC, &redPen);

	////	double u1h1Length = CPoint1::Distance(dynamic_cast<CLine*>(uu1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	//	CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, - armAngle, 2));
	//	//v1h1->draw(pDC);

	//	//绘制i1j1
	//	CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(- armBindLen, 0);
	//	CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1));
	//	i1j1->draw(pDC, &redPen);


	//	//绘制弧线g1h1i1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec3;
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(f1g1, LineStOrEd::END));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(v1h1, LineStOrEd::END));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

	//	CVertex *g1h1i1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
	//	g1h1i1->draw(pDC, &redPen);

	//	// 绘制j1k1
	//	CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bust / 2, 1)); // bust / 12 + 13.7
	//	j1k1->draw(pDC, &redPen);

	//	// 绘制k1l1
	//	CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, -1));
	//	l1z1->draw(pDC, &redPen);

	//	CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, 1));
	//	z1m1->draw(pDC, &redPen);

	//	//绘制jk
	//	CVertex *l1k1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START));
	//	l1k1->draw(pDC, &redPen);

	//	//绘制n1o1
	//	CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bust / 2, -1));
	//	n1o1->draw(pDC, &redPen);

	//	//绘制m1n1
	//	CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, LineStOrEd::START));
	//	m1n1->draw(pDC, &redPen);

	//	//绘制o1p1
	//	CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, cd, LineStOrEd::END));
	//	o1p1->draw(pDC, &redPen);


	//	// 绘制左侧

	//	// 绘制左背宽线  
	//	CVertex *uv = new CVertex(new VerConstraintRelation(jj1, bust / 4 - (1.5 * bust / 10 + 4 + 0.3 - 1), -bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
	//	//uv->draw(pDC);

	//	//绘制左后领深线dc
	//	CVertex *dc = new CVertex(new VerConstraintRelation(ab, bust / 4 - (bust / 24 + 3.6), -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
	//	dc->draw(pDC,&redPen);



	//	// 绘制左前领窝
	//	
	//	CVertex *ac = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::END, dc, LineStOrEd::END));
	//	//ac->draw(pDC);

	//	double acLength = CPoint1::Distance(dynamic_cast<CLine*>(ac->getFigure())->GetEd(), dynamic_cast<CLine*>(ac->getFigure())->GetSt());
	//	CVertex *rb = new CVertex(new VerConstraintRelation(ac, acLength / (2 * PIXELPERCM),  - 0.7)); // bust / 12 + 13.7
	//	//rb->draw(pDC);



	//	// 接下来用两点画弧线的公式来画。

	//	 //绘制前领窝弧线ab1c1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf2;
	//	verPointPairVecf2.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::END));
	//	verPointPairVecf2.push_back(std::pair<CVertex*, LineStOrEd>(rb, LineStOrEd::START));
	//	verPointPairVecf2.push_back(std::pair<CVertex*, LineStOrEd>(dc, LineStOrEd::END));

	//	CVertex *abc = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf2));
	//	abc->draw(pDC, &redPen);
	//

	//	//绘制肩斜线 dt 射线, d1q1的起点， 然后与uu1相交
	//	CVertex *dt = new CVertex(new RayConstraintRelation(dc, LineStOrEd::START, - frontShouldAngle, uv));
	//	dt->draw(pDC,&redPen);

	//	//绘制肩斜线 dt的延长线
	//	CVertex *de = new CVertex(new ExpandConstraintRelation(dt, -frontShouldExpandLen));
	//	de->draw(pDC, &redPen);

	//	//射线E1F1  t1u线的1/4点 和 d1e1的终点
	//	CVertex *tv = new CVertex(new LineAndLineConstraintRelation(dt, LineStOrEd::START, uv, LineStOrEd::END));
	//	CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, LineStOrEd::START, tv, LineStOrEd::ONE_FORTH));
	//	ef->draw(pDC, &redPen);

	//	//G点为ut1的2/3点
	//	CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ef, LineStOrEd::END, tv, LineStOrEd::TWO_THIRDS));
	//	fg->draw(pDC, &redPen);

	//	//double u1h1Length = CPoint1::Distance(dynamic_cast<CLine*>(uu1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	//	CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, 2));
	//	//vh->draw(pDC);

	//	CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
	//	CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i));
	//	ij->draw(pDC, &redPen);


	//	//绘制袖窿弧线ghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec4;
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(fg, LineStOrEd::END));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(vh, LineStOrEd::START));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

	//	CVertex *ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
	//	ghi->draw(pDC, &redPen);



	//	// 绘制jk
	//	CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1));
	//	jk->draw(pDC, &redPen);

	//	// 绘制kl
	//	CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, -1));
	//	lz->draw(pDC, &redPen);

	//	CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, 1));
	//	zm->draw(pDC, &redPen);

	//	//绘制kl
	//	CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START));
	//	kl->draw(pDC, &redPen);

	//	//绘制no
	//	CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1));
	//	no->draw(pDC, &redPen);

	//	//绘制mn
	//	CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, LineStOrEd::START));
	//	mn->draw(pDC, &redPen);

	//	//绘制op
	//	CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, cd, LineStOrEd::START));
	//	op->draw(pDC, &redPen);
	//
	//
	//}

	//// V领-左袖片
	//void static TestDrawV_LeftSleeve(CDC * pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));
	//	//extern double rectV_SleeveWidth;
	//	//double rectSleeveWidth = 29;
	//	//double rectSleeveLength = 56;
	//	CPoint1 originPoint = CPoint1(110, 420);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidthV_Sleeve);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLengthV_Sleeve);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	/*ab->draw(pDC);
	//	ad->draw(pDC);

	//	bc->draw(pDC);
	//	cd->draw(pDC);*/


	//	//绘制左侧
	//	//袖中线001
	//	CVertex *oo1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Sleeve / 2));
	//	oo1->draw(pDC);

	//	//袖肥jj1
	//	CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, sleeveCrownHeight + 4.5));
	//	jj1->draw(pDC);
	//
	//	CVertex *or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF));
	//

	//	// 袖山留针线  

	//	CVertex *of1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::START, 0, flatCrown / 2));
	//	of1->draw(pDC, &redPen);
	//	CVertex *og1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::ONE_FORTH, 0, flatCrownUp / 2));
	//	//og1->draw(pDC, &greenPen);
	//	CVertex *oh1 = new CVertex(new RayConstraintRelation(or, LineStOrEd::THREE_FORTH, 0, flatCrownDown / 2));
	//	//oh1->draw(pDC, &greenPen);
	//	 

	//	//绘制i1j1
	//	CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(- armBindLen, 0);
	//	CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1));
	//	i1j1->draw(pDC);


	//	//绘制弧线fghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecS1;
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

	//	CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecS1));
	//	f1ghi->draw(pDC, &redPen);

	//	//夹底之下部分长
	//	CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine));
	//	j1k1->draw(pDC, &redPen);

	//
	//	CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffWidth / 2));
	//	om1->draw(pDC,&redPen);
	//	//袖肥jj1
	//	CVertex *l1m1 = new CVertex(new VerConstraintRelation(om1, cuffWidth / 2, - ribLen));
	//	l1m1->draw(pDC,&redPen);

	//	CVertex *k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1m1, LineStOrEd::START));
	//	k1l1->draw(pDC, &redPen);
	//	
	//	CVertex *f1i1 = new CVertex(new LineAndLineConstraintRelation(of1, LineStOrEd::END, i1j1, LineStOrEd::START));
	//	//f1i1->draw(pDC, &greenPen);

	//	CVertex *o1s = new CVertex(new VerConstraintRelation(om1, 0, -ribLen));
	//	o1s->draw(pDC);

	//	CVertex *sl1 = new CVertex(new RayConstraintRelation(o1s, LineStOrEd::START, 0, cuffWidth / 2));
	//	sl1->draw(pDC, &redPen);

	//	CVertex *sl = new CVertex(new RayConstraintRelation(o1s, LineStOrEd::START, 0, - cuffWidth / 2));
	//	sl->draw(pDC, &redPen);


	//	//绘制右侧

	//	// 袖山留针线  

	//	CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, - flatCrown / 2));
	//	of->draw(pDC, &redPen);
	//	CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, - flatCrownUp / 2));
	//	//og->draw(pDC);
	//	CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, - flatCrownDown / 2));
	//	//oh->draw(pDC);


	//	//绘制i1j1
	//	CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
	//	CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i));
	//	ij->draw(pDC);


	//	//绘制弧线fghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecSr;
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(of, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(og, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(oh, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

	//	CVertex *fghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecSr));
	//	fghi->draw(pDC, &redPen);

	//	//夹底之下部分长
	//	CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine));
	//	jk->draw(pDC, &redPen);


	//	CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, - cuffWidth / 2));
	//	om->draw(pDC, &redPen);
	//	//袖肥jj1
	//	CVertex *lm = new CVertex(new VerConstraintRelation(om, 0, -ribLen));
	//	lm->draw(pDC, &redPen);

	//	CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lm, LineStOrEd::START));
	//	kl->draw(pDC, &redPen);

	//	CVertex * fi = new CVertex(new LineAndLineConstraintRelation(of1, LineStOrEd::END, ij, LineStOrEd::START));

	//}

	//// V领-右袖片
	//void static TestDrawV_RightSleeve(CDC * pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

	//	CPoint1 originPoint = CPoint1(1150, 420);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Sleeve);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Sleeve);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidthV_Sleeve);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLengthV_Sleeve);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	/*ab->draw(pDC);
	//	ad->draw(pDC);

	//	bc->draw(pDC);
	//	cd->draw(pDC);*/



	//	//绘制左侧
	//	//袖中线001
	//	CVertex *oo1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Sleeve / 2));
	//	oo1->draw(pDC);

	//	//袖肥jj1
	//	CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, sleeveCrownHeight + 4.5));
	//	jj1->draw(pDC);

	//	CVertex * or = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, jj1, LineStOrEd::HALF));


	//	// 袖山留针线  

	//	CVertex *of1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, flatCrown / 2));
	//	of1->draw(pDC, &redPen);
	//	CVertex *og1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, flatCrownUp / 2));
	//	//og1->draw(pDC, &greenPen);
	//	CVertex *oh1 = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, flatCrownDown / 2));
	//	//oh1->draw(pDC, &greenPen);


	//	//绘制i1j1
	//	CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(-armBindLen, 0);
	//	CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1));
	//	i1j1->draw(pDC);


	//	//绘制弧线fghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecS1;
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::END));
	//	verPointPairVecS1.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

	//	CVertex *f1ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecS1));
	//	f1ghi->draw(pDC, &redPen);

	//	//夹底之下部分长
	//	CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, rectWidthV_Sleeve, armStraightLine));
	//	j1k1->draw(pDC, &redPen);


	//	CVertex *om1 = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, cuffWidth / 2));
	//	om1->draw(pDC, &redPen);
	//	//袖肥jj1
	//	CVertex *l1m1 = new CVertex(new VerConstraintRelation(om1, cuffWidth / 2, -ribLen));
	//	l1m1->draw(pDC, &redPen);

	//	CVertex * k1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1m1, LineStOrEd::START));
	//	k1l1->draw(pDC, &redPen);

	//	CVertex * f1i1 = new CVertex(new LineAndLineConstraintRelation(of1, LineStOrEd::END, i1j1, LineStOrEd::START));
	//	//f1i1->draw(pDC, &greenPen);

	//	//CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, -1));

	//	CVertex * o1s = new CVertex(new VerConstraintRelation(om1, 0, -ribLen));
	//	o1s->draw(pDC);

	//	CVertex *sl1 = new CVertex(new RayConstraintRelation(o1s, LineStOrEd::START, 0, cuffWidth / 2));
	//	sl1->draw(pDC, &redPen);

	//	CVertex *sl = new CVertex(new RayConstraintRelation(o1s, LineStOrEd::START, 0, -cuffWidth / 2));
	//	sl->draw(pDC, &redPen);



	//	//绘制右侧

	//	// 袖山留针线  

	//	CVertex *of = new CVertex(new RayConstraintRelation(or , LineStOrEd::START, 0, -flatCrown / 2));
	//	of->draw(pDC, &redPen);
	//	CVertex *og = new CVertex(new RayConstraintRelation(or , LineStOrEd::ONE_FORTH, 0, -flatCrownUp / 2));
	//	//og->draw(pDC);
	//	CVertex *oh = new CVertex(new RayConstraintRelation(or , LineStOrEd::THREE_FORTH, 0, -flatCrownDown / 2));
	//	//oh->draw(pDC);


	//	//绘制i1j1
	//	CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
	//	CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i));
	//	ij->draw(pDC);


	//	//绘制弧线fghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecSr;
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(of, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(og, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(oh, LineStOrEd::START));
	//	verPointPairVecSr.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

	//	CVertex *fghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecSr));
	//	fghi->draw(pDC, &redPen);

	//	//夹底之下部分长
	//	CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, armStraightLine));
	//	jk->draw(pDC, &redPen);


	//	CVertex *om = new CVertex(new RayConstraintRelation(oo1, LineStOrEd::END, 0, -cuffWidth / 2));
	//	om->draw(pDC, &redPen);
	//	//袖肥jj1
	//	CVertex *lm = new CVertex(new VerConstraintRelation(om, 0, -ribLen));
	//	lm->draw(pDC, &redPen);

	//	CVertex * kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lm, LineStOrEd::START));
	//	kl->draw(pDC, &redPen);

	//	CVertex * fi = new CVertex(new LineAndLineConstraintRelation(of1, LineStOrEd::END, ij, LineStOrEd::START));

	//}

	//// V领-整件
	//void static TestDrawV_WholeGarment(CDC * pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

	//	CPoint1 originPoint = CPoint1(600, 20);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidthV_Body);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLengthV_Body);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidthV_Body);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLengthV_Body);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	//ab->draw(pDC);
	//	//ad->draw(pDC);

	//	//bc->draw(pDC);
	//	//cd->draw(pDC);



	//	//oo1 绘制后中线。 平行ad， 与ab，cd相交，
	//	CVertex *aa1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Body / 2));
	//	aa1->draw(pDC);

	//	//ww1 绘制腰围线。 平行ab， 与ad，bc相交
	//	CVertex *ww1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, backLength));
	//	/*ww1->draw(pDC);*/

	//	//jj1 绘制胸围线  平行ad， 与ab，ef相交，
	//	CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, bust / 5 + 4 + 1.5));
	//	jj1->draw(pDC);



	//	// 绘制右侧

	//	// 绘制右背宽线  垂直于jj1， 与ab，ef相交，  假设距离ad的距离为150
	//	CVertex *u1v1 = new CVertex(new VerConstraintRelation(jj1, bust / 4 + (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
	//	/*u1v1->draw(pDC);*/

 //       // 绘制右后领深线dq
	//	CVertex *d1q1 = new CVertex(new VerConstraintRelation(ab, bust / 4 + bust / 24 + 3.6, -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
	//	d1q1->draw(pDC, &redPen);


	//	// 绘制右前领窝

	//	CVertex *aq11 = new CVertex(new VerConstraintRelation(ab, bust / 4, (bust / 24 + 3.6) * 2)); // bust / 12 + 13.7
	//	//aq11->draw(pDC, &greenPen);

	//	CVertex *aa11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, aa1, LineStOrEd::END));// bust / 12 + 13.7
	//	//aa11->draw(pDC, &greenPen);

	//	CVertex *ac11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, d1q1, LineStOrEd::END));
	//	//ac11->draw(pDC, &greenPen);

	//	double acl1ength = CPoint1::Distance(dynamic_cast<CLine*>(ac11->getFigure())->GetEd(), dynamic_cast<CLine*>(ac11->getFigure())->GetSt());
	//	CVertex *r1b1 = new CVertex(new VerConstraintRelation(ac11, acl1ength / (2 * PIXELPERCM), 0.7)); // bust / 12 + 13.7
	//	//r1b1->draw(pDC);

	//
	//	 //绘制前领窝弧线ab1c1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf11;
	//	verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(aq11, LineStOrEd::END));
	//	verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(r1b1, LineStOrEd::END));
	//	verPointPairVecf11.push_back(std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::END));

	//	CVertex *ab1c11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf11));
	//	ab1c11->draw(pDC, &redPen);



	//	//aq1, 这里为辅助线， 线线关系 oo1的起点 和 d1q1的终点组成的线  
	//	CVertex *aq1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1q1, LineStOrEd::END));

	//	//ob1, 后领窝直线部分
	//	CVertex *ab1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq1, LineStOrEd::ONE_THIRD));
	//	ab1->draw(pDC, &redPen);

	//	// 后领窝弧线

	//	//d1c1 线线关系， aq1的2/3点和d1q1的起点组成的线。
	//	CVertex *d1c1 = new CVertex(new LineAndLineConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, d1q1, LineStOrEd::START));
	//	//d1c1->draw(pDC);

	//	CVertex *ac1 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, d1c1, LineStOrEd::START));
	//	//ac1->draw(pDC);



	//	CVertex *cr1 = new CVertex(new RayConstraintRelation(aq1, LineStOrEd::TWO_THIRDS, (180 + armAngle), 0.5));
	//	//cr1->draw(pDC,&greenPen);

	//	//绘制弧线ab1d1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec1;
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::ONE_THIRD));
	//	//verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::TWO_THIRDS));
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(cr1, LineStOrEd::START));
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::START));

	//	CVertex *ab1d1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	//	ab1d1->draw(pDC, &redPen);


	//	// 前两个点是开始点和结束点， 后两个点是控制点 （这两个控制点是一点一点试出来的， 比较蛋疼）
	//	//LineAndBezierConstraintRelation *testbezier = new LineAndBezierConstraintRelation(
	//	//	std::pair<CVertex*, LineStOrEd>(aq1, LineStOrEd::ONE_THIRD),
	//	//	std::pair<CVertex*, LineStOrEd>(d1q1, LineStOrEd::START),
	//	//	CPoint1(1000, 50), CPoint1(1080, 50));
	//	////	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
	//	//CVertex *bezier = new CVertex(testbezier);
	//	//bezier->draw(pDC, &greenPen);



	//	//绘制肩斜线 d1t1 射线, dq的起点， 然后与vv1相交
	//	CVertex *d1t1 = new CVertex(new RayConstraintRelation(d1q1, LineStOrEd::START, backShouldAngle, u1v1));
	//	d1t1->draw(pDC);

	//	//绘制肩斜线 d1t1 的延长线
	//	CVertex *d1e1 = new CVertex(new ExpandConstraintRelation(d1t1, backShouldExpandLen));
	//	d1e1->draw(pDC, &redPen);

	//	//F1点为ut1的1/4点

	//	//射线E1F1  t1u线的1/4点 和 d1e1的终点
	//	CVertex *t1v1 = new CVertex(new LineAndLineConstraintRelation(d1t1, LineStOrEd::END, u1v1, LineStOrEd::END));
	//	CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(d1e1, LineStOrEd::END, t1v1, LineStOrEd::ONE_FORTH));
	//	e1f1->draw(pDC, &redPen);


	//	//绘制f1g1  fg   G点为ut1的2/3点
	//	CVertex *f1g1 = new CVertex(new LineAndLineConstraintRelation(e1f1, LineStOrEd::START, t1v1, LineStOrEd::TWO_THIRDS));
	//	f1g1->draw(pDC, &redPen);


	//	double v1h1Length = CPoint1::Distance(dynamic_cast<CLine*>(u1v1->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetEd()) / 3;
	//	CVertex *v1h1 = new CVertex(new RayConstraintRelation(u1v1, LineStOrEd::END, -armAngle, v1h1Length / PIXELPERCM));
	//	//v1h1->draw(pDC);

	//	//绘制i1j1
	//	CPoint1 i1 = dynamic_cast<CLine*>(jj1->getFigure())->GetEd() + CPoint1(-armBindLen, 0);
	//	CVertex *i1j1 = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::END, i1));
	//	i1j1->draw(pDC, &redPen);


	//	//绘制弧线g1h1i1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec3;
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(f1g1, LineStOrEd::END));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(v1h1, LineStOrEd::END));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(i1j1, LineStOrEd::START));

	//	CVertex *g1h1i1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
	//	g1h1i1->draw(pDC, &redPen);

	//	// 绘制j1k1
	//	CVertex *j1k1 = new CVertex(new VerConstraintRelation(jj1, bust / 2, 1)); // bust / 12 + 13.7
	//	j1k1->draw(pDC, &redPen);

	//	// 绘制k1l1
	//	CVertex *l1z1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, -1));
	//	l1z1->draw(pDC, &redPen);

	//	CVertex *z1m1 = new CVertex(new VerConstraintRelation(ww1, (bust + waist) / 4, 1));
	//	z1m1->draw(pDC, &redPen);

	//	//绘制jk
	//	CVertex *l1k1 = new CVertex(new LineAndLineConstraintRelation(j1k1, LineStOrEd::END, l1z1, LineStOrEd::START));
	//	l1k1->draw(pDC, &redPen);

	//	//绘制罗纹线oo1
	//	CVertex *oo1 = new CVertex(new ParaConstraintRelation(cd, ad, bc, -ribLen));
	//	oo1->draw(pDC, &redPen);

	//	//绘制n1o1
	//	CVertex *n1o1 = new CVertex(new VerConstraintRelation(oo1, bust / 2, -1));
	//	n1o1->draw(pDC, &redPen);

	//	//绘制m1n1
	//	CVertex *m1n1 = new CVertex(new LineAndLineConstraintRelation(z1m1, LineStOrEd::END, n1o1, LineStOrEd::START));
	//	m1n1->draw(pDC, &redPen);

	//	//绘制o1p1
	//	CVertex *o1p1 = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::END, cd, LineStOrEd::END));
	//	o1p1->draw(pDC, &redPen);

	//	//绘制下摆线pp1
	//	CVertex *pp1 = new CVertex(new ParaConstraintRelation(oo1, ad, bc, ribLen));
	//	pp1->draw(pDC, &redPen);


	//	// 绘制左侧

	//	// 绘制左背宽线  
	//	CVertex *uv = new CVertex(new VerConstraintRelation(jj1, bust / 4 - (1.5 * bust / 10 + 4 + 0.3), -bust / 5 - 4 - 1.5)); // bust / 12 + 13.7
	//	/*uv->draw(pDC);*/


	//	//绘制左后领深线dq
	//	CVertex *dq = new CVertex(new VerConstraintRelation(ab, bust / 4 - (bust / 24 + 3.6), -(bust / 24 + 3.6) / 3)); // bust / 12 + 13.7
	//	dq->draw(pDC,&redPen);


	//	// 绘制左前领窝
	//	CVertex *a1c11 = new CVertex(new LineAndLineConstraintRelation(aq11, LineStOrEd::END, dq, LineStOrEd::END));
	//	//a1c11->draw(pDC, &greenPen);

	//	//double a1cl1ength = CPoint1::Distance(dynamic_cast<CLine*>(a1c11->getFigure())->GetEd(), dynamic_cast<CLine*>(a1c11->getFigure())->GetSt());
	//	CVertex *rb = new CVertex(new VerConstraintRelation(a1c11, acl1ength / (2 * PIXELPERCM), - 0.7)); // bust / 12 + 13.7
	//	//rb->draw(pDC);


	//	//绘制前领窝弧线ab1c1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVecf12;
	//	verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(aq11, LineStOrEd::END));
	//	verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(rb, LineStOrEd::START));
	//	verPointPairVecf12.push_back(std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::END));

	//	CVertex *a1b1c11 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVecf12));
	//	a1b1c11->draw(pDC, &redPen);



	//	//aq, 辅助线， 线线关系， oo1的起点 和 d1q1的终点组成的线  
	//	CVertex *aq = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dq, LineStOrEd::END));

	//	//ob1, 后领窝直线部分
	//	CVertex *a2b = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS));
	//	a2b->draw(pDC, &redPen);

	//	//dc, 辅助线， 线线关系， oq的2/3点和dq的起点组成的线
	//	CVertex *dc = new CVertex(new LineAndLineConstraintRelation(dq, LineStOrEd::START, aq, LineStOrEd::ONE_THIRD));
	//	//dc->draw(pDC);



	//	// 后领窝弧线

	//	CVertex *ac = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, dc, LineStOrEd::END));
	//	//ac->draw(pDC);

	//	CVertex *ab2 = new CVertex(new LineAndLineConstraintRelation(aa1, LineStOrEd::START, aq, LineStOrEd::TWO_THIRDS));
	//	//ab2->draw(pDC, &redPen);

	//	CVertex *cr = new CVertex(new RayConstraintRelation(aq, LineStOrEd::ONE_THIRD, -(20 + armAngle), 0.5));
	//	//cr->draw(pDC,&greenPen);

	//	//绘制弧线ab1d1
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec2;
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS));
	//	//verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::ONE_THIRD));
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(cr, LineStOrEd::END));
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START));

	//	CVertex *abd = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	//	abd->draw(pDC, &redPen);


	//	// 前两个点是开始点和结束点， 后两个点是控制点 （这两个控制点是一点一点试出来的， 比较蛋疼）
	//	//LineAndBezierConstraintRelation *testbezierl = new LineAndBezierConstraintRelation(
	//	//	std::pair<CVertex*, LineStOrEd>(aq, LineStOrEd::TWO_THIRDS),
	//	//	std::pair<CVertex*, LineStOrEd>(dq, LineStOrEd::START),
	//	//	CPoint1(858, 50), CPoint1(900, 50));
	//	////	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(ab, LineStOrEd::START));
	//	//CVertex *bezierl = new CVertex(testbezier);
	//	//bezierl->draw(pDC, &redPen);



	//	//绘制肩斜线 dt 射线, d1q1的起点， 然后与uu1相交
	//	CVertex *dt = new CVertex(new RayConstraintRelation(dq, LineStOrEd::START, -backShouldAngle, uv));
	//	dt->draw(pDC);

	//	//绘制肩斜线 dt的延长线
	//	CVertex *de = new CVertex(new ExpandConstraintRelation(dt, -backShouldExpandLen));
	//	de->draw(pDC, &redPen);


	//	//射线E1F1  t1u线的1/4点 和 d1e1的终点
	//	CVertex *tv = new CVertex(new LineAndLineConstraintRelation(dt, LineStOrEd::START, uv, LineStOrEd::END));
	//	CVertex *ef = new CVertex(new LineAndLineConstraintRelation(de, LineStOrEd::START, tv, LineStOrEd::ONE_FORTH));
	//	ef->draw(pDC, &redPen);


	//	//G点为ut1的2/3点
	//	CVertex *fg = new CVertex(new LineAndLineConstraintRelation(ef, LineStOrEd::END, tv, LineStOrEd::TWO_THIRDS));
	//	fg->draw(pDC, &redPen);


	//	double vhLength = CPoint1::Distance(dynamic_cast<CLine*>(uv->getFigure())->GetEd(), dynamic_cast<CLine*>(jj1->getFigure())->GetSt()) / 3;
	//	CVertex *vh = new CVertex(new RayConstraintRelation(uv, LineStOrEd::END, 180 + armAngle, vhLength / PIXELPERCM));
	//	//vh->draw(pDC);


	//	CPoint1 i = dynamic_cast<CLine*>(jj1->getFigure())->GetSt() + CPoint1(armBindLen, 0);
	//	CVertex *ij = new CVertex(new LineAndPointConstraintRelation(jj1, LineStOrEd::START, i));
	//	ij->draw(pDC, &redPen);


	//	//绘制袖窿弧线ghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec4;
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(fg, LineStOrEd::END));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(vh, LineStOrEd::START));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(ij, LineStOrEd::END));

	//	CVertex *ghi = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
	//	ghi->draw(pDC, &redPen);


	//	// 绘制jk
	//	CVertex *jk = new CVertex(new VerConstraintRelation(jj1, 0, 1));
	//	jk->draw(pDC, &redPen);

	//	// 绘制kl
	//	CVertex *lz = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, -1));
	//	lz->draw(pDC, &redPen);

	//	CVertex *zm = new CVertex(new VerConstraintRelation(ww1, (bust - waist) / 4, 1));
	//	zm->draw(pDC, &redPen);


	//	CVertex *kl = new CVertex(new LineAndLineConstraintRelation(jk, LineStOrEd::END, lz, LineStOrEd::START));
	//	kl->draw(pDC, &redPen);


	//	//绘制no
	//	CVertex *no = new CVertex(new VerConstraintRelation(oo1, 0, -1));
	//	no->draw(pDC, &redPen);


	//	//绘制mn
	//	CVertex *mn = new CVertex(new LineAndLineConstraintRelation(zm, LineStOrEd::END, no, LineStOrEd::START));
	//	mn->draw(pDC, &redPen);

	//	//绘制op
	//	CVertex *op = new CVertex(new LineAndLineConstraintRelation(oo1, LineStOrEd::START, cd, LineStOrEd::START));
	//	op->draw(pDC, &redPen);



	//	//左袖  袖中线
	//	CVertex *oor = new CVertex(new RayConstraintRelation(de, LineStOrEd::START,180 - (frontShouldAngle + sleeveTiltAngle), rectLengthV_Sleeve));
	//	oor->draw(pDC, &redPen);

	//	//袖山留针 
	//	double oorLength = CPoint1::Distance(dynamic_cast<CLine*>(oor->getFigure())->GetEd(), dynamic_cast<CLine*>(oor->getFigure())->GetSt());
	//	CVertex *ofr = new CVertex(new VerConstraintRelation(oor, oorLength / PIXELPERCM, flatCrown / 2));
	//	ofr->draw(pDC, &redPen);

	//	//袖肥
	//	CVertex *ojr = new CVertex(new VerConstraintRelation(oor, rectLengthV_Sleeve - sleeveCrownHeight - 4.5, rectWidthV_Sleeve / 2));
	//	ojr->draw(pDC, &redPen);

	//	CVertex * orr = new CVertex(new LineAndLineConstraintRelation(oor, LineStOrEd::END, ojr, LineStOrEd::START));
	//	//orr->draw(pDC, &greenPen);

	//	double orrLength = CPoint1::Distance(dynamic_cast<CLine*>(orr->getFigure())->GetEd(), dynamic_cast<CLine*>(orr->getFigure())->GetSt());
	//	CVertex *ogr = new CVertex(new VerConstraintRelation(orr,  2 * (orrLength / PIXELPERCM) / 3, flatCrownUp / 2));
	//	//ogr->draw(pDC);

	//	CVertex *ohr = new CVertex(new VerConstraintRelation(orr, (orrLength / PIXELPERCM) / 3, flatCrownDown / 2));
	//	//ohr->draw(pDC);

	//	//袖山ghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec5;
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ofr, LineStOrEd::END));
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ogr, LineStOrEd::END));
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ohr, LineStOrEd::END));
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(ojr, LineStOrEd::END));

	//	CVertex *ghjr = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
	//	ghjr->draw(pDC, &redPen);

	//	//袖口线
	//	CVertex *om = new CVertex(new VerConstraintRelation(oor, 0, cuffWidth / 2));
	//	om->draw(pDC, &redPen);

	//	CVertex *ol = new CVertex(new VerConstraintRelation(oor,  ribLen, cuffWidth / 2));
	//	ol->draw(pDC, &redPen);

	//	CVertex *ml = new CVertex(new LineAndLineConstraintRelation(om, LineStOrEd::END, ol, LineStOrEd::END));
	//	ml->draw(pDC, &redPen);

	//	CVertex *j1k1r = new CVertex(new VerConstraintRelation(ojr, rectWidthV_Sleeve/2, -armStraightLine));
	//	j1k1r->draw(pDC, &redPen);

	//	CVertex *j1l1r = new CVertex(new LineAndLineConstraintRelation(j1k1r, LineStOrEd::START, ol, LineStOrEd::END));
	//	j1l1r->draw(pDC, &redPen);





	//	//右袖   袖中线
	//	CVertex *ool = new CVertex(new RayConstraintRelation(d1e1, LineStOrEd::END, frontShouldAngle + sleeveTiltAngle, rectLengthV_Sleeve));
	//	ool->draw(pDC, &redPen);

	//	//袖山留针  
	//	CVertex *of1 = new CVertex(new VerConstraintRelation(ool, 0, - flatCrown / 2));
	//	of1->draw(pDC, &redPen);

	//	//袖肥
	//	CVertex *oj1 = new CVertex(new VerConstraintRelation(ool, sleeveCrownHeight + 4.5, - rectWidthV_Sleeve / 2));
	//	oj1->draw(pDC, &redPen);


	//	CVertex * or1 = new CVertex(new LineAndLineConstraintRelation(ool, LineStOrEd::START, oj1, LineStOrEd::END));
	//	//or1->draw(pDC, &greenPen);

	//	double or1Length = CPoint1::Distance(dynamic_cast<CLine*>(or1->getFigure())->GetEd(), dynamic_cast<CLine*>(or1->getFigure())->GetSt());
	//	CVertex *og1 = new CVertex(new VerConstraintRelation(or1, (or1Length / PIXELPERCM)/3, -flatCrownUp / 2));
	//	//og1->draw(pDC);

	//	CVertex *oh1 = new CVertex(new VerConstraintRelation(or1, 2 * (or1Length / PIXELPERCM) / 3, -flatCrownDown / 2));
	//	//oh1->draw(pDC);


	//	//绘制袖窿弧线ghi
	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec6;
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(of1, LineStOrEd::START));
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(og1, LineStOrEd::START));
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oh1, LineStOrEd::START));
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(oj1, LineStOrEd::START));

	//	CVertex *ghjl = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
	//	ghjl->draw(pDC, &redPen);


	//	//袖口线
	//	CVertex *om1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve, -cuffWidth / 2));
	//	om1->draw(pDC, &redPen);

	//	CVertex *ol1 = new CVertex(new VerConstraintRelation(ool, rectLengthV_Sleeve - ribLen, -cuffWidth / 2));
	//	ol1->draw(pDC, &redPen);

	//	CVertex *m1l1 = new CVertex(new LineAndLineConstraintRelation(om1, LineStOrEd::START, ol1, LineStOrEd::START));
	//	m1l1->draw(pDC, &redPen);

	//	CVertex *j1k1l = new CVertex(new VerConstraintRelation(oj1, 0, armStraightLine));
	//	j1k1l->draw(pDC, &redPen);

	//	CVertex *j1l1 = new CVertex(new LineAndLineConstraintRelation(j1k1l, LineStOrEd::END, ol1, LineStOrEd::START));
	//	j1l1->draw(pDC, &redPen);


	//}


	//// 马夹
	//void static TestDraw_Vest(CDC * pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));
	//
	//	CPoint1 originPoint = CPoint1(120, 50);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidth_Vest);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLength_Vest);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidth_Vest);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLength_Vest);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	ab->draw(pDC);
	//	ad->draw(pDC);

	//	bc->draw(pDC);
	//	cd->draw(pDC);




	//	// 绘制胸围线
	//	CVertex *gg1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, armHoleDepth + 2));
	//	gg1->draw(pDC);

	//	// 绘制后中线
	//	CVertex *zz1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, bust / 2 + placket));
	//	zz1->draw(pDC);

	//	// 左侧缝线
	//	CVertex *op = new CVertex(new ParaConstraintRelation(ad, gg1, cd, bust / 4 + placket));
	//	op->draw(pDC);

	//	// 右侧缝线
	//	CVertex *o1p1 = new CVertex(new ParaConstraintRelation(ad, gg1, cd, 3 * bust / 4 + placket));
	//	o1p1->draw(pDC);

	//	// 左胸宽线  
	//	CVertex *j0k = new CVertex(new ParaConstraintRelation(ad, ab, gg1, bust / 4 + placket - frontArmholeSpace));
	//	j0k->draw(pDC);

	//	// 左背宽线  
	//	CVertex *u0t = new CVertex(new ParaConstraintRelation(ad, ab, gg1, bust / 4 + placket + backArmholeSpace));
	//	u0t->draw(pDC);

	//	// 右背宽线  
	//	CVertex *u01t1 = new CVertex(new ParaConstraintRelation(ad, ab, gg1, 3 * bust / 4 + placket - backArmholeSpace));
	//	u01t1->draw(pDC);

	//	// 右胸宽线  
	//	CVertex *j01k1 = new CVertex(new ParaConstraintRelation(ad, ab, gg1, 3 * bust / 4 + placket + frontArmholeSpace));
	//	j01k1->draw(pDC);





 //       // 左前片

	//	// 左领窝直线
	//	CVertex *ii0 = new CVertex(new VerConstraintRelation(ab, frontCollarWidth / 2, -backCollarDepth));
	//	ii0->draw(pDC, &redPen);

	//    //绘制左前领窝弧线ghi
	//	CVertex *gi0 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, ii0, LineStOrEd::END));
	//	//gi0->draw(pDC, &redPen);

	//	double gi0length = CPoint1::Distance(dynamic_cast<CLine*>(gg1->getFigure())->GetSt(), dynamic_cast<CLine*>(ii0->getFigure())->GetEd());
	//	CVertex *hh0 = new CVertex(new VerConstraintRelation(gi0, gi0length / (2 * PIXELPERCM), 1)); // bust / 12 + 13.7
	//	//hh0->draw(pDC);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec1;
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(gg1, LineStOrEd::START));
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(hh0, LineStOrEd::END));
	//	verPointPairVec1.push_back(std::pair<CVertex*, LineStOrEd>(ii0, LineStOrEd::END));

	//	CVertex *gh0i0 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec1));
	//	gh0i0->draw(pDC, &redPen);

	//	//左前肩线
	//	CVertex *ij = new CVertex(new RayConstraintRelation(ii0, LineStOrEd::START, frontShouldAngle, j0k));
	//	ij->draw(pDC, &redPen);

	//	//左前袖窿直线
	//	CVertex *jk = new CVertex(new LineAndLineConstraintRelation(ij, LineStOrEd::END, j0k, LineStOrEd::END));
	//	//jk->draw(pDC, &greenPen);

	//	CVertex *jl = new CVertex(new LineAndLineConstraintRelation(ij, LineStOrEd::END, jk, LineStOrEd::TWO_THIRDS));
	//	jl->draw(pDC, &redPen);

	//	//左前袖窿腋下
	//	CVertex *on = new CVertex(new RayConstraintRelation(op, LineStOrEd::START, 0, -armBindLen + 2));
	//	on->draw(pDC, &redPen);

	//    //绘制左袖窿弧线lmn
	//	double okLength = CPoint1::Distance(dynamic_cast<CLine*>(jk->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
	//	CVertex *km = new CVertex(new RayConstraintRelation(jk, LineStOrEd::END, -armAngle, okLength / PIXELPERCM));
	//	km->draw(pDC);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec2;
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(jl, LineStOrEd::END));
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(km, LineStOrEd::END));
	//	verPointPairVec2.push_back(std::pair<CVertex*, LineStOrEd>(on, LineStOrEd::START));

	//	CVertex *lmn = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec2));
	//	lmn->draw(pDC, &redPen);

	//	// 左前中线
	//	CVertex *df = new CVertex(new VerConstraintRelation(cd, 0, -frontTiltHeight));
	//	df->draw(pDC, &greenPen);

	//	CVertex *de = new CVertex(new RayConstraintRelation(cd, LineStOrEd::START, 0, frontTiltLength));
	//	de->draw(pDC, &greenPen);

	//	CVertex *gf = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::START, df, LineStOrEd::START));
	//	gf->draw(pDC, &redPen);

	//	CVertex *ef = new CVertex(new LineAndLineConstraintRelation(df, LineStOrEd::START, de, LineStOrEd::END));
	//	ef->draw(pDC, &redPen);





	//	// 左后片
	//	CVertex *vw = new CVertex(new VerConstraintRelation(ab, bust / 2 + placket - backCollarWidth / 2, -backCollarDepth));
	//	vw->draw(pDC, &greenPen);

	//	//左后袖窿腋下
	//	CVertex *oq = new CVertex(new RayConstraintRelation(op, LineStOrEd::START, 0, armBindLen - 2.3));
	//	oq->draw(pDC, &redPen);

	//	//左后肩线
	//	CVertex *uv = new CVertex(new RayConstraintRelation(vw, LineStOrEd::START, -frontShouldAngle, u0t));
	//	uv->draw(pDC, &redPen);

	//	// 左后袖笼直线
	//	CVertex *ut = new CVertex(new LineAndLineConstraintRelation(uv, LineStOrEd::START, u0t, LineStOrEd::END));
	//	//jk->draw(pDC, &greenPen);

	//	CVertex *us = new CVertex(new LineAndLineConstraintRelation(uv, LineStOrEd::START, ut, LineStOrEd::TWO_THIRDS));
	//	us->draw(pDC, &redPen);

	//	//绘制左袖窿弧线lmn
	//	double otLength = CPoint1::Distance(dynamic_cast<CLine*>(ut->getFigure())->GetEd(), dynamic_cast<CLine*>(op->getFigure())->GetSt()) / 3;
	//	CVertex *rt = new CVertex(new RayConstraintRelation(ut, LineStOrEd::END, armAngle + 180, otLength / PIXELPERCM));
	//	rt->draw(pDC);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec3;
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(us, LineStOrEd::END));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(rt, LineStOrEd::START));
	//	verPointPairVec3.push_back(std::pair<CVertex*, LineStOrEd>(oq, LineStOrEd::END));

	//	CVertex *qrs = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec3));
	//	qrs->draw(pDC, &redPen);

	//	// 左领窝弧线
	//	CVertex *wz = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::START, vw, LineStOrEd::END));
	//	
	//	CVertex *x0z = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::START,wz, LineStOrEd::TWO_THIRDS));
 //       x0z->draw(pDC, &redPen);

	//	CVertex *xx0 = new CVertex(new RayConstraintRelation(wz, LineStOrEd::ONE_THIRD, - armAngle - 15, 0.5));
	//	xx0->draw(pDC, &greenPen);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec4;
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(vw, LineStOrEd::START));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(xx0, LineStOrEd::END));
	//	verPointPairVec4.push_back(std::pair<CVertex*, LineStOrEd>(wz, LineStOrEd::TWO_THIRDS));

	//	CVertex *vxy = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec4));
	//	vxy->draw(pDC, &redPen);



	// //右后片
	//	CVertex *v1w1 = new CVertex(new VerConstraintRelation(ab, bust / 2 + placket + backCollarWidth / 2, -backCollarDepth));
	//	v1w1->draw(pDC, &greenPen);

	//	//右后袖窿腋下
	//	CVertex *o1q1 = new CVertex(new RayConstraintRelation(o1p1, LineStOrEd::START, 0, - armBindLen + 2.3));
	//	o1q1->draw(pDC, &redPen);

	//	//右后肩线
	//	CVertex *u1v1 = new CVertex(new RayConstraintRelation(v1w1, LineStOrEd::START, frontShouldAngle+180, u01t1));
	//	u1v1->draw(pDC, &redPen);

	//	// 左领窝弧线
	//	CVertex *w1z = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::START, v1w1, LineStOrEd::END));

	//	CVertex *y1z = new CVertex(new LineAndLineConstraintRelation(zz1, LineStOrEd::START, w1z, LineStOrEd::ONE_THIRD));
	//	y1z->draw(pDC, &redPen);

	//	CVertex *x1x01 = new CVertex(new RayConstraintRelation(w1z, LineStOrEd::TWO_THIRDS,180 + (armAngle + 15), 0.5));
	//	x1x01->draw(pDC, &greenPen);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec5;
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(v1w1, LineStOrEd::START));
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(x1x01, LineStOrEd::START));
	//	verPointPairVec5.push_back(std::pair<CVertex*, LineStOrEd>(w1z, LineStOrEd::ONE_THIRD));

	//	CVertex *v1x1y1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec5));
	//	v1x1y1->draw(pDC, &redPen);

	//	//右后袖笼直线
	//	CVertex *u1t1 = new CVertex(new LineAndLineConstraintRelation(u1v1, LineStOrEd::END, u01t1, LineStOrEd::END));
	//	//u1t1->draw(pDC, &redPen);

	//	CVertex *u1s1 = new CVertex(new LineAndLineConstraintRelation(u1v1, LineStOrEd::END, u1t1, LineStOrEd::TWO_THIRDS));
	//	u1s1->draw(pDC, &redPen);

	//	//绘制左袖窿弧线q1r1s1
	//	double o1t1Length = CPoint1::Distance(dynamic_cast<CLine*>(u1t1->getFigure())->GetEd(), dynamic_cast<CLine*>(o1p1->getFigure())->GetSt()) / 3;
	//	CVertex *r1t1 = new CVertex(new RayConstraintRelation(u1t1, LineStOrEd::END, - armAngle, o1t1Length / PIXELPERCM));
	//	//r1t1->draw(pDC,&greenPen);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec6;
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(u1s1, LineStOrEd::END));
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(r1t1, LineStOrEd::END));
	//	verPointPairVec6.push_back(std::pair<CVertex*, LineStOrEd>(o1q1, LineStOrEd::START));

	//	CVertex *q1r1s1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec6));
	//	q1r1s1->draw(pDC, &redPen);




	//	// 右前片

	//	// 右领窝直线
	//	CVertex *i1i01 = new CVertex(new VerConstraintRelation(ab, bust + 2 * placket - frontCollarWidth / 2, - backCollarDepth));
	//	i1i01->draw(pDC, &redPen);

	//	//绘制左前领窝弧线ghi
	//	CVertex *g1i01 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, i1i01, LineStOrEd::END));
	//	//g1i01->draw(pDC, &redPen);

	//	//double gi0length = CPoint1::Distance(dynamic_cast<CLine*>(gg1->getFigure())->GetSt(), dynamic_cast<CLine*>(ii0->getFigure())->GetEd());
	//	CVertex *h1h01 = new CVertex(new VerConstraintRelation(g1i01, gi0length / (2 * PIXELPERCM), -1)); // bust / 12 + 13.7
	//	//h1h01->draw(pDC,&greenPen);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec7;
	//	verPointPairVec7.push_back(std::pair<CVertex*, LineStOrEd>(gg1, LineStOrEd::END));
	//	verPointPairVec7.push_back(std::pair<CVertex*, LineStOrEd>(h1h01, LineStOrEd::START));
	//	verPointPairVec7.push_back(std::pair<CVertex*, LineStOrEd>(i1i01, LineStOrEd::END));

	//	CVertex *g1h01i01 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec7));
	//	g1h01i01->draw(pDC, &redPen);

	//	//右前肩线
	//	CVertex *i1j1 = new CVertex(new RayConstraintRelation(i1i01, LineStOrEd::START, -frontShouldAngle, j01k1));
	//	i1j1->draw(pDC, &redPen);

	//	//左前袖窿直线
	//	CVertex *j1k1 = new CVertex(new LineAndLineConstraintRelation(i1j1, LineStOrEd::START, j01k1, LineStOrEd::END));
	//	//j1k1->draw(pDC, &greenPen);

	//	CVertex *j1l1 = new CVertex(new LineAndLineConstraintRelation(i1j1, LineStOrEd::START, j1k1, LineStOrEd::TWO_THIRDS));
	//	j1l1->draw(pDC, &redPen);

	//	//左前袖窿腋下
	//	CVertex *o1n1 = new CVertex(new RayConstraintRelation(o1p1, LineStOrEd::START, 0, armBindLen - 2));
	//	o1n1->draw(pDC, &redPen);

	//	//绘制左袖窿弧线lmn
	//	double o1k1Length = CPoint1::Distance(dynamic_cast<CLine*>(j1k1->getFigure())->GetEd(), dynamic_cast<CLine*>(o1p1->getFigure())->GetSt()) / 3;
	//	CVertex *k1m1 = new CVertex(new RayConstraintRelation(j1k1, LineStOrEd::END, armAngle + 180, o1k1Length / PIXELPERCM));
	//	k1m1->draw(pDC,&greenPen);

	//	std::vector<std::pair<CVertex*, LineStOrEd>> verPointPairVec8;
	//	verPointPairVec8.push_back(std::pair<CVertex*, LineStOrEd>(j1l1, LineStOrEd::END));
	//	verPointPairVec8.push_back(std::pair<CVertex*, LineStOrEd>(k1m1, LineStOrEd::START));
	//	verPointPairVec8.push_back(std::pair<CVertex*, LineStOrEd>(o1n1, LineStOrEd::END));

	//	CVertex *l1m1n1 = new CVertex(new LineAndCurveConstraintRelation(verPointPairVec8));
	//	l1m1n1->draw(pDC, &redPen);

	//	// 右前中线
	//	CVertex *cf1 = new CVertex(new VerConstraintRelation(cd, bust + 2 * placket, -frontTiltHeight));
	//	cf1->draw(pDC, &greenPen);

	//	//CVertex *ce1 = new CVertex(new VerConstraintRelation(bc, rectLength_Vest, -frontTiltLength)); 垂直关系。
	//	//fq 线点关系， ef线的终点， 还有c点左2cm（这里自定义了左10像素，后面需要该）
	//	//CPoint1 Q = dynamic_cast<CLine*>(cd->getFigure())->GetEd() + CPoint1(-frontTiltLength * PIXELPERCM, 0);
	//	//CVertex *ce1 = new CVertex(new LineAndPointConstraintRelation(cd, LineStOrEd::END, Q));

	//	CVertex *ce1 = new CVertex(new RayConstraintRelation(cd, LineStOrEd::END,0, -frontTiltLength));
	//	ce1->draw(pDC, &greenPen);

	//	CVertex *g1f1 = new CVertex(new LineAndLineConstraintRelation(gg1, LineStOrEd::END, cf1, LineStOrEd::START));
	//	g1f1->draw(pDC, &redPen);

	//	CVertex *e1f1 = new CVertex(new LineAndLineConstraintRelation(cf1, LineStOrEd::START, ce1, LineStOrEd::START));
	//	e1f1->draw(pDC, &redPen);

	//	CVertex *ee1 = new CVertex(new LineAndLineConstraintRelation(e1f1, LineStOrEd::START, ef, LineStOrEd::END));
	//	ee1->draw(pDC, &redPen);


	//	// 左口袋 // 已知线平行于y轴。

	//	CVertex *dgl = new CVertex(new VerConstraintRelation(ad, rectLength_Vest - pocketVerticalDistance, pocketHorizontalDistance));
	//	dgl->draw(pDC, &redPen);

	//	CVertex *dhl = new CVertex(new VerConstraintRelation(cd, pocketHorizontalDistance, - pocketVerticalDistance));
	//	dhl->draw(pDC, &greenPen);

	//	// 右口袋


	//}

	//// 马夹-口袋
	//void static TestDraw_VestPocket(CDC*pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));
	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

	//	CPoint1 originPoint = CPoint1(120, 50);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, pocketLength);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, pocketHeight);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, pocketLength);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, pocketHeight);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	ab->draw(pDC);
	//	ad->draw(pDC);

	//	bc->draw(pDC);
	//	cd->draw(pDC);


	//	// 绘制袋口线
	//	CVertex *ef = new CVertex(new ParaConstraintRelation(ab, ad, bc, pocketMouthHeight));
	//	ef->draw(pDC);

	//}


	//// 大衣-后片
	//void static TestDraw_Coat(CDC*pDC) {

	//	CPen redPen;
	//	redPen.CreatePen(PS_SOLID, 3, RGB(255, 0, 0));

	//	CPen greenPen;
	//	greenPen.CreatePen(PS_SOLID, 3, RGB(0, 255, 0));

	//	CPoint1 originPoint = CPoint1(800, 420);

	//	ConstraintRelation * parameterCRhorizontal = new ParameterConstraintRelation(originPoint, 0, rectWidth_backCoat);
	//	ConstraintRelation * parameterCRvertical = new ParameterConstraintRelation(originPoint, 90, rectLength_backCoat);

	//	//水平ab
	//	CVertex *ab = new CVertex(parameterCRhorizontal);
	//	//垂直ad
	//	CVertex *ad = new CVertex(parameterCRvertical);

	//	ConstraintRelation * rayCRhorizontal = new RayConstraintRelation(ad, LineStOrEd::END, 0, rectWidth_backCoat);
	//	ConstraintRelation * rayCRvertical = new RayConstraintRelation(ab, LineStOrEd::END, 90, rectLength_backCoat);

	//	//水平cd
	//	CVertex *cd = new CVertex(rayCRhorizontal);
	//	//垂直bc
	//	CVertex *bc = new CVertex(rayCRvertical);

	//	//ab->draw(pDC);
	//	//ad->draw(pDC);

	//	//bc->draw(pDC);
	//	//cd->draw(pDC);




	//	//oo1 绘制后中线。 平行ad， 与ab，cd相交，
	//	CVertex *aa1 = new CVertex(new ParaConstraintRelation(ad, ab, cd, rectWidthV_Body / 2));
	//	aa1->draw(pDC);


	//	//ww1 绘制腰围线。 平行ab， 与ad，bc相交
	//	CVertex *ww1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, backLength));
	//	/*ww1->draw(pDC);*/

	//	//jj1 绘制胸围线  平行ad， 与ab，ef相交，
	//	CVertex *jj1 = new CVertex(new ParaConstraintRelation(ab, ad, bc, bust / 5 + 4 + 1.5));
	//	jj1->draw(pDC);








	//}



	



